/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConstraintAccess().getAlternatives(), "rule__Constraint__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getIntegerAccess().getAlternatives(), "rule__Integer__Alternatives");
					put(grammarAccess.getDoubleAccess().getAlternatives(), "rule__Double__Alternatives");
					put(grammarAccess.getStringgAccess().getAlternatives(), "rule__Stringg__Alternatives");
					put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
					put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getBinaryOperatorAccess().getAlternatives(), "rule__BinaryOperator__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_3(), "rule__Model__Group_3__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup(), "rule__ConfiguratorModel__Group__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_4(), "rule__ConfiguratorModel__Group_4__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_4_3(), "rule__ConfiguratorModel__Group_4_3__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_5(), "rule__ConfiguratorModel__Group_5__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_5_3(), "rule__ConfiguratorModel__Group_5_3__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_3(), "rule__Parameter__Group_3__0");
					put(grammarAccess.getParameterAccess().getGroup_5(), "rule__Parameter__Group_5__0");
					put(grammarAccess.getParameterAccess().getGroup_9(), "rule__Parameter__Group_9__0");
					put(grammarAccess.getParameterAccess().getGroup_9_2(), "rule__Parameter__Group_9_2__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
					put(grammarAccess.getEnumAccess().getGroup_2(), "rule__Enum__Group_2__0");
					put(grammarAccess.getIntegerAccess().getGroup_0(), "rule__Integer__Group_0__0");
					put(grammarAccess.getDoubleAccess().getGroup_0(), "rule__Double__Group_0__0");
					put(grammarAccess.getStringgAccess().getGroup_0(), "rule__Stringg__Group_0__0");
					put(grammarAccess.getStringgAccess().getGroup_1(), "rule__Stringg__Group_1__0");
					put(grammarAccess.getBooleanAccess().getGroup_0(), "rule__Boolean__Group_0__0");
					put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
					put(grammarAccess.getBinaryConstraintAccess().getGroup(), "rule__BinaryConstraint__Group__0");
					put(grammarAccess.getModelAccess().getConfiguratorModelsAssignment_2(), "rule__Model__ConfiguratorModelsAssignment_2");
					put(grammarAccess.getModelAccess().getConfiguratorModelsAssignment_3_1(), "rule__Model__ConfiguratorModelsAssignment_3_1");
					put(grammarAccess.getConfiguratorModelAccess().getNameAssignment_2(), "rule__ConfiguratorModel__NameAssignment_2");
					put(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_4_2(), "rule__ConfiguratorModel__ParametersAssignment_4_2");
					put(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_4_3_1(), "rule__ConfiguratorModel__ParametersAssignment_4_3_1");
					put(grammarAccess.getConfiguratorModelAccess().getConstraintsAssignment_5_2(), "rule__ConfiguratorModel__ConstraintsAssignment_5_2");
					put(grammarAccess.getConfiguratorModelAccess().getConstraintsAssignment_5_3_1(), "rule__ConfiguratorModel__ConstraintsAssignment_5_3_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
					put(grammarAccess.getParameterAccess().getMinChosenValuesAssignment_3_2(), "rule__Parameter__MinChosenValuesAssignment_3_2");
					put(grammarAccess.getParameterAccess().getMaxChosenValuesAssignment_5_2(), "rule__Parameter__MaxChosenValuesAssignment_5_2");
					put(grammarAccess.getParameterAccess().getTypeAssignment_8(), "rule__Parameter__TypeAssignment_8");
					put(grammarAccess.getParameterAccess().getChildrenAssignment_9_1(), "rule__Parameter__ChildrenAssignment_9_1");
					put(grammarAccess.getParameterAccess().getChildrenAssignment_9_2_1(), "rule__Parameter__ChildrenAssignment_9_2_1");
					put(grammarAccess.getEnumAccess().getValuesAssignment_1(), "rule__Enum__ValuesAssignment_1");
					put(grammarAccess.getEnumAccess().getValuesAssignment_2_1(), "rule__Enum__ValuesAssignment_2_1");
					put(grammarAccess.getIntegerAccess().getValueAssignment_1(), "rule__Integer__ValueAssignment_1");
					put(grammarAccess.getDoubleAccess().getValueAssignment_1(), "rule__Double__ValueAssignment_1");
					put(grammarAccess.getStringgAccess().getValueAssignment_1_1(), "rule__Stringg__ValueAssignment_1_1");
					put(grammarAccess.getBooleanAccess().getValueAssignment_1(), "rule__Boolean__ValueAssignment_1");
					put(grammarAccess.getBinaryConstraintAccess().getLeftOperandAssignment_1(), "rule__BinaryConstraint__LeftOperandAssignment_1");
					put(grammarAccess.getBinaryConstraintAccess().getOperatorAssignment_2(), "rule__BinaryConstraint__OperatorAssignment_2");
					put(grammarAccess.getBinaryConstraintAccess().getRightOperandAssignment_3(), "rule__BinaryConstraint__RightOperandAssignment_3");
					put(grammarAccess.getParameterIdentifierAccess().getParameterAssignment(), "rule__ParameterIdentifier__ParameterAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
