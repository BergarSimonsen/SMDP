/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConfiguratorModelAccess().getAlternatives_5_2(), "rule__ConfiguratorModel__Alternatives_5_2");
					put(grammarAccess.getConfiguratorModelAccess().getAlternatives_5_3_1(), "rule__ConfiguratorModel__Alternatives_5_3_1");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getBinaryOperatorAccess().getAlternatives(), "rule__BinaryOperator__Alternatives");
					put(grammarAccess.getConfiguratorModelAccess().getGroup(), "rule__ConfiguratorModel__Group__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_4(), "rule__ConfiguratorModel__Group_4__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_4_3(), "rule__ConfiguratorModel__Group_4_3__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_5(), "rule__ConfiguratorModel__Group_5__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_5_3(), "rule__ConfiguratorModel__Group_5_3__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_6(), "rule__ConfiguratorModel__Group_6__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_6_3(), "rule__ConfiguratorModel__Group_6_3__0");
					put(grammarAccess.getParameter2Access().getGroup(), "rule__Parameter2__Group__0");
					put(grammarAccess.getParameter2Access().getGroup_4(), "rule__Parameter2__Group_4__0");
					put(grammarAccess.getParameter2Access().getGroup_6(), "rule__Parameter2__Group_6__0");
					put(grammarAccess.getParameter2Access().getGroup_7(), "rule__Parameter2__Group_7__0");
					put(grammarAccess.getParameter3Access().getGroup(), "rule__Parameter3__Group__0");
					put(grammarAccess.getParameter3Access().getGroup_4(), "rule__Parameter3__Group_4__0");
					put(grammarAccess.getParameter3Access().getGroup_4_4(), "rule__Parameter3__Group_4_4__0");
					put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
					put(grammarAccess.getConstraintAccess().getGroup_1(), "rule__Constraint__Group_1__0");
					put(grammarAccess.getConstraintAccess().getGroup_2(), "rule__Constraint__Group_2__0");
					put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
					put(grammarAccess.getEnumAccess().getGroup_4(), "rule__Enum__Group_4__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getIntLiteralAccess().getGroup(), "rule__IntLiteral__Group__0");
					put(grammarAccess.getDoubleLiteralAccess().getGroup(), "rule__DoubleLiteral__Group__0");
					put(grammarAccess.getStringLiteralAccess().getGroup(), "rule__StringLiteral__Group__0");
					put(grammarAccess.getBooleanLiteralAccess().getGroup(), "rule__BooleanLiteral__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
					put(grammarAccess.getBinaryExpressionAccess().getGroup(), "rule__BinaryExpression__Group__0");
					put(grammarAccess.getParameterIdentifierAccess().getGroup(), "rule__ParameterIdentifier__Group__0");
					put(grammarAccess.getConfiguratorModelAccess().getNameAssignment_2(), "rule__ConfiguratorModel__NameAssignment_2");
					put(grammarAccess.getConfiguratorModelAccess().getEnumsAssignment_4_2(), "rule__ConfiguratorModel__EnumsAssignment_4_2");
					put(grammarAccess.getConfiguratorModelAccess().getEnumsAssignment_4_3_1(), "rule__ConfiguratorModel__EnumsAssignment_4_3_1");
					put(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_5_2_0(), "rule__ConfiguratorModel__ParametersAssignment_5_2_0");
					put(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_5_2_1(), "rule__ConfiguratorModel__ParametersAssignment_5_2_1");
					put(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_5_3_1_0(), "rule__ConfiguratorModel__ParametersAssignment_5_3_1_0");
					put(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_5_3_1_1(), "rule__ConfiguratorModel__ParametersAssignment_5_3_1_1");
					put(grammarAccess.getConfiguratorModelAccess().getConstraintsAssignment_6_2(), "rule__ConfiguratorModel__ConstraintsAssignment_6_2");
					put(grammarAccess.getConfiguratorModelAccess().getConstraintsAssignment_6_3_1(), "rule__ConfiguratorModel__ConstraintsAssignment_6_3_1");
					put(grammarAccess.getParameter2Access().getNameAssignment_2(), "rule__Parameter2__NameAssignment_2");
					put(grammarAccess.getParameter2Access().getMaxChosenValuesAssignment_4_2(), "rule__Parameter2__MaxChosenValuesAssignment_4_2");
					put(grammarAccess.getParameter2Access().getMinChosenValuesAssignment_6_2(), "rule__Parameter2__MinChosenValuesAssignment_6_2");
					put(grammarAccess.getParameter2Access().getEnumAssignment_7_3(), "rule__Parameter2__EnumAssignment_7_3");
					put(grammarAccess.getParameter3Access().getNameAssignment_2(), "rule__Parameter3__NameAssignment_2");
					put(grammarAccess.getParameter3Access().getChildrenAssignment_4_3(), "rule__Parameter3__ChildrenAssignment_4_3");
					put(grammarAccess.getParameter3Access().getChildrenAssignment_4_4_1(), "rule__Parameter3__ChildrenAssignment_4_4_1");
					put(grammarAccess.getConstraintAccess().getIfAssignment_1_1(), "rule__Constraint__IfAssignment_1_1");
					put(grammarAccess.getConstraintAccess().getThenAssignment_2_1(), "rule__Constraint__ThenAssignment_2_1");
					put(grammarAccess.getEnumAccess().getNameAssignment_1(), "rule__Enum__NameAssignment_1");
					put(grammarAccess.getEnumAccess().getValuesAssignment_3(), "rule__Enum__ValuesAssignment_3");
					put(grammarAccess.getEnumAccess().getValuesAssignment_4_1(), "rule__Enum__ValuesAssignment_4_1");
					put(grammarAccess.getIntLiteralAccess().getValueAssignment_1(), "rule__IntLiteral__ValueAssignment_1");
					put(grammarAccess.getDoubleLiteralAccess().getValueAssignment_1(), "rule__DoubleLiteral__ValueAssignment_1");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment_1(), "rule__StringLiteral__ValueAssignment_1");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1(), "rule__BooleanLiteral__ValueAssignment_1");
					put(grammarAccess.getBinaryExpressionAccess().getLeftOperandAssignment_1(), "rule__BinaryExpression__LeftOperandAssignment_1");
					put(grammarAccess.getBinaryExpressionAccess().getOperatorAssignment_2(), "rule__BinaryExpression__OperatorAssignment_2");
					put(grammarAccess.getBinaryExpressionAccess().getRightOperandAssignment_3(), "rule__BinaryExpression__RightOperandAssignment_3");
					put(grammarAccess.getParameterIdentifierAccess().getParameterAssignment_1(), "rule__ParameterIdentifier__ParameterAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleConfiguratorModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
