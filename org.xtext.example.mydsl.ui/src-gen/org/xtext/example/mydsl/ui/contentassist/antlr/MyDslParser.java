/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConstraintAccess().getAlternatives(), "rule__Constraint__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getTypeNameAccess().getAlternatives(), "rule__TypeName__Alternatives");
					put(grammarAccess.getBinaryOperatorAccess().getAlternatives(), "rule__BinaryOperator__Alternatives");
					put(grammarAccess.getConfiguratorModelAccess().getGroup(), "rule__ConfiguratorModel__Group__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_3(), "rule__ConfiguratorModel__Group_3__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_4(), "rule__ConfiguratorModel__Group_4__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_4_3(), "rule__ConfiguratorModel__Group_4_3__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_5(), "rule__ConfiguratorModel__Group_5__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_5_3(), "rule__ConfiguratorModel__Group_5_3__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_6(), "rule__ConfiguratorModel__Group_6__0");
					put(grammarAccess.getConfiguratorModelAccess().getGroup_6_3(), "rule__ConfiguratorModel__Group_6_3__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_3(), "rule__Parameter__Group_3__0");
					put(grammarAccess.getParameterAccess().getGroup_4(), "rule__Parameter__Group_4__0");
					put(grammarAccess.getParamCategoryAccess().getGroup(), "rule__ParamCategory__Group__0");
					put(grammarAccess.getParamCategoryAccess().getGroup_2(), "rule__ParamCategory__Group_2__0");
					put(grammarAccess.getParamCategoryAccess().getGroup_6(), "rule__ParamCategory__Group_6__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup(), "rule__SimpleType__Group__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_3(), "rule__SimpleType__Group_3__0");
					put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
					put(grammarAccess.getEnumAccess().getGroup_5(), "rule__Enum__Group_5__0");
					put(grammarAccess.getValueAccess().getGroup(), "rule__Value__Group__0");
					put(grammarAccess.getBinaryConstraintAccess().getGroup(), "rule__BinaryConstraint__Group__0");
					put(grammarAccess.getBinaryConstraintAccess().getGroup_2(), "rule__BinaryConstraint__Group_2__0");
					put(grammarAccess.getUnaryConstraintAccess().getGroup(), "rule__UnaryConstraint__Group__0");
					put(grammarAccess.getUnaryConstraintAccess().getGroup_2(), "rule__UnaryConstraint__Group_2__0");
					put(grammarAccess.getParameterIdentifierAccess().getGroup(), "rule__ParameterIdentifier__Group__0");
					put(grammarAccess.getConfiguratorModelAccess().getNameAssignment_3_1(), "rule__ConfiguratorModel__NameAssignment_3_1");
					put(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_4_2(), "rule__ConfiguratorModel__ParametersAssignment_4_2");
					put(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_4_3_1(), "rule__ConfiguratorModel__ParametersAssignment_4_3_1");
					put(grammarAccess.getConfiguratorModelAccess().getConstraintsAssignment_5_2(), "rule__ConfiguratorModel__ConstraintsAssignment_5_2");
					put(grammarAccess.getConfiguratorModelAccess().getConstraintsAssignment_5_3_1(), "rule__ConfiguratorModel__ConstraintsAssignment_5_3_1");
					put(grammarAccess.getConfiguratorModelAccess().getCategoriesAssignment_6_2(), "rule__ConfiguratorModel__CategoriesAssignment_6_2");
					put(grammarAccess.getConfiguratorModelAccess().getCategoriesAssignment_6_3_1(), "rule__ConfiguratorModel__CategoriesAssignment_6_3_1");
					put(grammarAccess.getParameterAccess().getRequiredAssignment_0(), "rule__Parameter__RequiredAssignment_0");
					put(grammarAccess.getParameterAccess().getNameAssignment_3_1(), "rule__Parameter__NameAssignment_3_1");
					put(grammarAccess.getParameterAccess().getMaxChosenValuesAssignment_4_1(), "rule__Parameter__MaxChosenValuesAssignment_4_1");
					put(grammarAccess.getParameterAccess().getParamTypeAssignment_6(), "rule__Parameter__ParamTypeAssignment_6");
					put(grammarAccess.getParamCategoryAccess().getNameAssignment_2_1(), "rule__ParamCategory__NameAssignment_2_1");
					put(grammarAccess.getParamCategoryAccess().getParamsAssignment_5(), "rule__ParamCategory__ParamsAssignment_5");
					put(grammarAccess.getParamCategoryAccess().getParamsAssignment_6_1(), "rule__ParamCategory__ParamsAssignment_6_1");
					put(grammarAccess.getSimpleTypeAccess().getNameAssignment_3_1(), "rule__SimpleType__NameAssignment_3_1");
					put(grammarAccess.getEnumAccess().getValuesAssignment_4(), "rule__Enum__ValuesAssignment_4");
					put(grammarAccess.getEnumAccess().getValuesAssignment_5_1(), "rule__Enum__ValuesAssignment_5_1");
					put(grammarAccess.getValueAccess().getNameAssignment_2(), "rule__Value__NameAssignment_2");
					put(grammarAccess.getBinaryConstraintAccess().getOperatorAssignment_2_1(), "rule__BinaryConstraint__OperatorAssignment_2_1");
					put(grammarAccess.getBinaryConstraintAccess().getLeftOperandAssignment_4(), "rule__BinaryConstraint__LeftOperandAssignment_4");
					put(grammarAccess.getBinaryConstraintAccess().getRightOperandAssignment_6(), "rule__BinaryConstraint__RightOperandAssignment_6");
					put(grammarAccess.getUnaryConstraintAccess().getOperatorAssignment_2_1(), "rule__UnaryConstraint__OperatorAssignment_2_1");
					put(grammarAccess.getUnaryConstraintAccess().getOperandAssignment_4(), "rule__UnaryConstraint__OperandAssignment_4");
					put(grammarAccess.getParameterIdentifierAccess().getParameterAssignment_3(), "rule__ParameterIdentifier__ParameterAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleConfiguratorModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
