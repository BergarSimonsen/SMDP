/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraint
entryRuleConstraint 
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintAccess().getAlternatives()); }
(rule__Constraint__Alternatives)
{ after(grammarAccess.getConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConfiguratorModel
entryRuleConfiguratorModel 
:
{ before(grammarAccess.getConfiguratorModelRule()); }
	 ruleConfiguratorModel
{ after(grammarAccess.getConfiguratorModelRule()); } 
	 EOF 
;

// Rule ConfiguratorModel
ruleConfiguratorModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConfiguratorModelAccess().getGroup()); }
(rule__ConfiguratorModel__Group__0)
{ after(grammarAccess.getConfiguratorModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEInt
entryRuleEInt 
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEIntAccess().getGroup()); }
(rule__EInt__Group__0)
{ after(grammarAccess.getEIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnum
entryRuleEnum 
:
{ before(grammarAccess.getEnumRule()); }
	 ruleEnum
{ after(grammarAccess.getEnumRule()); } 
	 EOF 
;

// Rule Enum
ruleEnum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumAccess().getGroup()); }
(rule__Enum__Group__0)
{ after(grammarAccess.getEnumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getAlternatives()); }
(rule__Integer__Alternatives)
{ after(grammarAccess.getIntegerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDouble
entryRuleDouble 
:
{ before(grammarAccess.getDoubleRule()); }
	 ruleDouble
{ after(grammarAccess.getDoubleRule()); } 
	 EOF 
;

// Rule Double
ruleDouble
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleAccess().getAlternatives()); }
(rule__Double__Alternatives)
{ after(grammarAccess.getDoubleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleString0
entryRuleString0 
:
{ before(grammarAccess.getString0Rule()); }
	 ruleString0
{ after(grammarAccess.getString0Rule()); } 
	 EOF 
;

// Rule String0
ruleString0
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getString0Access().getAlternatives()); }
(rule__String0__Alternatives)
{ after(grammarAccess.getString0Access().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolean
entryRuleBoolean 
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
(rule__Boolean__Alternatives)
{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEDouble
entryRuleEDouble 
:
{ before(grammarAccess.getEDoubleRule()); }
	 ruleEDouble
{ after(grammarAccess.getEDoubleRule()); } 
	 EOF 
;

// Rule EDouble
ruleEDouble
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEDoubleAccess().getGroup()); }
(rule__EDouble__Group__0)
{ after(grammarAccess.getEDoubleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEBoolean
entryRuleEBoolean 
:
{ before(grammarAccess.getEBooleanRule()); }
	 ruleEBoolean
{ after(grammarAccess.getEBooleanRule()); } 
	 EOF 
;

// Rule EBoolean
ruleEBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEBooleanAccess().getAlternatives()); }
(rule__EBoolean__Alternatives)
{ after(grammarAccess.getEBooleanAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinaryConstraint
entryRuleBinaryConstraint 
:
{ before(grammarAccess.getBinaryConstraintRule()); }
	 ruleBinaryConstraint
{ after(grammarAccess.getBinaryConstraintRule()); } 
	 EOF 
;

// Rule BinaryConstraint
ruleBinaryConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryConstraintAccess().getGroup()); }
(rule__BinaryConstraint__Group__0)
{ after(grammarAccess.getBinaryConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterIdentifier
entryRuleParameterIdentifier 
:
{ before(grammarAccess.getParameterIdentifierRule()); }
	 ruleParameterIdentifier
{ after(grammarAccess.getParameterIdentifierRule()); } 
	 EOF 
;

// Rule ParameterIdentifier
ruleParameterIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterIdentifierAccess().getParameterAssignment()); }
(rule__ParameterIdentifier__ParameterAssignment)
{ after(grammarAccess.getParameterIdentifierAccess().getParameterAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BinaryOperator
ruleBinaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryOperatorAccess().getAlternatives()); }
(rule__BinaryOperator__Alternatives)
{ after(grammarAccess.getBinaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Constraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getBinaryConstraintParserRuleCall_0()); }
	ruleBinaryConstraint
{ after(grammarAccess.getConstraintAccess().getBinaryConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getIntegerParserRuleCall_1()); }
	ruleInteger
{ after(grammarAccess.getConstraintAccess().getIntegerParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getDoubleParserRuleCall_2()); }
	ruleDouble
{ after(grammarAccess.getConstraintAccess().getDoubleParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getString0ParserRuleCall_3()); }
	ruleString0
{ after(grammarAccess.getConstraintAccess().getString0ParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getBooleanParserRuleCall_4()); }
	ruleBoolean
{ after(grammarAccess.getConstraintAccess().getBooleanParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getParameterIdentifierParserRuleCall_5()); }
	ruleParameterIdentifier
{ after(grammarAccess.getConstraintAccess().getParameterIdentifierParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getEnumParserRuleCall_0()); }
	ruleEnum
{ after(grammarAccess.getTypeAccess().getEnumParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getIntegerParserRuleCall_1()); }
	ruleInteger
{ after(grammarAccess.getTypeAccess().getIntegerParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getDoubleParserRuleCall_2()); }
	ruleDouble
{ after(grammarAccess.getTypeAccess().getDoubleParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getString0ParserRuleCall_3()); }
	ruleString0
{ after(grammarAccess.getTypeAccess().getString0ParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getBooleanParserRuleCall_4()); }
	ruleBoolean
{ after(grammarAccess.getTypeAccess().getBooleanParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getIntegerParserRuleCall_0()); }
	ruleInteger
{ after(grammarAccess.getLiteralAccess().getIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getDoubleParserRuleCall_1()); }
	ruleDouble
{ after(grammarAccess.getLiteralAccess().getDoubleParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getString0ParserRuleCall_2()); }
	ruleString0
{ after(grammarAccess.getLiteralAccess().getString0ParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanParserRuleCall_3()); }
	ruleBoolean
{ after(grammarAccess.getLiteralAccess().getBooleanParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getGroup_0()); }
(rule__Integer__Group_0__0)
{ after(grammarAccess.getIntegerAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getIntegerAccess().getValueAssignment_1()); }
(rule__Integer__ValueAssignment_1)
{ after(grammarAccess.getIntegerAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getGroup_0()); }
(rule__Double__Group_0__0)
{ after(grammarAccess.getDoubleAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getDoubleAccess().getValueAssignment_1()); }
(rule__Double__ValueAssignment_1)
{ after(grammarAccess.getDoubleAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getString0Access().getGroup_0()); }
(rule__String0__Group_0__0)
{ after(grammarAccess.getString0Access().getGroup_0()); }
)

    |(
{ before(grammarAccess.getString0Access().getGroup_1()); }
(rule__String0__Group_1__0)
{ after(grammarAccess.getString0Access().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAccess().getGroup_0()); }
(rule__Boolean__Group_0__0)
{ after(grammarAccess.getBooleanAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBooleanAccess().getValueAssignment_1()); }
(rule__Boolean__ValueAssignment_1)
{ after(grammarAccess.getBooleanAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Alternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getEKeyword_4_0_0()); }

	'E' 

{ after(grammarAccess.getEDoubleAccess().getEKeyword_4_0_0()); }
)

    |(
{ before(grammarAccess.getEDoubleAccess().getEKeyword_4_0_1()); }

	'e' 

{ after(grammarAccess.getEDoubleAccess().getEKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EBoolean__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryOperatorAccess().getANDEnumLiteralDeclaration_0()); }
(	'&&' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getANDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorAccess().getOREnumLiteralDeclaration_1()); }
(	'||' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getOREnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorAccess().getXOREnumLiteralDeclaration_2()); }
(	'!||' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getXOREnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorAccess().getEQUALSEnumLiteralDeclaration_3()); }
(	'==' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getEQUALSEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorAccess().getNOTEQUALSEnumLiteralDeclaration_4()); }
(	'!=' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getNOTEQUALSEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorAccess().getGTEnumLiteralDeclaration_5()); }
(	'>' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getGTEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorAccess().getLTEnumLiteralDeclaration_6()); }
(	'<' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getLTEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorAccess().getGTEQEnumLiteralDeclaration_7()); }
(	'>=' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getGTEQEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorAccess().getLTEQEnumLiteralDeclaration_8()); }
(	'<=' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getLTEQEnumLiteralDeclaration_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModelKeyword_0()); }

	'Model' 

{ after(grammarAccess.getModelAccess().getModelKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getConfiguratorModelsAssignment_3()); }
(rule__Model__ConfiguratorModelsAssignment_3)
{ after(grammarAccess.getModelAccess().getConfiguratorModelsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_4()); }
(rule__Model__Group_4__0)*
{ after(grammarAccess.getModelAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__5__Impl
	rule__Model__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Model__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__0__Impl
	rule__Model__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getModelAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getConfiguratorModelsAssignment_4_1()); }
(rule__Model__ConfiguratorModelsAssignment_4_1)
{ after(grammarAccess.getModelAccess().getConfiguratorModelsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConfiguratorModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group__0__Impl
	rule__ConfiguratorModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getConfiguratorModelAction_0()); }
(

)
{ after(grammarAccess.getConfiguratorModelAccess().getConfiguratorModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group__1__Impl
	rule__ConfiguratorModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getConfiguratorModelKeyword_1()); }

	'ConfiguratorModel' 

{ after(grammarAccess.getConfiguratorModelAccess().getConfiguratorModelKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group__2__Impl
	rule__ConfiguratorModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getNameAssignment_2()); }
(rule__ConfiguratorModel__NameAssignment_2)
{ after(grammarAccess.getConfiguratorModelAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group__3__Impl
	rule__ConfiguratorModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getConfiguratorModelAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group__4__Impl
	rule__ConfiguratorModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getGroup_4()); }
(rule__ConfiguratorModel__Group_4__0)?
{ after(grammarAccess.getConfiguratorModelAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group__5__Impl
	rule__ConfiguratorModel__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getGroup_5()); }
(rule__ConfiguratorModel__Group_5__0)?
{ after(grammarAccess.getConfiguratorModelAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getConfiguratorModelAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ConfiguratorModel__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_4__0__Impl
	rule__ConfiguratorModel__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getParametersKeyword_4_0()); }

	'parameters' 

{ after(grammarAccess.getConfiguratorModelAccess().getParametersKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_4__1__Impl
	rule__ConfiguratorModel__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getLeftCurlyBracketKeyword_4_1()); }

	'{' 

{ after(grammarAccess.getConfiguratorModelAccess().getLeftCurlyBracketKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_4__2__Impl
	rule__ConfiguratorModel__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_4_2()); }
(rule__ConfiguratorModel__ParametersAssignment_4_2)
{ after(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_4__3__Impl
	rule__ConfiguratorModel__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getGroup_4_3()); }
(rule__ConfiguratorModel__Group_4_3__0)*
{ after(grammarAccess.getConfiguratorModelAccess().getGroup_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group_4__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_4__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getRightCurlyBracketKeyword_4_4()); }

	'}' 

{ after(grammarAccess.getConfiguratorModelAccess().getRightCurlyBracketKeyword_4_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ConfiguratorModel__Group_4_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_4_3__0__Impl
	rule__ConfiguratorModel__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_4_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getCommaKeyword_4_3_0()); }

	',' 

{ after(grammarAccess.getConfiguratorModelAccess().getCommaKeyword_4_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group_4_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_4_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_4_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_4_3_1()); }
(rule__ConfiguratorModel__ParametersAssignment_4_3_1)
{ after(grammarAccess.getConfiguratorModelAccess().getParametersAssignment_4_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConfiguratorModel__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_5__0__Impl
	rule__ConfiguratorModel__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getConstraintsKeyword_5_0()); }

	'constraints' 

{ after(grammarAccess.getConfiguratorModelAccess().getConstraintsKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_5__1__Impl
	rule__ConfiguratorModel__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getLeftCurlyBracketKeyword_5_1()); }

	'{' 

{ after(grammarAccess.getConfiguratorModelAccess().getLeftCurlyBracketKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_5__2__Impl
	rule__ConfiguratorModel__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getConstraintsAssignment_5_2()); }
(rule__ConfiguratorModel__ConstraintsAssignment_5_2)
{ after(grammarAccess.getConfiguratorModelAccess().getConstraintsAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_5__3__Impl
	rule__ConfiguratorModel__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getGroup_5_3()); }
(rule__ConfiguratorModel__Group_5_3__0)*
{ after(grammarAccess.getConfiguratorModelAccess().getGroup_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group_5__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_5__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getRightCurlyBracketKeyword_5_4()); }

	'}' 

{ after(grammarAccess.getConfiguratorModelAccess().getRightCurlyBracketKeyword_5_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ConfiguratorModel__Group_5_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_5_3__0__Impl
	rule__ConfiguratorModel__Group_5_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_5_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getCommaKeyword_5_3_0()); }

	',' 

{ after(grammarAccess.getConfiguratorModelAccess().getCommaKeyword_5_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__Group_5_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfiguratorModel__Group_5_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group_5_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getConstraintsAssignment_5_3_1()); }
(rule__ConfiguratorModel__ConstraintsAssignment_5_3_1)
{ after(grammarAccess.getConfiguratorModelAccess().getConstraintsAssignment_5_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getParameterKeyword_0()); }

	'Parameter' 

{ after(grammarAccess.getParameterAccess().getParameterKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
(rule__Parameter__NameAssignment_1)
{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
	rule__Parameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getParameterAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__3__Impl
	rule__Parameter__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getGroup_3()); }
(rule__Parameter__Group_3__0)
{ after(grammarAccess.getParameterAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__4__Impl
	rule__Parameter__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getCommaKeyword_4()); }

	',' 

{ after(grammarAccess.getParameterAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__5__Impl
	rule__Parameter__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getGroup_5()); }
(rule__Parameter__Group_5__0)
{ after(grammarAccess.getParameterAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__6__Impl
	rule__Parameter__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getCommaKeyword_6()); }

	',' 

{ after(grammarAccess.getParameterAccess().getCommaKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__7__Impl
	rule__Parameter__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getParameterAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__8__Impl
	rule__Parameter__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getColonKeyword_8()); }

	':' 

{ after(grammarAccess.getParameterAccess().getColonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_9()); }
(rule__Parameter__TypeAssignment_9)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__Parameter__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_3__0__Impl
	rule__Parameter__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getMinChosenValuesKeyword_3_0()); }

	'minChosenValues' 

{ after(grammarAccess.getParameterAccess().getMinChosenValuesKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_3__1__Impl
	rule__Parameter__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getColonKeyword_3_1()); }

	':' 

{ after(grammarAccess.getParameterAccess().getColonKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getMinChosenValuesAssignment_3_2()); }
(rule__Parameter__MinChosenValuesAssignment_3_2)
{ after(grammarAccess.getParameterAccess().getMinChosenValuesAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parameter__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_5__0__Impl
	rule__Parameter__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getMaxChosenValuesKeyword_5_0()); }

	'maxChosenValues' 

{ after(grammarAccess.getParameterAccess().getMaxChosenValuesKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_5__1__Impl
	rule__Parameter__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getColonKeyword_5_1()); }

	':' 

{ after(grammarAccess.getParameterAccess().getColonKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getMaxChosenValuesAssignment_5_2()); }
(rule__Parameter__MaxChosenValuesAssignment_5_2)
{ after(grammarAccess.getParameterAccess().getMaxChosenValuesAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Enum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__0__Impl
	rule__Enum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getEnumAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__1__Impl
	rule__Enum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getValuesAssignment_1()); }
(rule__Enum__ValuesAssignment_1)
{ after(grammarAccess.getEnumAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__2__Impl
	rule__Enum__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getGroup_2()); }
(rule__Enum__Group_2__0)*
{ after(grammarAccess.getEnumAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getEnumAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Enum__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group_2__0__Impl
	rule__Enum__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getEnumAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getValuesAssignment_2_1()); }
(rule__Enum__ValuesAssignment_2_1)
{ after(grammarAccess.getEnumAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Integer__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group_0__0__Impl
	rule__Integer__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getIntegerAction_0_0()); }
(

)
{ after(grammarAccess.getIntegerAccess().getIntegerAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getIntKeyword_0_1()); }

	'int' 

{ after(grammarAccess.getIntegerAccess().getIntKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Double__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_0__0__Impl
	rule__Double__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getDoubleAction_0_0()); }
(

)
{ after(grammarAccess.getDoubleAccess().getDoubleAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Double__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getDoubleKeyword_0_1()); }

	'double' 

{ after(grammarAccess.getDoubleAccess().getDoubleKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__String0__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__String0__Group_0__0__Impl
	rule__String0__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getString0Access().getStringAction_0_0()); }
(

)
{ after(grammarAccess.getString0Access().getStringAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__String0__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__String0__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getString0Access().getStringKeyword_0_1()); }

	'String' 

{ after(grammarAccess.getString0Access().getStringKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__String0__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__String0__Group_1__0__Impl
	rule__String0__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getString0Access().getSpaceKeyword_1_0()); }

	' ' 

{ after(grammarAccess.getString0Access().getSpaceKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__String0__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__String0__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getString0Access().getValueAssignment_1_1()); }
(rule__String0__ValueAssignment_1_1)
{ after(grammarAccess.getString0Access().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Boolean__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Boolean__Group_0__0__Impl
	rule__Boolean__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAccess().getBooleanAction_0_0()); }
(

)
{ after(grammarAccess.getBooleanAccess().getBooleanAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Boolean__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Boolean__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAccess().getBooleanKeyword_0_1()); }

	'boolean' 

{ after(grammarAccess.getBooleanAccess().getBooleanKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EDouble__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__0__Impl
	rule__EDouble__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__1__Impl
	rule__EDouble__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1()); }
(	RULE_INT)?
{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__2__Impl
	rule__EDouble__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getEDoubleAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__3__Impl
	rule__EDouble__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getGroup_4()); }
(rule__EDouble__Group_4__0)?
{ after(grammarAccess.getEDoubleAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EDouble__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_4__0__Impl
	rule__EDouble__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getAlternatives_4_0()); }
(rule__EDouble__Alternatives_4_0)
{ after(grammarAccess.getEDoubleAccess().getAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_4__1__Impl
	rule__EDouble__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1()); }
(
	'-' 
)?
{ after(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2()); }
	RULE_INT
{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BinaryConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group__0__Impl
	rule__BinaryConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getBinaryConstraintAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group__1__Impl
	rule__BinaryConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getLeftOperandAssignment_1()); }
(rule__BinaryConstraint__LeftOperandAssignment_1)
{ after(grammarAccess.getBinaryConstraintAccess().getLeftOperandAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group__2__Impl
	rule__BinaryConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getOperatorAssignment_2()); }
(rule__BinaryConstraint__OperatorAssignment_2)
{ after(grammarAccess.getBinaryConstraintAccess().getOperatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group__3__Impl
	rule__BinaryConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getRightOperandAssignment_3()); }
(rule__BinaryConstraint__RightOperandAssignment_3)
{ after(grammarAccess.getBinaryConstraintAccess().getRightOperandAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getBinaryConstraintAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__Model__ConfiguratorModelsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getConfiguratorModelsConfiguratorModelParserRuleCall_3_0()); }
	ruleConfiguratorModel{ after(grammarAccess.getModelAccess().getConfiguratorModelsConfiguratorModelParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ConfiguratorModelsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getConfiguratorModelsConfiguratorModelParserRuleCall_4_1_0()); }
	ruleConfiguratorModel{ after(grammarAccess.getModelAccess().getConfiguratorModelsConfiguratorModelParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getConfiguratorModelAccess().getNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__ParametersAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getParametersParameterParserRuleCall_4_2_0()); }
	ruleParameter{ after(grammarAccess.getConfiguratorModelAccess().getParametersParameterParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__ParametersAssignment_4_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getParametersParameterParserRuleCall_4_3_1_0()); }
	ruleParameter{ after(grammarAccess.getConfiguratorModelAccess().getParametersParameterParserRuleCall_4_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__ConstraintsAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getConstraintsConstraintParserRuleCall_5_2_0()); }
	ruleConstraint{ after(grammarAccess.getConfiguratorModelAccess().getConstraintsConstraintParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__ConstraintsAssignment_5_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfiguratorModelAccess().getConstraintsConstraintParserRuleCall_5_3_1_0()); }
	ruleConstraint{ after(grammarAccess.getConfiguratorModelAccess().getConstraintsConstraintParserRuleCall_5_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__MinChosenValuesAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getMinChosenValuesEIntParserRuleCall_3_2_0()); }
	ruleEInt{ after(grammarAccess.getParameterAccess().getMinChosenValuesEIntParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__MaxChosenValuesAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getMaxChosenValuesEIntParserRuleCall_5_2_0()); }
	ruleEInt{ after(grammarAccess.getParameterAccess().getMaxChosenValuesEIntParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_9_0()); }
	ruleType{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getValuesLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getEnumAccess().getValuesLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getValuesLiteralParserRuleCall_2_1_0()); }
	ruleLiteral{ after(grammarAccess.getEnumAccess().getValuesLiteralParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getValueEIntParserRuleCall_1_0()); }
	ruleEInt{ after(grammarAccess.getIntegerAccess().getValueEIntParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Double__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getValueEDoubleParserRuleCall_1_0()); }
	ruleEDouble{ after(grammarAccess.getDoubleAccess().getValueEDoubleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__String0__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getString0Access().getValueEStringParserRuleCall_1_1_0()); }
	ruleEString{ after(grammarAccess.getString0Access().getValueEStringParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAccess().getValueEBooleanParserRuleCall_1_0()); }
	ruleEBoolean{ after(grammarAccess.getBooleanAccess().getValueEBooleanParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__LeftOperandAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getLeftOperandConstraintParserRuleCall_1_0()); }
	ruleConstraint{ after(grammarAccess.getBinaryConstraintAccess().getLeftOperandConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__OperatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getOperatorBinaryOperatorEnumRuleCall_2_0()); }
	ruleBinaryOperator{ after(grammarAccess.getBinaryConstraintAccess().getOperatorBinaryOperatorEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__RightOperandAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getRightOperandConstraintParserRuleCall_3_0()); }
	ruleConstraint{ after(grammarAccess.getBinaryConstraintAccess().getRightOperandConstraintParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterIdentifier__ParameterAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterIdentifierAccess().getParameterParameterCrossReference_0()); }
(
{ before(grammarAccess.getParameterIdentifierAccess().getParameterParameterEStringParserRuleCall_0_1()); }
	ruleEString{ after(grammarAccess.getParameterIdentifierAccess().getParameterParameterEStringParserRuleCall_0_1()); }
)
{ after(grammarAccess.getParameterIdentifierAccess().getParameterParameterCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


