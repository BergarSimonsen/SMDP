// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.itu.dk/smdp/" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ConfiguratorModel returns ConfiguratorModel:
	{ConfiguratorModel}
	'ConfiguratorModel'
	'{'
		('Name' Name=EString)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('categories' '{' categories+=ParamCategory ( "," categories+=ParamCategory)* '}' )?
	'}';


Constraint returns Constraint:
	BinaryConstraint | UnaryConstraint | ParameterIdentifier;


Type returns Type:
	SimpleType | Enum;


Parameter returns Parameter:
	(required?='required')?
	'Parameter'
	'{'
		('Name' Name=EString)?
		('maxChosenValues' maxChosenValues=EInt)?
		'paramType' paramType=Type
	'}';

EString returns ecore::EString:
	STRING | ID;

ParamCategory returns ParamCategory:
	'ParamCategory'
	'{'
		('Name' Name=EString)?
		'params' '{' params+=Parameter ( "," params+=Parameter)* '}' 
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

SimpleType returns SimpleType:
	{SimpleType}
	'SimpleType'
	'{'
		('Name' Name=TypeName)?
	'}';

Enum returns Enum:
	'Enum'
	'{'
		'values' '{' values+=Value ( "," values+=Value)* '}' 
	'}';

enum TypeName returns TypeName:
				INT = 'INT' | BOOLEAN = 'BOOLEAN' | DOUBLE = 'DOUBLE' | STRING = 'STRING';

Value returns Value:
	{Value}
	'Value'
	name=EString;

BinaryConstraint returns BinaryConstraint:
	'BinaryConstraint'
	'{'
		('operator' operator=BinaryOperator)?
		'leftOperand' leftOperand=Constraint
		'rightOperand' rightOperand=Constraint
	'}';

UnaryConstraint returns UnaryConstraint:
	'UnaryConstraint'
	'{'
		('operator' operator=UnaryOperator)?
		'operand' operand=Constraint
	'}';

ParameterIdentifier returns ParameterIdentifier:
	'ParameterIdentifier'
	'{'
		'parameter' parameter=[Parameter|EString]
	'}';

enum BinaryOperator returns BinaryOperator:
				AND = 'AND' | OR = 'OR' | XOR = 'XOR' | EQUALS = 'EQUALS' | NOTEQUALS = 'NOTEQUALS' | GT = 'GT' | LT = 'LT' | GTEQ = 'GTEQ' | LTEQ = 'LTEQ';

enum UnaryOperator returns UnaryOperator:
				NOT = 'NOT';
