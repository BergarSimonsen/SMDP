// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

//import "http://www.itu.dk/smdp/" 
import "platform:/resource/ConfiguratorProject/model/Configurator.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ConfiguratorModel returns ConfiguratorModel:
	{ConfiguratorModel}
	'ConfiguratorModel'
	name=EString
	'{'
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('enums' '{' enums+=Enum ( "," enums+=Enum)* '}' )?
	'}';


Constraint returns Constraint:
	BinaryConstraint | UnaryConstraint | ParameterIdentifier | IntLiteral | DoubleLiteral | StringLiteral | BooleanLiteral | Literal_Impl;


Literal returns Literal:
	Literal_Impl | IntLiteral | DoubleLiteral | StringLiteral | BooleanLiteral;


EString returns ecore::EString:
	STRING | ID;

Parameter returns Parameter:
	{Parameter}
	(required?='required')?
	'Parameter'
	'{'
		('maxChosenValues' maxChosenValues=EInt)?
		('minChosenValues' minChosenValues=EInt)?
		('enumValue' enumValue=[Enum|EString])?
		('literalValue' '{' literalValue+=Literal ( "," literalValue+=Literal)* '}' )?
	'}';

Enum returns Enum:
	'Enum'
	name=EString
	'{'
		'values' '{' values+=Value ( "," values+=Value)* '}' 
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

Literal_Impl returns Literal:
	{Literal}
	'Literal'
	name=EString;

IntLiteral returns IntLiteral:
	{IntLiteral}
	'IntLiteral'
	name=EString
	'{'
		('value' value=EInt)?
	'}';

DoubleLiteral returns DoubleLiteral:
	{DoubleLiteral}
	'DoubleLiteral'
	name=EString
	'{'
		('value' value=EDouble)?
	'}';

StringLiteral returns StringLiteral:
	{StringLiteral}
	'StringLiteral'
	name=EString
	'{'
		('value' value=EString)?
	'}';

BooleanLiteral returns BooleanLiteral:
	{BooleanLiteral}
	(value?='value')?
	'BooleanLiteral'
	name=EString;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

BinaryConstraint returns BinaryConstraint:
	'BinaryConstraint'
	'{'
		('operator' operator=BinaryOperator)?
		'leftOperand' leftOperand=Constraint
		'rightOperand' rightOperand=Constraint
	'}';

UnaryConstraint returns UnaryConstraint:
	'UnaryConstraint'
	'{'
		('operator' operator=UnaryOperator)?
		'operand' operand=Constraint
	'}';

ParameterIdentifier returns ParameterIdentifier:
	'ParameterIdentifier'
	'{'
		'parameter' parameter=[Parameter|EString]
	'}';

enum BinaryOperator returns BinaryOperator:
				AND = 'AND' | OR = 'OR' | XOR = 'XOR' | EQUALS = 'EQUALS' | NOTEQUALS = 'NOTEQUALS' | GT = 'GT' | LT = 'LT' | GTEQ = 'GTEQ' | LTEQ = 'LTEQ';

enum UnaryOperator returns UnaryOperator:
				NOT = 'NOT';

Value returns Value:
	{Value}
	'Value'
	name=EString;
