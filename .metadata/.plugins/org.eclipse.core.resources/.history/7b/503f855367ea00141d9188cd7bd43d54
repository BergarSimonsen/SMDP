// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.itu.dk/smdp/" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ConfiguratorModel returns ConfiguratorModel:
	{ConfiguratorModel}
	'ConfiguratorModel'
	name=EString
	'{'
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('enums' '{' enums+=Enum ( "," enums+=Enum)* '}' )?
	'}';

Value returns Value:
	IntLiteral | DoubleLiteral | StringLiteral | BooleanLiteral;


Expression returns Expression:
	BinaryExpression | IntLiteral | DoubleLiteral | StringLiteral | BooleanLiteral | ParameterIdentifier;

EString returns ecore::EString:
	STRING | ID;

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	name=EString
	'{'
		('maxChosenValues' maxChosenValues=EInt)?
		('minChosenValues' minChosenValues=EInt)?
		('enum' ^enum=[Enum|EString])?
		('children' '(' children+=[Parameter|EString] ( "," children+=[Parameter|EString])* ')' )?
		('enumValues' '(' enumValues+=[Value|EString] ( "," enumValues+=[Value|EString])* ')' )?
		('literalValues' '{' literalValues+=Value ( "," literalValues+=Value)* '}' )?
	'}';

Constraint returns Constraint:
	{Constraint}
	'Constraint'
	'{'
		('if' if=BinaryExpression)?
		('then' then=BinaryExpression)?
	'}';

//Enum returns Enum:
//	'Enum'
//	name=EString
//	'{'
//		'values' '{' values+=Value ( "," values+=Value)* '}' 
//	'}';

Enum returns Enum:
	'Enum' name=EString ':' values+=Value ( "," values+=Value)* ';';

EInt returns ecore::EInt:
	'-'? INT;
	
IntLiteral returns IntLiteral:
	{IntLiteral}
	(value=EInt)?;

//IntLiteral returns IntLiteral:
//	{IntLiteral}
//	'IntLiteral'
//	'{'
//		('value' value=EInt)?
//	'}';

//DoubleLiteral returns DoubleLiteral:
//	{DoubleLiteral}
//	'DoubleLiteral'
//	'{'
//		('value' value=EDouble)?
//	'}';

DoubleLiteral returns DoubleLiteral:
	{DoubleLiteral}
	(value=EDouble)?;

//StringLiteral returns StringLiteral:
//	{StringLiteral}
//	'StringLiteral'
//	'{'
//		('value' value=EString)?
//	'}';

StringLiteral returns StringLiteral:
	{StringLiteral}
	(value=EString)?;

//BooleanLiteral returns BooleanLiteral:
//	{BooleanLiteral}
//	(value?='value')?
//	'BooleanLiteral'
//	;

BooleanLiteral returns BooleanLiteral:
	{BooleanLiteral}
	(value?='value')?;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

BinaryExpression returns BinaryExpression:
	'BinaryExpression'
	'{'
		('operator' operator=BinaryOperator)?
		'leftOperand' leftOperand=Expression
		'rightOperand' rightOperand=Expression
	'}';

enum BinaryOperator returns BinaryOperator:
				AND = 'AND' | OR = 'OR' | XOR = 'XOR' | EQUALS = 'EQUALS' | NOTEQUALS = 'NOTEQUALS' | GT = 'GT' | LT = 'LT' | GTEQ = 'GTEQ' | LTEQ = 'LTEQ';

ParameterIdentifier returns ParameterIdentifier:
	'ParameterIdentifier'
	'{'
		'parameter' parameter=[Parameter|EString]
	'}';
