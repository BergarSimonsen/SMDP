/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ConfiguratorModel";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleConfiguratorModel
entryRuleConfiguratorModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfiguratorModelRule()); }
	 iv_ruleConfiguratorModel=ruleConfiguratorModel 
	 { $current=$iv_ruleConfiguratorModel.current; } 
	 EOF 
;

// Rule ConfiguratorModel
ruleConfiguratorModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConfiguratorModelAccess().getConfiguratorModelAction_0(),
            $current);
    }
)	otherlv_1='ConfiguratorModel' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConfiguratorModelAccess().getConfiguratorModelKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConfiguratorModelAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='Name' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConfiguratorModelAccess().getNameKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorModelAccess().getNameEStringParserRuleCall_3_1_0()); 
	    }
		lv_Name_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
	        }
       		set(
       			$current, 
       			"Name",
        		lv_Name_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='parameters' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConfiguratorModelAccess().getParametersKeyword_4_0());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConfiguratorModelAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorModelAccess().getParametersParameterParserRuleCall_4_2_0()); 
	    }
		lv_parameters_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_7_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConfiguratorModelAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorModelAccess().getParametersParameterParserRuleCall_4_3_1_0()); 
	    }
		lv_parameters_9_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_9_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getConfiguratorModelAccess().getRightCurlyBracketKeyword_4_4());
    }
)?(	otherlv_11='constraints' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getConfiguratorModelAccess().getConstraintsKeyword_5_0());
    }
	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getConfiguratorModelAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorModelAccess().getConstraintsConstraintParserRuleCall_5_2_0()); 
	    }
		lv_constraints_13_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_13_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getConfiguratorModelAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorModelAccess().getConstraintsConstraintParserRuleCall_5_3_1_0()); 
	    }
		lv_constraints_15_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_15_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getConfiguratorModelAccess().getRightCurlyBracketKeyword_5_4());
    }
)?(	otherlv_17='categories' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getConfiguratorModelAccess().getCategoriesKeyword_6_0());
    }
	otherlv_18='{' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getConfiguratorModelAccess().getLeftCurlyBracketKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorModelAccess().getCategoriesParamCategoryParserRuleCall_6_2_0()); 
	    }
		lv_categories_19_0=ruleParamCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
	        }
       		add(
       			$current, 
       			"categories",
        		lv_categories_19_0, 
        		"ParamCategory");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getConfiguratorModelAccess().getCommaKeyword_6_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorModelAccess().getCategoriesParamCategoryParserRuleCall_6_3_1_0()); 
	    }
		lv_categories_21_0=ruleParamCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
	        }
       		add(
       			$current, 
       			"categories",
        		lv_categories_21_0, 
        		"ParamCategory");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_22='}' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getConfiguratorModelAccess().getRightCurlyBracketKeyword_6_4());
    }
)?	otherlv_23='}' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getConfiguratorModelAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getBinaryConstraintParserRuleCall_0()); 
    }
    this_BinaryConstraint_0=ruleBinaryConstraint
    { 
        $current = $this_BinaryConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getUnaryConstraintParserRuleCall_1()); 
    }
    this_UnaryConstraint_1=ruleUnaryConstraint
    { 
        $current = $this_UnaryConstraint_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getParameterIdentifierParserRuleCall_2()); 
    }
    this_ParameterIdentifier_2=ruleParameterIdentifier
    { 
        $current = $this_ParameterIdentifier_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_0()); 
    }
    this_SimpleType_0=ruleSimpleType
    { 
        $current = $this_SimpleType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getEnumParserRuleCall_1()); 
    }
    this_Enum_1=ruleEnum
    { 
        $current = $this_Enum_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_required_0_0=	'required' 
    {
        newLeafNode(lv_required_0_0, grammarAccess.getParameterAccess().getRequiredRequiredKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed($current, "required", true, "required");
	    }

)
)?	otherlv_1='Parameter' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getParameterKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='Name' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getNameKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_3_1_0()); 
	    }
		lv_Name_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"Name",
        		lv_Name_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='maxChosenValues' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getParameterAccess().getMaxChosenValuesKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getMaxChosenValuesEIntParserRuleCall_4_1_0()); 
	    }
		lv_maxChosenValues_6_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"maxChosenValues",
        		lv_maxChosenValues_6_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='paramType' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getParameterAccess().getParamTypeKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getParamTypeTypeParserRuleCall_6_0()); 
	    }
		lv_paramType_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"paramType",
        		lv_paramType_8_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getParameterAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleParamCategory
entryRuleParamCategory returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamCategoryRule()); }
	 iv_ruleParamCategory=ruleParamCategory 
	 { $current=$iv_ruleParamCategory.current; } 
	 EOF 
;

// Rule ParamCategory
ruleParamCategory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ParamCategory' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParamCategoryAccess().getParamCategoryKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamCategoryAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='Name' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParamCategoryAccess().getNameKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamCategoryAccess().getNameEStringParserRuleCall_2_1_0()); 
	    }
		lv_Name_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamCategoryRule());
	        }
       		set(
       			$current, 
       			"Name",
        		lv_Name_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='params' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParamCategoryAccess().getParamsKeyword_3());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getParamCategoryAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamCategoryAccess().getParamsParameterParserRuleCall_5_0()); 
	    }
		lv_params_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamCategoryRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getParamCategoryAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamCategoryAccess().getParamsParameterParserRuleCall_6_1_0()); 
	    }
		lv_params_8_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamCategoryRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_8_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getParamCategoryAccess().getRightCurlyBracketKeyword_7());
    }
	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getParamCategoryAccess().getRightCurlyBracketKeyword_8());
    }
)
;







// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleSimpleType
entryRuleSimpleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleTypeRule()); }
	 iv_ruleSimpleType=ruleSimpleType 
	 { $current=$iv_ruleSimpleType.current; } 
	 EOF 
;

// Rule SimpleType
ruleSimpleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleTypeAccess().getSimpleTypeAction_0(),
            $current);
    }
)	otherlv_1='SimpleType' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleTypeAccess().getSimpleTypeKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimpleTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='Name' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleTypeAccess().getNameKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTypeAccess().getNameTypeNameEnumRuleCall_3_1_0()); 
	    }
		lv_Name_4_0=ruleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
	        }
       		set(
       			$current, 
       			"Name",
        		lv_Name_4_0, 
        		"TypeName");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimpleTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	 iv_ruleEnum=ruleEnum 
	 { $current=$iv_ruleEnum.current; } 
	 EOF 
;

// Rule Enum
ruleEnum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumAccess().getEnumKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='values' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumAccess().getValuesKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getValuesValueParserRuleCall_4_0()); 
	    }
		lv_values_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEnumAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getValuesValueParserRuleCall_5_1_0()); 
	    }
		lv_values_6_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_6_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getValueAccess().getValueAction_0(),
            $current);
    }
)	otherlv_1='Value' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValueAccess().getValueKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBinaryConstraint
entryRuleBinaryConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryConstraintRule()); }
	 iv_ruleBinaryConstraint=ruleBinaryConstraint 
	 { $current=$iv_ruleBinaryConstraint.current; } 
	 EOF 
;

// Rule BinaryConstraint
ruleBinaryConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BinaryConstraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBinaryConstraintAccess().getBinaryConstraintKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBinaryConstraintAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='operator' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBinaryConstraintAccess().getOperatorKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryConstraintAccess().getOperatorBinaryOperatorEnumRuleCall_2_1_0()); 
	    }
		lv_operator_3_0=ruleBinaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryConstraintRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"BinaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='leftOperand' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBinaryConstraintAccess().getLeftOperandKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryConstraintAccess().getLeftOperandConstraintParserRuleCall_4_0()); 
	    }
		lv_leftOperand_5_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryConstraintRule());
	        }
       		set(
       			$current, 
       			"leftOperand",
        		lv_leftOperand_5_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='rightOperand' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBinaryConstraintAccess().getRightOperandKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryConstraintAccess().getRightOperandConstraintParserRuleCall_6_0()); 
	    }
		lv_rightOperand_7_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryConstraintRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_7_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBinaryConstraintAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleUnaryConstraint
entryRuleUnaryConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryConstraintRule()); }
	 iv_ruleUnaryConstraint=ruleUnaryConstraint 
	 { $current=$iv_ruleUnaryConstraint.current; } 
	 EOF 
;

// Rule UnaryConstraint
ruleUnaryConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='UnaryConstraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryConstraintAccess().getUnaryConstraintKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnaryConstraintAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='operator' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryConstraintAccess().getOperatorKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryConstraintAccess().getOperatorUnaryOperatorEnumRuleCall_2_1_0()); 
	    }
		lv_operator_3_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryConstraintRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='operand' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryConstraintAccess().getOperandKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryConstraintAccess().getOperandConstraintParserRuleCall_4_0()); 
	    }
		lv_operand_5_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryConstraintRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_5_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryConstraintAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleParameterIdentifier
entryRuleParameterIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterIdentifierRule()); }
	 iv_ruleParameterIdentifier=ruleParameterIdentifier 
	 { $current=$iv_ruleParameterIdentifier.current; } 
	 EOF 
;

// Rule ParameterIdentifier
ruleParameterIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ParameterIdentifier' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterIdentifierAccess().getParameterIdentifierKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterIdentifierAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='parameter' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterIdentifierAccess().getParameterKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterIdentifierRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getParameterIdentifierAccess().getParameterParameterCrossReference_3_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParameterIdentifierAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Rule TypeName
ruleTypeName returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='INT' 
	{
        $current = grammarAccess.getTypeNameAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeNameAccess().getINTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='BOOLEAN' 
	{
        $current = grammarAccess.getTypeNameAccess().getBOOLEANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeNameAccess().getBOOLEANEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='DOUBLE' 
	{
        $current = grammarAccess.getTypeNameAccess().getDOUBLEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTypeNameAccess().getDOUBLEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='STRING' 
	{
        $current = grammarAccess.getTypeNameAccess().getSTRINGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTypeNameAccess().getSTRINGEnumLiteralDeclaration_3()); 
    }
));



// Rule BinaryOperator
ruleBinaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='AND' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryOperatorAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='OR' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryOperatorAccess().getOREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='XOR' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getXOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBinaryOperatorAccess().getXOREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='EQUALS' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getEQUALSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBinaryOperatorAccess().getEQUALSEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='NOTEQUALS' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getNOTEQUALSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getBinaryOperatorAccess().getNOTEQUALSEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='GT' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getGTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getBinaryOperatorAccess().getGTEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='LT' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getLTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getBinaryOperatorAccess().getLTEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='GTEQ' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getGTEQEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getBinaryOperatorAccess().getGTEQEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='LTEQ' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getLTEQEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getBinaryOperatorAccess().getLTEQEnumLiteralDeclaration_8()); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='NOT' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration()); 
    }
);



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


