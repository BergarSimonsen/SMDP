/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConfiguratorModelsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConfiguratorModelsConfiguratorModelParserRuleCall_2_0 = (RuleCall)cConfiguratorModelsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConfiguratorModelsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConfiguratorModelsConfiguratorModelParserRuleCall_3_1_0 = (RuleCall)cConfiguratorModelsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	"Model" "{" configuratorModels+=ConfiguratorModel ("," configuratorModels+=ConfiguratorModel)* "}";
		public ParserRule getRule() { return rule; }

		//"Model" "{" configuratorModels+=ConfiguratorModel ("," configuratorModels+=ConfiguratorModel)* "}"
		public Group getGroup() { return cGroup; }

		//"Model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//configuratorModels+=ConfiguratorModel
		public Assignment getConfiguratorModelsAssignment_2() { return cConfiguratorModelsAssignment_2; }

		//ConfiguratorModel
		public RuleCall getConfiguratorModelsConfiguratorModelParserRuleCall_2_0() { return cConfiguratorModelsConfiguratorModelParserRuleCall_2_0; }

		//("," configuratorModels+=ConfiguratorModel)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//configuratorModels+=ConfiguratorModel
		public Assignment getConfiguratorModelsAssignment_3_1() { return cConfiguratorModelsAssignment_3_1; }

		//ConfiguratorModel
		public RuleCall getConfiguratorModelsConfiguratorModelParserRuleCall_3_1_0() { return cConfiguratorModelsConfiguratorModelParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringgParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParameterIdentifierParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Constraint:
		//	BinaryConstraint | Integer | Double | Stringg | Boolean | ParameterIdentifier;
		public ParserRule getRule() { return rule; }

		//BinaryConstraint | Integer | Double | Stringg | Boolean | ParameterIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryConstraint
		public RuleCall getBinaryConstraintParserRuleCall_0() { return cBinaryConstraintParserRuleCall_0; }

		//Integer
		public RuleCall getIntegerParserRuleCall_1() { return cIntegerParserRuleCall_1; }

		//Double
		public RuleCall getDoubleParserRuleCall_2() { return cDoubleParserRuleCall_2; }

		//Stringg
		public RuleCall getStringgParserRuleCall_3() { return cStringgParserRuleCall_3; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_4() { return cBooleanParserRuleCall_4; }

		//ParameterIdentifier
		public RuleCall getParameterIdentifierParserRuleCall_5() { return cParameterIdentifierParserRuleCall_5; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringgParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Type:
		//	Enum | Integer | Double | Stringg | Boolean;
		public ParserRule getRule() { return rule; }

		//Enum | Integer | Double | Stringg | Boolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//Enum
		public RuleCall getEnumParserRuleCall_0() { return cEnumParserRuleCall_0; }

		//Integer
		public RuleCall getIntegerParserRuleCall_1() { return cIntegerParserRuleCall_1; }

		//Double
		public RuleCall getDoubleParserRuleCall_2() { return cDoubleParserRuleCall_2; }

		//Stringg
		public RuleCall getStringgParserRuleCall_3() { return cStringgParserRuleCall_3; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_4() { return cBooleanParserRuleCall_4; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringgParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//	Integer | Double | Stringg | Boolean;
		public ParserRule getRule() { return rule; }

		//Integer | Double | Stringg | Boolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }

		//Double
		public RuleCall getDoubleParserRuleCall_1() { return cDoubleParserRuleCall_1; }

		//Stringg
		public RuleCall getStringgParserRuleCall_2() { return cStringgParserRuleCall_2; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_3() { return cBooleanParserRuleCall_3; }
	}

	public class ConfiguratorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfiguratorModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfiguratorModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfiguratorModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_4_2_0 = (RuleCall)cParametersAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParametersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_3_1_0 = (RuleCall)cParametersAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConstraintsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConstraintsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_2_0 = (RuleCall)cConstraintsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_3_1_0 = (RuleCall)cConstraintsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConfiguratorModel:
		//	{ConfiguratorModel} "ConfiguratorModel" name=EString "{" ("parameters" "{" parameters+=Parameter (","
		//	parameters+=Parameter)* "}")? ("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{ConfiguratorModel} "ConfiguratorModel" name=EString "{" ("parameters" "{" parameters+=Parameter (","
		//parameters+=Parameter)* "}")? ("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{ConfiguratorModel}
		public Action getConfiguratorModelAction_0() { return cConfiguratorModelAction_0; }

		//"ConfiguratorModel"
		public Keyword getConfiguratorModelKeyword_1() { return cConfiguratorModelKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("parameters" "{" parameters+=Parameter ("," parameters+=Parameter)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"parameters"
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_2() { return cParametersAssignment_4_2; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_2_0() { return cParametersParameterParserRuleCall_4_2_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_3_1() { return cParametersAssignment_4_3_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_3_1_0() { return cParametersParameterParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"constraints"
		public Keyword getConstraintsKeyword_5_0() { return cConstraintsKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_5_2() { return cConstraintsAssignment_5_2; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_2_0() { return cConstraintsConstraintParserRuleCall_5_2_0; }

		//("," constraints+=Constraint)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_5_3_1() { return cConstraintsAssignment_5_3_1; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_3_1_0() { return cConstraintsConstraintParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMinChosenValuesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMinChosenValuesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMinChosenValuesEIntParserRuleCall_3_2_0 = (RuleCall)cMinChosenValuesAssignment_3_2.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMaxChosenValuesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cMaxChosenValuesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cMaxChosenValuesEIntParserRuleCall_5_2_0 = (RuleCall)cMaxChosenValuesAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypeTypeParserRuleCall_8_0 = (RuleCall)cTypeAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cChildrenAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cChildrenParameterParserRuleCall_9_1_0 = (RuleCall)cChildrenAssignment_9_1.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cCommaKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cChildrenAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cChildrenParameterParserRuleCall_9_2_1_0 = (RuleCall)cChildrenAssignment_9_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		
		//Parameter:
		//	"Parameter" name=EString "(" ("minChosenValues" ":" minChosenValues=EInt) "," ("maxChosenValues" ":"
		//	maxChosenValues=EInt) ")" ":" type=Type ("{" children+=Parameter ("," children+=Parameter)* "}")?;
		public ParserRule getRule() { return rule; }

		//"Parameter" name=EString "(" ("minChosenValues" ":" minChosenValues=EInt) "," ("maxChosenValues" ":"
		//maxChosenValues=EInt) ")" ":" type=Type ("{" children+=Parameter ("," children+=Parameter)* "}")?
		public Group getGroup() { return cGroup; }

		//"Parameter"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//"minChosenValues" ":" minChosenValues=EInt
		public Group getGroup_3() { return cGroup_3; }

		//"minChosenValues"
		public Keyword getMinChosenValuesKeyword_3_0() { return cMinChosenValuesKeyword_3_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//minChosenValues=EInt
		public Assignment getMinChosenValuesAssignment_3_2() { return cMinChosenValuesAssignment_3_2; }

		//EInt
		public RuleCall getMinChosenValuesEIntParserRuleCall_3_2_0() { return cMinChosenValuesEIntParserRuleCall_3_2_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"maxChosenValues" ":" maxChosenValues=EInt
		public Group getGroup_5() { return cGroup_5; }

		//"maxChosenValues"
		public Keyword getMaxChosenValuesKeyword_5_0() { return cMaxChosenValuesKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//maxChosenValues=EInt
		public Assignment getMaxChosenValuesAssignment_5_2() { return cMaxChosenValuesAssignment_5_2; }

		//EInt
		public RuleCall getMaxChosenValuesEIntParserRuleCall_5_2_0() { return cMaxChosenValuesEIntParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//type=Type
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_8_0() { return cTypeTypeParserRuleCall_8_0; }

		//("{" children+=Parameter ("," children+=Parameter)* "}")?
		public Group getGroup_9() { return cGroup_9; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_0() { return cLeftCurlyBracketKeyword_9_0; }

		//children+=Parameter
		public Assignment getChildrenAssignment_9_1() { return cChildrenAssignment_9_1; }

		//Parameter
		public RuleCall getChildrenParameterParserRuleCall_9_1_0() { return cChildrenParameterParserRuleCall_9_1_0; }

		//("," children+=Parameter)*
		public Group getGroup_9_2() { return cGroup_9_2; }

		//","
		public Keyword getCommaKeyword_9_2_0() { return cCommaKeyword_9_2_0; }

		//children+=Parameter
		public Assignment getChildrenAssignment_9_2_1() { return cChildrenAssignment_9_2_1; }

		//Parameter
		public RuleCall getChildrenParameterParserRuleCall_9_2_1_0() { return cChildrenParameterParserRuleCall_9_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_3() { return cRightCurlyBracketKeyword_9_3; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesLiteralParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesLiteralParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Enum:
		//	"[" values+=Literal ("," values+=Literal)* "]";
		public ParserRule getRule() { return rule; }

		//"[" values+=Literal ("," values+=Literal)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values+=Literal
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//Literal
		public RuleCall getValuesLiteralParserRuleCall_1_0() { return cValuesLiteralParserRuleCall_1_0; }

		//("," values+=Literal)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=Literal
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//Literal
		public RuleCall getValuesLiteralParserRuleCall_2_1_0() { return cValuesLiteralParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntegerAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Integer:
		//	{Integer} "int" | value=EInt;
		public ParserRule getRule() { return rule; }

		//{Integer} "int" | value=EInt
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Integer} "int"
		public Group getGroup_0() { return cGroup_0; }

		//{Integer}
		public Action getIntegerAction_0_0() { return cIntegerAction_0_0; }

		//"int"
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }

		//value=EInt
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//EInt
		public RuleCall getValueEIntParserRuleCall_1_0() { return cValueEIntParserRuleCall_1_0; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDoubleAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDoubleKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Double:
		//	{Double} "double" | value=EDouble;
		public ParserRule getRule() { return rule; }

		//{Double} "double" | value=EDouble
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Double} "double"
		public Group getGroup_0() { return cGroup_0; }

		//{Double}
		public Action getDoubleAction_0_0() { return cDoubleAction_0_0; }

		//"double"
		public Keyword getDoubleKeyword_0_1() { return cDoubleKeyword_0_1; }

		//value=EDouble
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
	}

	public class StringgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stringg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringgAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStringKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cStringKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//Stringg:
		//	{Stringg} "String" | "String." value=EString;
		public ParserRule getRule() { return rule; }

		//{Stringg} "String" | "String." value=EString
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Stringg} "String"
		public Group getGroup_0() { return cGroup_0; }

		//{Stringg}
		public Action getStringgAction_0_0() { return cStringgAction_0_0; }

		//"String"
		public Keyword getStringKeyword_0_1() { return cStringKeyword_0_1; }

		//"String." value=EString
		public Group getGroup_1() { return cGroup_1; }

		//"String."
		public Keyword getStringKeyword_1_0() { return cStringKeyword_1_0; }

		//value=EString
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//EString
		public RuleCall getValueEStringParserRuleCall_1_1_0() { return cValueEStringParserRuleCall_1_1_0; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBooleanKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Boolean:
		//	{Boolean} "boolean" | value=EBoolean;
		public ParserRule getRule() { return rule; }

		//{Boolean} "boolean" | value=EBoolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Boolean} "boolean"
		public Group getGroup_0() { return cGroup_0; }

		//{Boolean}
		public Action getBooleanAction_0_0() { return cBooleanAction_0_0; }

		//"boolean"
		public Keyword getBooleanKeyword_0_1() { return cBooleanKeyword_0_1; }

		//value=EBoolean
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_1_0() { return cValueEBooleanParserRuleCall_1_0; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT? "." INT (("E" | "e") "-"? INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"E" | "e"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"E"
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }

		//"e"
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class BinaryConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandConstraintParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorBinaryOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandConstraintParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BinaryConstraint:
		//	"(" leftOperand=Constraint operator=BinaryOperator rightOperand=Constraint ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=Constraint operator=BinaryOperator rightOperand=Constraint ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=Constraint
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//Constraint
		public RuleCall getLeftOperandConstraintParserRuleCall_1_0() { return cLeftOperandConstraintParserRuleCall_1_0; }

		//operator=BinaryOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//BinaryOperator
		public RuleCall getOperatorBinaryOperatorEnumRuleCall_2_0() { return cOperatorBinaryOperatorEnumRuleCall_2_0; }

		//rightOperand=Constraint
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//Constraint
		public RuleCall getRightOperandConstraintParserRuleCall_3_0() { return cRightOperandConstraintParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParameterIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterIdentifier");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_0 = (CrossReference)cParameterAssignment.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_1 = (RuleCall)cParameterParameterCrossReference_0.eContents().get(1);
		
		//ParameterIdentifier:
		//	parameter=[Parameter];
		public ParserRule getRule() { return rule; }

		//parameter=[Parameter]
		public Assignment getParameterAssignment() { return cParameterAssignment; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_0() { return cParameterParameterCrossReference_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_1() { return cParameterParameterIDTerminalRuleCall_0_1; }
	}
	
	
	public class BinaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXORExclamationMarkVerticalLineVerticalLineKeyword_2_0 = (Keyword)cXOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEQUALSEqualsSignEqualsSignKeyword_3_0 = (Keyword)cEQUALSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQUALSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNOTEQUALSExclamationMarkEqualsSignKeyword_4_0 = (Keyword)cNOTEQUALSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGTGreaterThanSignKeyword_5_0 = (Keyword)cGTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLTLessThanSignKeyword_6_0 = (Keyword)cLTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cGTEQEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cGTEQGreaterThanSignEqualsSignKeyword_7_0 = (Keyword)cGTEQEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cLTEQEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cLTEQLessThanSignEqualsSignKeyword_8_0 = (Keyword)cLTEQEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum BinaryOperator:
		//	AND="&&" | OR="||" | XOR="!||" | EQUALS="==" | NOTEQUALS="!=" | GT=">" | LT="<" | GTEQ=">=" | LTEQ="<=";
		public EnumRule getRule() { return rule; }

		//AND="&&" | OR="||" | XOR="!||" | EQUALS="==" | NOTEQUALS="!=" | GT=">" | LT="<" | GTEQ=">=" | LTEQ="<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND="&&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//"&&"
		public Keyword getANDAmpersandAmpersandKeyword_0_0() { return cANDAmpersandAmpersandKeyword_0_0; }

		//OR="||"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }

		//"||"
		public Keyword getORVerticalLineVerticalLineKeyword_1_0() { return cORVerticalLineVerticalLineKeyword_1_0; }

		//XOR="!||"
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_2() { return cXOREnumLiteralDeclaration_2; }

		//"!||"
		public Keyword getXORExclamationMarkVerticalLineVerticalLineKeyword_2_0() { return cXORExclamationMarkVerticalLineVerticalLineKeyword_2_0; }

		//EQUALS="=="
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_3() { return cEQUALSEnumLiteralDeclaration_3; }

		//"=="
		public Keyword getEQUALSEqualsSignEqualsSignKeyword_3_0() { return cEQUALSEqualsSignEqualsSignKeyword_3_0; }

		//NOTEQUALS="!="
		public EnumLiteralDeclaration getNOTEQUALSEnumLiteralDeclaration_4() { return cNOTEQUALSEnumLiteralDeclaration_4; }

		//"!="
		public Keyword getNOTEQUALSExclamationMarkEqualsSignKeyword_4_0() { return cNOTEQUALSExclamationMarkEqualsSignKeyword_4_0; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_5() { return cGTEnumLiteralDeclaration_5; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_5_0() { return cGTGreaterThanSignKeyword_5_0; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_6() { return cLTEnumLiteralDeclaration_6; }

		//"<"
		public Keyword getLTLessThanSignKeyword_6_0() { return cLTLessThanSignKeyword_6_0; }

		//GTEQ=">="
		public EnumLiteralDeclaration getGTEQEnumLiteralDeclaration_7() { return cGTEQEnumLiteralDeclaration_7; }

		//">="
		public Keyword getGTEQGreaterThanSignEqualsSignKeyword_7_0() { return cGTEQGreaterThanSignEqualsSignKeyword_7_0; }

		//LTEQ="<="
		public EnumLiteralDeclaration getLTEQEnumLiteralDeclaration_8() { return cLTEQEnumLiteralDeclaration_8; }

		//"<="
		public Keyword getLTEQLessThanSignEqualsSignKeyword_8_0() { return cLTEQLessThanSignEqualsSignKeyword_8_0; }
	}
	
	private ModelElements pModel;
	private ConstraintElements pConstraint;
	private TypeElements pType;
	private LiteralElements pLiteral;
	private ConfiguratorModelElements pConfiguratorModel;
	private EStringElements pEString;
	private ParameterElements pParameter;
	private EIntElements pEInt;
	private EnumElements pEnum;
	private IntegerElements pInteger;
	private DoubleElements pDouble;
	private StringgElements pStringg;
	private BooleanElements pBoolean;
	private EDoubleElements pEDouble;
	private EBooleanElements pEBoolean;
	private BinaryConstraintElements pBinaryConstraint;
	private ParameterIdentifierElements pParameterIdentifier;
	private BinaryOperatorElements unknownRuleBinaryOperator;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"Model" "{" configuratorModels+=ConfiguratorModel ("," configuratorModels+=ConfiguratorModel)* "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Constraint:
	//	BinaryConstraint | Integer | Double | Stringg | Boolean | ParameterIdentifier;
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//Type:
	//	Enum | Integer | Double | Stringg | Boolean;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Literal:
	//	Integer | Double | Stringg | Boolean;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//ConfiguratorModel:
	//	{ConfiguratorModel} "ConfiguratorModel" name=EString "{" ("parameters" "{" parameters+=Parameter (","
	//	parameters+=Parameter)* "}")? ("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")? "}";
	public ConfiguratorModelElements getConfiguratorModelAccess() {
		return (pConfiguratorModel != null) ? pConfiguratorModel : (pConfiguratorModel = new ConfiguratorModelElements());
	}
	
	public ParserRule getConfiguratorModelRule() {
		return getConfiguratorModelAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Parameter:
	//	"Parameter" name=EString "(" ("minChosenValues" ":" minChosenValues=EInt) "," ("maxChosenValues" ":"
	//	maxChosenValues=EInt) ")" ":" type=Type ("{" children+=Parameter ("," children+=Parameter)* "}")?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//Enum:
	//	"[" values+=Literal ("," values+=Literal)* "]";
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//Integer:
	//	{Integer} "int" | value=EInt;
	public IntegerElements getIntegerAccess() {
		return (pInteger != null) ? pInteger : (pInteger = new IntegerElements());
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Double:
	//	{Double} "double" | value=EDouble;
	public DoubleElements getDoubleAccess() {
		return (pDouble != null) ? pDouble : (pDouble = new DoubleElements());
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//Stringg:
	//	{Stringg} "String" | "String." value=EString;
	public StringgElements getStringgAccess() {
		return (pStringg != null) ? pStringg : (pStringg = new StringgElements());
	}
	
	public ParserRule getStringgRule() {
		return getStringgAccess().getRule();
	}

	//Boolean:
	//	{Boolean} "boolean" | value=EBoolean;
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//BinaryConstraint:
	//	"(" leftOperand=Constraint operator=BinaryOperator rightOperand=Constraint ")";
	public BinaryConstraintElements getBinaryConstraintAccess() {
		return (pBinaryConstraint != null) ? pBinaryConstraint : (pBinaryConstraint = new BinaryConstraintElements());
	}
	
	public ParserRule getBinaryConstraintRule() {
		return getBinaryConstraintAccess().getRule();
	}

	//ParameterIdentifier:
	//	parameter=[Parameter];
	public ParameterIdentifierElements getParameterIdentifierAccess() {
		return (pParameterIdentifier != null) ? pParameterIdentifier : (pParameterIdentifier = new ParameterIdentifierElements());
	}
	
	public ParserRule getParameterIdentifierRule() {
		return getParameterIdentifierAccess().getRule();
	}

	//enum BinaryOperator:
	//	AND="&&" | OR="||" | XOR="!||" | EQUALS="==" | NOTEQUALS="!=" | GT=">" | LT="<" | GTEQ=">=" | LTEQ="<=";
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return (unknownRuleBinaryOperator != null) ? unknownRuleBinaryOperator : (unknownRuleBinaryOperator = new BinaryOperatorElements());
	}
	
	public EnumRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
