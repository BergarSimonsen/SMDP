/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ConfiguratorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfiguratorModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfiguratorModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfiguratorModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEnumsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cEnumsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEnumsEnumParserRuleCall_4_2_0 = (RuleCall)cEnumsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cEnumsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cEnumsEnumParserRuleCall_4_3_1_0 = (RuleCall)cEnumsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cParametersKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_5_2 = (Alternatives)cGroup_5.eContents().get(2);
		private final Assignment cParametersAssignment_5_2_0 = (Assignment)cAlternatives_5_2.eContents().get(0);
		private final RuleCall cParametersParameter2ParserRuleCall_5_2_0_0 = (RuleCall)cParametersAssignment_5_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_5_2_1 = (Assignment)cAlternatives_5_2.eContents().get(1);
		private final RuleCall cParametersParameter3ParserRuleCall_5_2_1_0 = (RuleCall)cParametersAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Alternatives cAlternatives_5_3_1 = (Alternatives)cGroup_5_3.eContents().get(1);
		private final Assignment cParametersAssignment_5_3_1_0 = (Assignment)cAlternatives_5_3_1.eContents().get(0);
		private final RuleCall cParametersParameter2ParserRuleCall_5_3_1_0_0 = (RuleCall)cParametersAssignment_5_3_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_5_3_1_1 = (Assignment)cAlternatives_5_3_1.eContents().get(1);
		private final RuleCall cParametersParameter3ParserRuleCall_5_3_1_1_0 = (RuleCall)cParametersAssignment_5_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cConstraintsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cConstraintsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cConstraintsConstraintParserRuleCall_6_2_0 = (RuleCall)cConstraintsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_6_3_1_0 = (RuleCall)cConstraintsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ConfiguratorModel:
		//	{ConfiguratorModel} "ConfiguratorModel" name=EString "{" ("enums" "{" enums+=Enum ("," enums+=Enum)* "}")?
		//	("parameters" "{" (parameters+=Parameter2 | parameters+=Parameter3) ("," (parameters+=Parameter2 |
		//	parameters+=Parameter3))* "}")? ("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{ConfiguratorModel} "ConfiguratorModel" name=EString "{" ("enums" "{" enums+=Enum ("," enums+=Enum)* "}")? ("parameters"
		//"{" (parameters+=Parameter2 | parameters+=Parameter3) ("," (parameters+=Parameter2 | parameters+=Parameter3))* "}")?
		//("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{ConfiguratorModel}
		public Action getConfiguratorModelAction_0() { return cConfiguratorModelAction_0; }

		//"ConfiguratorModel"
		public Keyword getConfiguratorModelKeyword_1() { return cConfiguratorModelKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("enums" "{" enums+=Enum ("," enums+=Enum)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"enums"
		public Keyword getEnumsKeyword_4_0() { return cEnumsKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//enums+=Enum
		public Assignment getEnumsAssignment_4_2() { return cEnumsAssignment_4_2; }

		//Enum
		public RuleCall getEnumsEnumParserRuleCall_4_2_0() { return cEnumsEnumParserRuleCall_4_2_0; }

		//("," enums+=Enum)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//enums+=Enum
		public Assignment getEnumsAssignment_4_3_1() { return cEnumsAssignment_4_3_1; }

		//Enum
		public RuleCall getEnumsEnumParserRuleCall_4_3_1_0() { return cEnumsEnumParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//("parameters" "{" (parameters+=Parameter2 | parameters+=Parameter3) ("," (parameters+=Parameter2 |
		//parameters+=Parameter3))* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"parameters"
		public Keyword getParametersKeyword_5_0() { return cParametersKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//parameters+=Parameter2 | parameters+=Parameter3
		public Alternatives getAlternatives_5_2() { return cAlternatives_5_2; }

		//parameters+=Parameter2
		public Assignment getParametersAssignment_5_2_0() { return cParametersAssignment_5_2_0; }

		//Parameter2
		public RuleCall getParametersParameter2ParserRuleCall_5_2_0_0() { return cParametersParameter2ParserRuleCall_5_2_0_0; }

		//parameters+=Parameter3
		public Assignment getParametersAssignment_5_2_1() { return cParametersAssignment_5_2_1; }

		//Parameter3
		public RuleCall getParametersParameter3ParserRuleCall_5_2_1_0() { return cParametersParameter3ParserRuleCall_5_2_1_0; }

		//("," (parameters+=Parameter2 | parameters+=Parameter3))*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//parameters+=Parameter2 | parameters+=Parameter3
		public Alternatives getAlternatives_5_3_1() { return cAlternatives_5_3_1; }

		//parameters+=Parameter2
		public Assignment getParametersAssignment_5_3_1_0() { return cParametersAssignment_5_3_1_0; }

		//Parameter2
		public RuleCall getParametersParameter2ParserRuleCall_5_3_1_0_0() { return cParametersParameter2ParserRuleCall_5_3_1_0_0; }

		//parameters+=Parameter3
		public Assignment getParametersAssignment_5_3_1_1() { return cParametersAssignment_5_3_1_1; }

		//Parameter3
		public RuleCall getParametersParameter3ParserRuleCall_5_3_1_1_0() { return cParametersParameter3ParserRuleCall_5_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"constraints"
		public Keyword getConstraintsKeyword_6_0() { return cConstraintsKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_6_2() { return cConstraintsAssignment_6_2; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_6_2_0() { return cConstraintsConstraintParserRuleCall_6_2_0; }

		//("," constraints+=Constraint)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_6_3_1() { return cConstraintsAssignment_6_3_1; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_6_3_1_0() { return cConstraintsConstraintParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//	IntLiteral | DoubleLiteral | StringLiteral | BooleanLiteral;
		public ParserRule getRule() { return rule; }

		//IntLiteral | DoubleLiteral | StringLiteral | BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }

		//DoubleLiteral
		public RuleCall getDoubleLiteralParserRuleCall_1() { return cDoubleLiteralParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParameterIdentifierParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression:
		//	BinaryExpression | IntLiteral | DoubleLiteral | StringLiteral | BooleanLiteral | ParameterIdentifier;
		public ParserRule getRule() { return rule; }

		//BinaryExpression | IntLiteral | DoubleLiteral | StringLiteral | BooleanLiteral | ParameterIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall_0() { return cBinaryExpressionParserRuleCall_0; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() { return cIntLiteralParserRuleCall_1; }

		//DoubleLiteral
		public RuleCall getDoubleLiteralParserRuleCall_2() { return cDoubleLiteralParserRuleCall_2; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_4() { return cBooleanLiteralParserRuleCall_4; }

		//ParameterIdentifier
		public RuleCall getParameterIdentifierParserRuleCall_5() { return cParameterIdentifierParserRuleCall_5; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class Parameter2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMaxChosenValuesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cMaxChosenValuesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMaxChosenValuesEIntParserRuleCall_4_2_0 = (RuleCall)cMaxChosenValuesAssignment_4_2.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMinChosenValuesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMinChosenValuesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMinChosenValuesEIntParserRuleCall_6_2_0 = (RuleCall)cMinChosenValuesAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cEnumKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cColonKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cEnumAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final CrossReference cEnumEnumCrossReference_7_3_0 = (CrossReference)cEnumAssignment_7_3.eContents().get(0);
		private final RuleCall cEnumEnumEStringParserRuleCall_7_3_0_1 = (RuleCall)cEnumEnumCrossReference_7_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////Parameter returns Parameter:
		////	{Parameter}
		////	'Parameter'
		////	name=EString
		////	'{'
		////		('maxChosenValues' ':' maxChosenValues=EInt)?
		////		('minChosenValues' minChosenValues=EInt)?
		////		('enum' ^enum=[Enum|EString])?
		////		('children' '(' children+=[Parameter|EString] ( "," children+=[Parameter|EString])* ')' )?
		////		('enumValues' '(' enumValues+=[Value|EString] ( "," enumValues+=[Value|EString])* ')' )?
		////		('literalValues' '{' literalValues+=Value ( "," literalValues+=Value)* '}' )?
		////	'}';
		//Parameter2 returns Parameter:
		//	{Parameter} "Parameter" name=EString "(" ("maxChosenValues" ":" maxChosenValues=EInt) "," ("minChosenValues" ":"
		//	minChosenValues=EInt) ("," "enum" ":" ^enum=[Enum|EString])? ")";
		public ParserRule getRule() { return rule; }

		//{Parameter} "Parameter" name=EString "(" ("maxChosenValues" ":" maxChosenValues=EInt) "," ("minChosenValues" ":"
		//minChosenValues=EInt) ("," "enum" ":" ^enum=[Enum|EString])? ")"
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//"Parameter"
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//"maxChosenValues" ":" maxChosenValues=EInt
		public Group getGroup_4() { return cGroup_4; }

		//"maxChosenValues"
		public Keyword getMaxChosenValuesKeyword_4_0() { return cMaxChosenValuesKeyword_4_0; }

		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }

		//maxChosenValues=EInt
		public Assignment getMaxChosenValuesAssignment_4_2() { return cMaxChosenValuesAssignment_4_2; }

		//EInt
		public RuleCall getMaxChosenValuesEIntParserRuleCall_4_2_0() { return cMaxChosenValuesEIntParserRuleCall_4_2_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"minChosenValues" ":" minChosenValues=EInt
		public Group getGroup_6() { return cGroup_6; }

		//"minChosenValues"
		public Keyword getMinChosenValuesKeyword_6_0() { return cMinChosenValuesKeyword_6_0; }

		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//minChosenValues=EInt
		public Assignment getMinChosenValuesAssignment_6_2() { return cMinChosenValuesAssignment_6_2; }

		//EInt
		public RuleCall getMinChosenValuesEIntParserRuleCall_6_2_0() { return cMinChosenValuesEIntParserRuleCall_6_2_0; }

		//("," "enum" ":" ^enum=[Enum|EString])?
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//"enum"
		public Keyword getEnumKeyword_7_1() { return cEnumKeyword_7_1; }

		//":"
		public Keyword getColonKeyword_7_2() { return cColonKeyword_7_2; }

		//^enum=[Enum|EString]
		public Assignment getEnumAssignment_7_3() { return cEnumAssignment_7_3; }

		//[Enum|EString]
		public CrossReference getEnumEnumCrossReference_7_3_0() { return cEnumEnumCrossReference_7_3_0; }

		//EString
		public RuleCall getEnumEnumEStringParserRuleCall_7_3_0_1() { return cEnumEnumEStringParserRuleCall_7_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class Parameter3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cChildrenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cChildrenAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cChildrenParameterCrossReference_4_3_0 = (CrossReference)cChildrenAssignment_4_3.eContents().get(0);
		private final RuleCall cChildrenParameterEStringParserRuleCall_4_3_0_1 = (RuleCall)cChildrenParameterCrossReference_4_3_0.eContents().get(1);
		private final Group cGroup_4_4 = (Group)cGroup_4.eContents().get(4);
		private final Keyword cCommaKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final CrossReference cChildrenParameterCrossReference_4_4_1_0 = (CrossReference)cChildrenAssignment_4_4_1.eContents().get(0);
		private final RuleCall cChildrenParameterEStringParserRuleCall_4_4_1_0_1 = (RuleCall)cChildrenParameterCrossReference_4_4_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Parameter3 returns Parameter:
		//	{Parameter} "Parameter" name=EString "(" ("children" ":" "[" children+=[Parameter|EString] (","
		//	children+=[Parameter|EString])* "]") ")";
		public ParserRule getRule() { return rule; }

		//{Parameter} "Parameter" name=EString "(" ("children" ":" "[" children+=[Parameter|EString] (","
		//children+=[Parameter|EString])* "]") ")"
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//"Parameter"
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//"children" ":" "[" children+=[Parameter|EString] ("," children+=[Parameter|EString])* "]"
		public Group getGroup_4() { return cGroup_4; }

		//"children"
		public Keyword getChildrenKeyword_4_0() { return cChildrenKeyword_4_0; }

		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_2() { return cLeftSquareBracketKeyword_4_2; }

		//children+=[Parameter|EString]
		public Assignment getChildrenAssignment_4_3() { return cChildrenAssignment_4_3; }

		//[Parameter|EString]
		public CrossReference getChildrenParameterCrossReference_4_3_0() { return cChildrenParameterCrossReference_4_3_0; }

		//EString
		public RuleCall getChildrenParameterEStringParserRuleCall_4_3_0_1() { return cChildrenParameterEStringParserRuleCall_4_3_0_1; }

		//("," children+=[Parameter|EString])*
		public Group getGroup_4_4() { return cGroup_4_4; }

		//","
		public Keyword getCommaKeyword_4_4_0() { return cCommaKeyword_4_4_0; }

		//children+=[Parameter|EString]
		public Assignment getChildrenAssignment_4_4_1() { return cChildrenAssignment_4_4_1; }

		//[Parameter|EString]
		public CrossReference getChildrenParameterCrossReference_4_4_1_0() { return cChildrenParameterCrossReference_4_4_1_0; }

		//EString
		public RuleCall getChildrenParameterEStringParserRuleCall_4_4_1_0_1() { return cChildrenParameterEStringParserRuleCall_4_4_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_5() { return cRightSquareBracketKeyword_4_5; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIfAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIfBinaryExpressionParserRuleCall_1_1_0 = (RuleCall)cIfAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cThenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cThenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cThenBinaryExpressionParserRuleCall_2_1_0 = (RuleCall)cThenAssignment_2_1.eContents().get(0);
		
		////Constraint returns Constraint:
		////	{Constraint}
		////	'Constraint'
		////	'{'
		////		('if' if=BinaryExpression)?
		////		('then' then=BinaryExpression)?
		////	'}';
		//Constraint:
		//	{Constraint} ("if" if=BinaryExpression) ("then" then=BinaryExpression);
		public ParserRule getRule() { return rule; }

		//{Constraint} ("if" if=BinaryExpression) ("then" then=BinaryExpression)
		public Group getGroup() { return cGroup; }

		//{Constraint}
		public Action getConstraintAction_0() { return cConstraintAction_0; }

		//"if" if=BinaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//"if"
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }

		//if=BinaryExpression
		public Assignment getIfAssignment_1_1() { return cIfAssignment_1_1; }

		//BinaryExpression
		public RuleCall getIfBinaryExpressionParserRuleCall_1_1_0() { return cIfBinaryExpressionParserRuleCall_1_1_0; }

		//"then" then=BinaryExpression
		public Group getGroup_2() { return cGroup_2; }

		//"then"
		public Keyword getThenKeyword_2_0() { return cThenKeyword_2_0; }

		//then=BinaryExpression
		public Assignment getThenAssignment_2_1() { return cThenAssignment_2_1; }

		//BinaryExpression
		public RuleCall getThenBinaryExpressionParserRuleCall_2_1_0() { return cThenBinaryExpressionParserRuleCall_2_1_0; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Enum returns Enum:
		////	'Enum'
		////	name=EString
		////	'{'
		////		'values' '{' values+=Value ( "," values+=Value)* '}' 
		////	'}';
		//Enum:
		//	"Enum" name=EString ":" values+=Value ("," values+=Value)* ";";
		public ParserRule getRule() { return rule; }

		//"Enum" name=EString ":" values+=Value ("," values+=Value)* ";"
		public Group getGroup() { return cGroup; }

		//"Enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//values+=Value
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//Value
		public RuleCall getValuesValueParserRuleCall_3_0() { return cValuesValueParserRuleCall_3_0; }

		//("," values+=Value)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//values+=Value
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }

		//Value
		public RuleCall getValuesValueParserRuleCall_4_1_0() { return cValuesValueParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntLiteral:
		//	{IntLiteral} value=EInt?;
		public ParserRule getRule() { return rule; }

		//{IntLiteral} value=EInt?
		public Group getGroup() { return cGroup; }

		//{IntLiteral}
		public Action getIntLiteralAction_0() { return cIntLiteralAction_0; }

		//value=EInt?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//EInt
		public RuleCall getValueEIntParserRuleCall_1_0() { return cValueEIntParserRuleCall_1_0; }
	}

	public class DoubleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		////IntLiteral returns IntLiteral:
		////	{IntLiteral}
		////	'IntLiteral'
		////	'{'
		////		('value' value=EInt)?
		////	'}';
		////DoubleLiteral returns DoubleLiteral:
		////	{DoubleLiteral}
		////	'DoubleLiteral'
		////	'{'
		////		('value' value=EDouble)?
		////	'}';
		//DoubleLiteral:
		//	{DoubleLiteral} value=EDouble?;
		public ParserRule getRule() { return rule; }

		//{DoubleLiteral} value=EDouble?
		public Group getGroup() { return cGroup; }

		//{DoubleLiteral}
		public Action getDoubleLiteralAction_0() { return cDoubleLiteralAction_0; }

		//value=EDouble?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		////StringLiteral returns StringLiteral:
		////	{StringLiteral}
		////	'StringLiteral'
		////	'{'
		////		('value' value=EString)?
		////	'}';
		//StringLiteral:
		//	{StringLiteral} value=EString?;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} value=EString?
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//value=EString?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//EString
		public RuleCall getValueEStringParserRuleCall_1_0() { return cValueEStringParserRuleCall_1_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValueValueKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		////BooleanLiteral returns BooleanLiteral:
		////	{BooleanLiteral}
		////	(value?='value')?
		////	'BooleanLiteral'
		////	;
		//BooleanLiteral:
		//	{BooleanLiteral} value?="value"?;
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} value?="value"?
		public Group getGroup() { return cGroup; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }

		//value?="value"?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"value"
		public Keyword getValueValueKeyword_1_0() { return cValueValueKeyword_1_0; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT? "." INT (("E" | "e") "-"? INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"E" | "e"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"E"
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }

		//"e"
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandExpressionParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorBinaryOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandExpressionParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////BinaryExpression returns BinaryExpression:
		////	'BinaryExpression'
		////	'{'
		////		('operator' operator=BinaryOperator)?
		////		'leftOperand' leftOperand=Expression
		////		'rightOperand' rightOperand=Expression
		////	'}';	
		//BinaryExpression:
		//	"(" leftOperand=Expression operator=BinaryOperator rightOperand=Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=Expression operator=BinaryOperator rightOperand=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=Expression
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//Expression
		public RuleCall getLeftOperandExpressionParserRuleCall_1_0() { return cLeftOperandExpressionParserRuleCall_1_0; }

		//operator=BinaryOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//BinaryOperator
		public RuleCall getOperatorBinaryOperatorEnumRuleCall_2_0() { return cOperatorBinaryOperatorEnumRuleCall_2_0; }

		//rightOperand=Expression
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//Expression
		public RuleCall getRightOperandExpressionParserRuleCall_3_0() { return cRightOperandExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParameterIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_1_0 = (CrossReference)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterParameterEStringParserRuleCall_1_0_1 = (RuleCall)cParameterParameterCrossReference_1_0.eContents().get(1);
		
		//ParameterIdentifier:
		//	"ID" parameter=[Parameter|EString];
		public ParserRule getRule() { return rule; }

		//"ID" parameter=[Parameter|EString]
		public Group getGroup() { return cGroup; }

		//"ID"
		public Keyword getIDKeyword_0() { return cIDKeyword_0; }

		//parameter=[Parameter|EString]
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//[Parameter|EString]
		public CrossReference getParameterParameterCrossReference_1_0() { return cParameterParameterCrossReference_1_0; }

		//EString
		public RuleCall getParameterParameterEStringParserRuleCall_1_0_1() { return cParameterParameterEStringParserRuleCall_1_0_1; }
	}
	
	
	public class BinaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXORExclamationMarkVerticalLineVerticalLineKeyword_2_0 = (Keyword)cXOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEQUALSEqualsSignEqualsSignKeyword_3_0 = (Keyword)cEQUALSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQUALSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNOTEQUALSExclamationMarkEqualsSignKeyword_4_0 = (Keyword)cNOTEQUALSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGTGreaterThanSignKeyword_5_0 = (Keyword)cGTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLTLessThanSignKeyword_6_0 = (Keyword)cLTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cGTEQEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cGTEQGreaterThanSignEqualsSignKeyword_7_0 = (Keyword)cGTEQEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cLTEQEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cLTEQLessThanSignEqualsSignKeyword_8_0 = (Keyword)cLTEQEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum BinaryOperator:
		//	AND="&&" | OR="||" | XOR="!||" | EQUALS="==" | NOTEQUALS="!=" | GT=">" | LT="<" | GTEQ=">=" | LTEQ="<=";
		public EnumRule getRule() { return rule; }

		//AND="&&" | OR="||" | XOR="!||" | EQUALS="==" | NOTEQUALS="!=" | GT=">" | LT="<" | GTEQ=">=" | LTEQ="<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND="&&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//"&&"
		public Keyword getANDAmpersandAmpersandKeyword_0_0() { return cANDAmpersandAmpersandKeyword_0_0; }

		//OR="||"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }

		//"||"
		public Keyword getORVerticalLineVerticalLineKeyword_1_0() { return cORVerticalLineVerticalLineKeyword_1_0; }

		//XOR="!||"
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_2() { return cXOREnumLiteralDeclaration_2; }

		//"!||"
		public Keyword getXORExclamationMarkVerticalLineVerticalLineKeyword_2_0() { return cXORExclamationMarkVerticalLineVerticalLineKeyword_2_0; }

		//EQUALS="=="
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_3() { return cEQUALSEnumLiteralDeclaration_3; }

		//"=="
		public Keyword getEQUALSEqualsSignEqualsSignKeyword_3_0() { return cEQUALSEqualsSignEqualsSignKeyword_3_0; }

		//NOTEQUALS="!="
		public EnumLiteralDeclaration getNOTEQUALSEnumLiteralDeclaration_4() { return cNOTEQUALSEnumLiteralDeclaration_4; }

		//"!="
		public Keyword getNOTEQUALSExclamationMarkEqualsSignKeyword_4_0() { return cNOTEQUALSExclamationMarkEqualsSignKeyword_4_0; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_5() { return cGTEnumLiteralDeclaration_5; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_5_0() { return cGTGreaterThanSignKeyword_5_0; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_6() { return cLTEnumLiteralDeclaration_6; }

		//"<"
		public Keyword getLTLessThanSignKeyword_6_0() { return cLTLessThanSignKeyword_6_0; }

		//GTEQ=">="
		public EnumLiteralDeclaration getGTEQEnumLiteralDeclaration_7() { return cGTEQEnumLiteralDeclaration_7; }

		//">="
		public Keyword getGTEQGreaterThanSignEqualsSignKeyword_7_0() { return cGTEQGreaterThanSignEqualsSignKeyword_7_0; }

		//LTEQ="<="
		public EnumLiteralDeclaration getLTEQEnumLiteralDeclaration_8() { return cLTEQEnumLiteralDeclaration_8; }

		//"<="
		public Keyword getLTEQLessThanSignEqualsSignKeyword_8_0() { return cLTEQLessThanSignEqualsSignKeyword_8_0; }
	}
	
	private ConfiguratorModelElements pConfiguratorModel;
	private ValueElements pValue;
	private ExpressionElements pExpression;
	private EStringElements pEString;
	private Parameter2Elements pParameter2;
	private Parameter3Elements pParameter3;
	private ConstraintElements pConstraint;
	private EnumElements pEnum;
	private EIntElements pEInt;
	private IntLiteralElements pIntLiteral;
	private DoubleLiteralElements pDoubleLiteral;
	private StringLiteralElements pStringLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private EDoubleElements pEDouble;
	private EBooleanElements pEBoolean;
	private BinaryExpressionElements pBinaryExpression;
	private BinaryOperatorElements unknownRuleBinaryOperator;
	private ParameterIdentifierElements pParameterIdentifier;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ConfiguratorModel:
	//	{ConfiguratorModel} "ConfiguratorModel" name=EString "{" ("enums" "{" enums+=Enum ("," enums+=Enum)* "}")?
	//	("parameters" "{" (parameters+=Parameter2 | parameters+=Parameter3) ("," (parameters+=Parameter2 |
	//	parameters+=Parameter3))* "}")? ("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")? "}";
	public ConfiguratorModelElements getConfiguratorModelAccess() {
		return (pConfiguratorModel != null) ? pConfiguratorModel : (pConfiguratorModel = new ConfiguratorModelElements());
	}
	
	public ParserRule getConfiguratorModelRule() {
		return getConfiguratorModelAccess().getRule();
	}

	//Value:
	//	IntLiteral | DoubleLiteral | StringLiteral | BooleanLiteral;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Expression:
	//	BinaryExpression | IntLiteral | DoubleLiteral | StringLiteral | BooleanLiteral | ParameterIdentifier;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	////Parameter returns Parameter:
	////	{Parameter}
	////	'Parameter'
	////	name=EString
	////	'{'
	////		('maxChosenValues' ':' maxChosenValues=EInt)?
	////		('minChosenValues' minChosenValues=EInt)?
	////		('enum' ^enum=[Enum|EString])?
	////		('children' '(' children+=[Parameter|EString] ( "," children+=[Parameter|EString])* ')' )?
	////		('enumValues' '(' enumValues+=[Value|EString] ( "," enumValues+=[Value|EString])* ')' )?
	////		('literalValues' '{' literalValues+=Value ( "," literalValues+=Value)* '}' )?
	////	'}';
	//Parameter2 returns Parameter:
	//	{Parameter} "Parameter" name=EString "(" ("maxChosenValues" ":" maxChosenValues=EInt) "," ("minChosenValues" ":"
	//	minChosenValues=EInt) ("," "enum" ":" ^enum=[Enum|EString])? ")";
	public Parameter2Elements getParameter2Access() {
		return (pParameter2 != null) ? pParameter2 : (pParameter2 = new Parameter2Elements());
	}
	
	public ParserRule getParameter2Rule() {
		return getParameter2Access().getRule();
	}

	//Parameter3 returns Parameter:
	//	{Parameter} "Parameter" name=EString "(" ("children" ":" "[" children+=[Parameter|EString] (","
	//	children+=[Parameter|EString])* "]") ")";
	public Parameter3Elements getParameter3Access() {
		return (pParameter3 != null) ? pParameter3 : (pParameter3 = new Parameter3Elements());
	}
	
	public ParserRule getParameter3Rule() {
		return getParameter3Access().getRule();
	}

	////Constraint returns Constraint:
	////	{Constraint}
	////	'Constraint'
	////	'{'
	////		('if' if=BinaryExpression)?
	////		('then' then=BinaryExpression)?
	////	'}';
	//Constraint:
	//	{Constraint} ("if" if=BinaryExpression) ("then" then=BinaryExpression);
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	////Enum returns Enum:
	////	'Enum'
	////	name=EString
	////	'{'
	////		'values' '{' values+=Value ( "," values+=Value)* '}' 
	////	'}';
	//Enum:
	//	"Enum" name=EString ":" values+=Value ("," values+=Value)* ";";
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//IntLiteral:
	//	{IntLiteral} value=EInt?;
	public IntLiteralElements getIntLiteralAccess() {
		return (pIntLiteral != null) ? pIntLiteral : (pIntLiteral = new IntLiteralElements());
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	////IntLiteral returns IntLiteral:
	////	{IntLiteral}
	////	'IntLiteral'
	////	'{'
	////		('value' value=EInt)?
	////	'}';
	////DoubleLiteral returns DoubleLiteral:
	////	{DoubleLiteral}
	////	'DoubleLiteral'
	////	'{'
	////		('value' value=EDouble)?
	////	'}';
	//DoubleLiteral:
	//	{DoubleLiteral} value=EDouble?;
	public DoubleLiteralElements getDoubleLiteralAccess() {
		return (pDoubleLiteral != null) ? pDoubleLiteral : (pDoubleLiteral = new DoubleLiteralElements());
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}

	////StringLiteral returns StringLiteral:
	////	{StringLiteral}
	////	'StringLiteral'
	////	'{'
	////		('value' value=EString)?
	////	'}';
	//StringLiteral:
	//	{StringLiteral} value=EString?;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	////BooleanLiteral returns BooleanLiteral:
	////	{BooleanLiteral}
	////	(value?='value')?
	////	'BooleanLiteral'
	////	;
	//BooleanLiteral:
	//	{BooleanLiteral} value?="value"?;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	////BinaryExpression returns BinaryExpression:
	////	'BinaryExpression'
	////	'{'
	////		('operator' operator=BinaryOperator)?
	////		'leftOperand' leftOperand=Expression
	////		'rightOperand' rightOperand=Expression
	////	'}';	
	//BinaryExpression:
	//	"(" leftOperand=Expression operator=BinaryOperator rightOperand=Expression ")";
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return (pBinaryExpression != null) ? pBinaryExpression : (pBinaryExpression = new BinaryExpressionElements());
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}

	//enum BinaryOperator:
	//	AND="&&" | OR="||" | XOR="!||" | EQUALS="==" | NOTEQUALS="!=" | GT=">" | LT="<" | GTEQ=">=" | LTEQ="<=";
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return (unknownRuleBinaryOperator != null) ? unknownRuleBinaryOperator : (unknownRuleBinaryOperator = new BinaryOperatorElements());
	}
	
	public EnumRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}

	//ParameterIdentifier:
	//	"ID" parameter=[Parameter|EString];
	public ParameterIdentifierElements getParameterIdentifierAccess() {
		return (pParameterIdentifier != null) ? pParameterIdentifier : (pParameterIdentifier = new ParameterIdentifierElements());
	}
	
	public ParserRule getParameterIdentifierRule() {
		return getParameterIdentifierAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
