/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ConfiguratorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfiguratorModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfiguratorModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfiguratorModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_4_2_0 = (RuleCall)cParametersAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParametersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_3_1_0 = (RuleCall)cParametersAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConstraintsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConstraintsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_2_0 = (RuleCall)cConstraintsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_3_1_0 = (RuleCall)cConstraintsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCategoriesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cCategoriesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cCategoriesParamCategoryParserRuleCall_6_2_0 = (RuleCall)cCategoriesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cCategoriesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cCategoriesParamCategoryParserRuleCall_6_3_1_0 = (RuleCall)cCategoriesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ConfiguratorModel:
		//	{ConfiguratorModel} "ConfiguratorModel" "{" ("Name" Name=EString)? ("parameters" "{" parameters+=Parameter (","
		//	parameters+=Parameter)* "}")? ("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")?
		//	("categories" "{" categories+=ParamCategory ("," categories+=ParamCategory)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{ConfiguratorModel} "ConfiguratorModel" "{" ("Name" Name=EString)? ("parameters" "{" parameters+=Parameter (","
		//parameters+=Parameter)* "}")? ("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")?
		//("categories" "{" categories+=ParamCategory ("," categories+=ParamCategory)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{ConfiguratorModel}
		public Action getConfiguratorModelAction_0() { return cConfiguratorModelAction_0; }

		//"ConfiguratorModel"
		public Keyword getConfiguratorModelKeyword_1() { return cConfiguratorModelKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("Name" Name=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"Name"
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }

		//Name=EString
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_3_1_0() { return cNameEStringParserRuleCall_3_1_0; }

		//("parameters" "{" parameters+=Parameter ("," parameters+=Parameter)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"parameters"
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_2() { return cParametersAssignment_4_2; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_2_0() { return cParametersParameterParserRuleCall_4_2_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_3_1() { return cParametersAssignment_4_3_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_3_1_0() { return cParametersParameterParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"constraints"
		public Keyword getConstraintsKeyword_5_0() { return cConstraintsKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_5_2() { return cConstraintsAssignment_5_2; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_2_0() { return cConstraintsConstraintParserRuleCall_5_2_0; }

		//("," constraints+=Constraint)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_5_3_1() { return cConstraintsAssignment_5_3_1; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_3_1_0() { return cConstraintsConstraintParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//("categories" "{" categories+=ParamCategory ("," categories+=ParamCategory)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"categories"
		public Keyword getCategoriesKeyword_6_0() { return cCategoriesKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//categories+=ParamCategory
		public Assignment getCategoriesAssignment_6_2() { return cCategoriesAssignment_6_2; }

		//ParamCategory
		public RuleCall getCategoriesParamCategoryParserRuleCall_6_2_0() { return cCategoriesParamCategoryParserRuleCall_6_2_0; }

		//("," categories+=ParamCategory)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//categories+=ParamCategory
		public Assignment getCategoriesAssignment_6_3_1() { return cCategoriesAssignment_6_3_1; }

		//ParamCategory
		public RuleCall getCategoriesParamCategoryParserRuleCall_6_3_1_0() { return cCategoriesParamCategoryParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterIdentifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constraint:
		//	BinaryConstraint | UnaryConstraint | ParameterIdentifier;
		public ParserRule getRule() { return rule; }

		//BinaryConstraint | UnaryConstraint | ParameterIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryConstraint
		public RuleCall getBinaryConstraintParserRuleCall_0() { return cBinaryConstraintParserRuleCall_0; }

		//UnaryConstraint
		public RuleCall getUnaryConstraintParserRuleCall_1() { return cUnaryConstraintParserRuleCall_1; }

		//ParameterIdentifier
		public RuleCall getParameterIdentifierParserRuleCall_2() { return cParameterIdentifierParserRuleCall_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	SimpleType | Enum;
		public ParserRule getRule() { return rule; }

		//SimpleType | Enum
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0() { return cSimpleTypeParserRuleCall_0; }

		//Enum
		public RuleCall getEnumParserRuleCall_1() { return cEnumParserRuleCall_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRequiredRequiredKeyword_0_0 = (Keyword)cRequiredAssignment_0.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMaxChosenValuesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMaxChosenValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMaxChosenValuesEIntParserRuleCall_4_1_0 = (RuleCall)cMaxChosenValuesAssignment_4_1.eContents().get(0);
		private final Keyword cParamTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParamTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParamTypeTypeParserRuleCall_6_0 = (RuleCall)cParamTypeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Parameter:
		//	required?="required"? "Parameter" "{" ("Name" Name=EString)? ("maxChosenValues" maxChosenValues=EInt)? "paramType"
		//	paramType=Type "}";
		public ParserRule getRule() { return rule; }

		//required?="required"? "Parameter" "{" ("Name" Name=EString)? ("maxChosenValues" maxChosenValues=EInt)? "paramType"
		//paramType=Type "}"
		public Group getGroup() { return cGroup; }

		//required?="required"?
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }

		//"required"
		public Keyword getRequiredRequiredKeyword_0_0() { return cRequiredRequiredKeyword_0_0; }

		//"Parameter"
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("Name" Name=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"Name"
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }

		//Name=EString
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_3_1_0() { return cNameEStringParserRuleCall_3_1_0; }

		//("maxChosenValues" maxChosenValues=EInt)?
		public Group getGroup_4() { return cGroup_4; }

		//"maxChosenValues"
		public Keyword getMaxChosenValuesKeyword_4_0() { return cMaxChosenValuesKeyword_4_0; }

		//maxChosenValues=EInt
		public Assignment getMaxChosenValuesAssignment_4_1() { return cMaxChosenValuesAssignment_4_1; }

		//EInt
		public RuleCall getMaxChosenValuesEIntParserRuleCall_4_1_0() { return cMaxChosenValuesEIntParserRuleCall_4_1_0; }

		//"paramType"
		public Keyword getParamTypeKeyword_5() { return cParamTypeKeyword_5; }

		//paramType=Type
		public Assignment getParamTypeAssignment_6() { return cParamTypeAssignment_6; }

		//Type
		public RuleCall getParamTypeTypeParserRuleCall_6_0() { return cParamTypeTypeParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ParamCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParamCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cParamsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParamsParameterParserRuleCall_5_0 = (RuleCall)cParamsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cParamsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_6_1_0 = (RuleCall)cParamsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ParamCategory:
		//	"ParamCategory" "{" ("Name" Name=EString)? "params" "{" params+=Parameter ("," params+=Parameter)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"ParamCategory" "{" ("Name" Name=EString)? "params" "{" params+=Parameter ("," params+=Parameter)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"ParamCategory"
		public Keyword getParamCategoryKeyword_0() { return cParamCategoryKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("Name" Name=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"Name"
		public Keyword getNameKeyword_2_0() { return cNameKeyword_2_0; }

		//Name=EString
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_1_0() { return cNameEStringParserRuleCall_2_1_0; }

		//"params"
		public Keyword getParamsKeyword_3() { return cParamsKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//params+=Parameter
		public Assignment getParamsAssignment_5() { return cParamsAssignment_5; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_0() { return cParamsParameterParserRuleCall_5_0; }

		//("," params+=Parameter)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_6_1() { return cParamsAssignment_6_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_6_1_0() { return cParamsParameterParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSimpleTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameTypeNameEnumRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SimpleType:
		//	{SimpleType} "SimpleType" "{" ("Name" Name=TypeName)? "}";
		public ParserRule getRule() { return rule; }

		//{SimpleType} "SimpleType" "{" ("Name" Name=TypeName)? "}"
		public Group getGroup() { return cGroup; }

		//{SimpleType}
		public Action getSimpleTypeAction_0() { return cSimpleTypeAction_0; }

		//"SimpleType"
		public Keyword getSimpleTypeKeyword_1() { return cSimpleTypeKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("Name" Name=TypeName)?
		public Group getGroup_3() { return cGroup_3; }

		//"Name"
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }

		//Name=TypeName
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//TypeName
		public RuleCall getNameTypeNameEnumRuleCall_3_1_0() { return cNameTypeNameEnumRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValuesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesValueParserRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValuesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_5_1_0 = (RuleCall)cValuesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Enum:
		//	"Enum" "{" "values" "{" values+=Value ("," values+=Value)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"Enum" "{" "values" "{" values+=Value ("," values+=Value)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"Enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"values"
		public Keyword getValuesKeyword_2() { return cValuesKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//values+=Value
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//Value
		public RuleCall getValuesValueParserRuleCall_4_0() { return cValuesValueParserRuleCall_4_0; }

		//("," values+=Value)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//values+=Value
		public Assignment getValuesAssignment_5_1() { return cValuesAssignment_5_1; }

		//Value
		public RuleCall getValuesValueParserRuleCall_5_1_0() { return cValuesValueParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Value:
		//	{Value} "Value" name=EString;
		public ParserRule getRule() { return rule; }

		//{Value} "Value" name=EString
		public Group getGroup() { return cGroup; }

		//{Value}
		public Action getValueAction_0() { return cValueAction_0; }

		//"Value"
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class BinaryConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBinaryConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOperatorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperatorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperatorBinaryOperatorEnumRuleCall_2_1_0 = (RuleCall)cOperatorAssignment_2_1.eContents().get(0);
		private final Keyword cLeftOperandKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftOperandAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeftOperandConstraintParserRuleCall_4_0 = (RuleCall)cLeftOperandAssignment_4.eContents().get(0);
		private final Keyword cRightOperandKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightOperandAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightOperandConstraintParserRuleCall_6_0 = (RuleCall)cRightOperandAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BinaryConstraint:
		//	"BinaryConstraint" "{" ("operator" operator=BinaryOperator)? "leftOperand" leftOperand=Constraint "rightOperand"
		//	rightOperand=Constraint "}";
		public ParserRule getRule() { return rule; }

		//"BinaryConstraint" "{" ("operator" operator=BinaryOperator)? "leftOperand" leftOperand=Constraint "rightOperand"
		//rightOperand=Constraint "}"
		public Group getGroup() { return cGroup; }

		//"BinaryConstraint"
		public Keyword getBinaryConstraintKeyword_0() { return cBinaryConstraintKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("operator" operator=BinaryOperator)?
		public Group getGroup_2() { return cGroup_2; }

		//"operator"
		public Keyword getOperatorKeyword_2_0() { return cOperatorKeyword_2_0; }

		//operator=BinaryOperator
		public Assignment getOperatorAssignment_2_1() { return cOperatorAssignment_2_1; }

		//BinaryOperator
		public RuleCall getOperatorBinaryOperatorEnumRuleCall_2_1_0() { return cOperatorBinaryOperatorEnumRuleCall_2_1_0; }

		//"leftOperand"
		public Keyword getLeftOperandKeyword_3() { return cLeftOperandKeyword_3; }

		//leftOperand=Constraint
		public Assignment getLeftOperandAssignment_4() { return cLeftOperandAssignment_4; }

		//Constraint
		public RuleCall getLeftOperandConstraintParserRuleCall_4_0() { return cLeftOperandConstraintParserRuleCall_4_0; }

		//"rightOperand"
		public Keyword getRightOperandKeyword_5() { return cRightOperandKeyword_5; }

		//rightOperand=Constraint
		public Assignment getRightOperandAssignment_6() { return cRightOperandAssignment_6; }

		//Constraint
		public RuleCall getRightOperandConstraintParserRuleCall_6_0() { return cRightOperandConstraintParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class UnaryConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnaryConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOperatorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperatorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_2_1_0 = (RuleCall)cOperatorAssignment_2_1.eContents().get(0);
		private final Keyword cOperandKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperandAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperandConstraintParserRuleCall_4_0 = (RuleCall)cOperandAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UnaryConstraint:
		//	"UnaryConstraint" "{" ("operator" operator=UnaryOperator)? "operand" operand=Constraint "}";
		public ParserRule getRule() { return rule; }

		//"UnaryConstraint" "{" ("operator" operator=UnaryOperator)? "operand" operand=Constraint "}"
		public Group getGroup() { return cGroup; }

		//"UnaryConstraint"
		public Keyword getUnaryConstraintKeyword_0() { return cUnaryConstraintKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("operator" operator=UnaryOperator)?
		public Group getGroup_2() { return cGroup_2; }

		//"operator"
		public Keyword getOperatorKeyword_2_0() { return cOperatorKeyword_2_0; }

		//operator=UnaryOperator
		public Assignment getOperatorAssignment_2_1() { return cOperatorAssignment_2_1; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_2_1_0() { return cOperatorUnaryOperatorEnumRuleCall_2_1_0; }

		//"operand"
		public Keyword getOperandKeyword_3() { return cOperandKeyword_3; }

		//operand=Constraint
		public Assignment getOperandAssignment_4() { return cOperandAssignment_4; }

		//Constraint
		public RuleCall getOperandConstraintParserRuleCall_4_0() { return cOperandConstraintParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ParameterIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterIdentifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cParameterKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParameterParameterCrossReference_3_0 = (CrossReference)cParameterAssignment_3.eContents().get(0);
		private final RuleCall cParameterParameterEStringParserRuleCall_3_0_1 = (RuleCall)cParameterParameterCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ParameterIdentifier:
		//	"ParameterIdentifier" "{" "parameter" parameter=[Parameter|EString] "}";
		public ParserRule getRule() { return rule; }

		//"ParameterIdentifier" "{" "parameter" parameter=[Parameter|EString] "}"
		public Group getGroup() { return cGroup; }

		//"ParameterIdentifier"
		public Keyword getParameterIdentifierKeyword_0() { return cParameterIdentifierKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"parameter"
		public Keyword getParameterKeyword_2() { return cParameterKeyword_2; }

		//parameter=[Parameter|EString]
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }

		//[Parameter|EString]
		public CrossReference getParameterParameterCrossReference_3_0() { return cParameterParameterCrossReference_3_0; }

		//EString
		public RuleCall getParameterParameterEStringParserRuleCall_3_0_1() { return cParameterParameterEStringParserRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	public class TypeNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTINTKeyword_0_0 = (Keyword)cINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLEANBOOLEANKeyword_1_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDOUBLEDOUBLEKeyword_2_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSTRINGSTRINGKeyword_3_0 = (Keyword)cSTRINGEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TypeName:
		//	INT | BOOLEAN | DOUBLE | STRING;
		public EnumRule getRule() { return rule; }

		//INT | BOOLEAN | DOUBLE | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_0() { return cINTEnumLiteralDeclaration_0; }

		//"INT"
		public Keyword getINTINTKeyword_0_0() { return cINTINTKeyword_0_0; }

		//BOOLEAN
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_1() { return cBOOLEANEnumLiteralDeclaration_1; }

		//"BOOLEAN"
		public Keyword getBOOLEANBOOLEANKeyword_1_0() { return cBOOLEANBOOLEANKeyword_1_0; }

		//DOUBLE
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_2() { return cDOUBLEEnumLiteralDeclaration_2; }

		//"DOUBLE"
		public Keyword getDOUBLEDOUBLEKeyword_2_0() { return cDOUBLEDOUBLEKeyword_2_0; }

		//STRING
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_3() { return cSTRINGEnumLiteralDeclaration_3; }

		//"STRING"
		public Keyword getSTRINGSTRINGKeyword_3_0() { return cSTRINGSTRINGKeyword_3_0; }
	}

	public class BinaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXORXORKeyword_2_0 = (Keyword)cXOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEQUALSEQUALSKeyword_3_0 = (Keyword)cEQUALSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQUALSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNOTEQUALSNOTEQUALSKeyword_4_0 = (Keyword)cNOTEQUALSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGTGTKeyword_5_0 = (Keyword)cGTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLTLTKeyword_6_0 = (Keyword)cLTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cGTEQEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cGTEQGTEQKeyword_7_0 = (Keyword)cGTEQEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cLTEQEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cLTEQLTEQKeyword_8_0 = (Keyword)cLTEQEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum BinaryOperator:
		//	AND | OR | XOR | EQUALS | NOTEQUALS | GT | LT | GTEQ | LTEQ;
		public EnumRule getRule() { return rule; }

		//AND | OR | XOR | EQUALS | NOTEQUALS | GT | LT | GTEQ | LTEQ
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//"AND"
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }

		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }

		//"OR"
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }

		//XOR
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_2() { return cXOREnumLiteralDeclaration_2; }

		//"XOR"
		public Keyword getXORXORKeyword_2_0() { return cXORXORKeyword_2_0; }

		//EQUALS
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_3() { return cEQUALSEnumLiteralDeclaration_3; }

		//"EQUALS"
		public Keyword getEQUALSEQUALSKeyword_3_0() { return cEQUALSEQUALSKeyword_3_0; }

		//NOTEQUALS
		public EnumLiteralDeclaration getNOTEQUALSEnumLiteralDeclaration_4() { return cNOTEQUALSEnumLiteralDeclaration_4; }

		//"NOTEQUALS"
		public Keyword getNOTEQUALSNOTEQUALSKeyword_4_0() { return cNOTEQUALSNOTEQUALSKeyword_4_0; }

		//GT
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_5() { return cGTEnumLiteralDeclaration_5; }

		//"GT"
		public Keyword getGTGTKeyword_5_0() { return cGTGTKeyword_5_0; }

		//LT
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_6() { return cLTEnumLiteralDeclaration_6; }

		//"LT"
		public Keyword getLTLTKeyword_6_0() { return cLTLTKeyword_6_0; }

		//GTEQ
		public EnumLiteralDeclaration getGTEQEnumLiteralDeclaration_7() { return cGTEQEnumLiteralDeclaration_7; }

		//"GTEQ"
		public Keyword getGTEQGTEQKeyword_7_0() { return cGTEQGTEQKeyword_7_0; }

		//LTEQ
		public EnumLiteralDeclaration getLTEQEnumLiteralDeclaration_8() { return cLTEQEnumLiteralDeclaration_8; }

		//"LTEQ"
		public Keyword getLTEQLTEQKeyword_8_0() { return cLTEQLTEQKeyword_8_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNOTNOTKeyword_0 = (Keyword)cNOTEnumLiteralDeclaration.eContents().get(0);
		
		//enum UnaryOperator:
		//	NOT;
		public EnumRule getRule() { return rule; }

		//NOT
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration() { return cNOTEnumLiteralDeclaration; }

		//"NOT"
		public Keyword getNOTNOTKeyword_0() { return cNOTNOTKeyword_0; }
	}
	
	private ConfiguratorModelElements pConfiguratorModel;
	private ConstraintElements pConstraint;
	private TypeElements pType;
	private ParameterElements pParameter;
	private EStringElements pEString;
	private ParamCategoryElements pParamCategory;
	private EBooleanElements pEBoolean;
	private EIntElements pEInt;
	private SimpleTypeElements pSimpleType;
	private EnumElements pEnum;
	private TypeNameElements unknownRuleTypeName;
	private ValueElements pValue;
	private BinaryConstraintElements pBinaryConstraint;
	private UnaryConstraintElements pUnaryConstraint;
	private ParameterIdentifierElements pParameterIdentifier;
	private BinaryOperatorElements unknownRuleBinaryOperator;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ConfiguratorModel:
	//	{ConfiguratorModel} "ConfiguratorModel" "{" ("Name" Name=EString)? ("parameters" "{" parameters+=Parameter (","
	//	parameters+=Parameter)* "}")? ("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")?
	//	("categories" "{" categories+=ParamCategory ("," categories+=ParamCategory)* "}")? "}";
	public ConfiguratorModelElements getConfiguratorModelAccess() {
		return (pConfiguratorModel != null) ? pConfiguratorModel : (pConfiguratorModel = new ConfiguratorModelElements());
	}
	
	public ParserRule getConfiguratorModelRule() {
		return getConfiguratorModelAccess().getRule();
	}

	//Constraint:
	//	BinaryConstraint | UnaryConstraint | ParameterIdentifier;
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//Type:
	//	SimpleType | Enum;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Parameter:
	//	required?="required"? "Parameter" "{" ("Name" Name=EString)? ("maxChosenValues" maxChosenValues=EInt)? "paramType"
	//	paramType=Type "}";
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//ParamCategory:
	//	"ParamCategory" "{" ("Name" Name=EString)? "params" "{" params+=Parameter ("," params+=Parameter)* "}" "}";
	public ParamCategoryElements getParamCategoryAccess() {
		return (pParamCategory != null) ? pParamCategory : (pParamCategory = new ParamCategoryElements());
	}
	
	public ParserRule getParamCategoryRule() {
		return getParamCategoryAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//SimpleType:
	//	{SimpleType} "SimpleType" "{" ("Name" Name=TypeName)? "}";
	public SimpleTypeElements getSimpleTypeAccess() {
		return (pSimpleType != null) ? pSimpleType : (pSimpleType = new SimpleTypeElements());
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//Enum:
	//	"Enum" "{" "values" "{" values+=Value ("," values+=Value)* "}" "}";
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//enum TypeName:
	//	INT | BOOLEAN | DOUBLE | STRING;
	public TypeNameElements getTypeNameAccess() {
		return (unknownRuleTypeName != null) ? unknownRuleTypeName : (unknownRuleTypeName = new TypeNameElements());
	}
	
	public EnumRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}

	//Value:
	//	{Value} "Value" name=EString;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//BinaryConstraint:
	//	"BinaryConstraint" "{" ("operator" operator=BinaryOperator)? "leftOperand" leftOperand=Constraint "rightOperand"
	//	rightOperand=Constraint "}";
	public BinaryConstraintElements getBinaryConstraintAccess() {
		return (pBinaryConstraint != null) ? pBinaryConstraint : (pBinaryConstraint = new BinaryConstraintElements());
	}
	
	public ParserRule getBinaryConstraintRule() {
		return getBinaryConstraintAccess().getRule();
	}

	//UnaryConstraint:
	//	"UnaryConstraint" "{" ("operator" operator=UnaryOperator)? "operand" operand=Constraint "}";
	public UnaryConstraintElements getUnaryConstraintAccess() {
		return (pUnaryConstraint != null) ? pUnaryConstraint : (pUnaryConstraint = new UnaryConstraintElements());
	}
	
	public ParserRule getUnaryConstraintRule() {
		return getUnaryConstraintAccess().getRule();
	}

	//ParameterIdentifier:
	//	"ParameterIdentifier" "{" "parameter" parameter=[Parameter|EString] "}";
	public ParameterIdentifierElements getParameterIdentifierAccess() {
		return (pParameterIdentifier != null) ? pParameterIdentifier : (pParameterIdentifier = new ParameterIdentifierElements());
	}
	
	public ParserRule getParameterIdentifierRule() {
		return getParameterIdentifierAccess().getRule();
	}

	//enum BinaryOperator:
	//	AND | OR | XOR | EQUALS | NOTEQUALS | GT | LT | GTEQ | LTEQ;
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return (unknownRuleBinaryOperator != null) ? unknownRuleBinaryOperator : (unknownRuleBinaryOperator = new BinaryOperatorElements());
	}
	
	public EnumRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//	NOT;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
