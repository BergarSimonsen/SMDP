/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator;

import Configurator.BinaryConstraint;
import Configurator.BinaryOperator;
import Configurator.ConfiguratorModel;
import Configurator.Constraint;
import Configurator.Literal;
import Configurator.Model;
import Configurator.Parameter;
import Configurator.ParameterIdentifier;
import Configurator.Stringg;
import Configurator.Type;
import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class MyDslGenerator implements IGenerator {
  public CharSequence compileToJava(final ConfiguratorModel it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.awt.BorderLayout;");
    _builder.newLine();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.Container;");
    _builder.newLine();
    _builder.append("import java.awt.Dimension;");
    _builder.newLine();
    _builder.append("import java.awt.FlowLayout;");
    _builder.newLine();
    _builder.append("import java.awt.GridBagConstraints;");
    _builder.newLine();
    _builder.append("import java.awt.GridBagLayout;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.append("import java.io.BufferedWriter;");
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.FileWriter;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import javax.swing.BorderFactory;");
    _builder.newLine();
    _builder.append("import javax.swing.JButton;");
    _builder.newLine();
    _builder.append("import javax.swing.JCheckBox;");
    _builder.newLine();
    _builder.append("import javax.swing.JComboBox;");
    _builder.newLine();
    _builder.append("import javax.swing.JFrame;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JList;");
    _builder.newLine();
    _builder.append("import javax.swing.JOptionPane;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.append("import javax.swing.JTextField;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = it.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append(" extends JFrame { ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private static final long serialVersionUID = 1L;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JLabel titleLabel = new JLabel(\"");
    String _name_1 = it.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper_1, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    {
      EList<Parameter> _parameters = it.getParameters();
      for(final Parameter p : _parameters) {
        _builder.append("\t");
        String _generateJavaLabel = this.generateJavaLabel(p);
        _builder.append(_generateJavaLabel, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Parameter> _parameters_1 = it.getParameters();
      for(final Parameter p_1 : _parameters_1) {
        _builder.append("\t");
        String _generateJavaVariables = this.generateJavaVariables(p_1);
        _builder.append(_generateJavaVariables, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("private JButton submitButton = new JButton(\"Submit\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setup() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setPreferredSize(new Dimension(800, 600));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Container contentPane = getContentPane();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("contentPane.setLayout(new BorderLayout());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel mainPanel = new JPanel();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("mainPanel.setLayout(new FlowLayout());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("contentPane.add(mainPanel, BorderLayout.CENTER);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("submitButton.addActionListener(new ActionListener() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String c = checkConstraints();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(c != null && c.length() == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("boolean b = save();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(b)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("JOptionPane.showMessageDialog(null, \"Configuration file saved successfully!\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("JOptionPane.showMessageDialog(null, c);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getContentPane().add(BorderLayout.NORTH, titleLabel);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.setLayout(new GridBagLayout());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.setBackground(Color.GREEN);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getContentPane().add(panel);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GridBagConstraints left = new GridBagConstraints();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("left.anchor = GridBagConstraints.EAST;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GridBagConstraints right = new GridBagConstraints();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("right.weightx = 2.0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("right.fill = GridBagConstraints.HORIZONTAL;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("right.gridwidth = GridBagConstraints.REMAINDER;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Parameter> _parameters_2 = it.getParameters();
      for(final Parameter p_2 : _parameters_2) {
        _builder.append("\t\t");
        String _addToJavaPanel = this.addToJavaPanel(p_2);
        _builder.append(_addToJavaPanel, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(submitButton, left);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pack();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setDefaultCloseOperation(EXIT_ON_CLOSE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setLocationRelativeTo(null);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("show();\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String checkConstraints() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String s = \"\";");
    _builder.newLine();
    {
      EList<Parameter> _parameters_3 = it.getParameters();
      for(final Parameter p_3 : _parameters_3) {
        _builder.append("\t\t");
        CharSequence _generateJavaRequiredFields = this.generateJavaRequiredFields(p_3);
        _builder.append(_generateJavaRequiredFields, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("if(s.length() == 0) {");
    _builder.newLine();
    {
      EList<Constraint> _constraints = it.getConstraints();
      for(final Constraint c : _constraints) {
        _builder.append("\t\t\t");
        _builder.append("if(!");
        Object _generateJavaConstraint = this.generateJavaConstraint(c);
        _builder.append(_generateJavaConstraint, "\t\t\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("s += \"Constraint violated!\\n\"; ");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return s;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean save() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("File f = new File(\"configurator_output.txt\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String s = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    {
      EList<Parameter> _parameters_4 = it.getParameters();
      for(final Parameter p_4 : _parameters_4) {
        _builder.append("\t\t\t");
        String _generateJavaVariableStringValue = this.generateJavaVariableStringValue(p_4);
        _builder.append(_generateJavaVariableStringValue, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("FileWriter fw = new FileWriter(f);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BufferedWriter bw = new BufferedWriter(fw);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bw.write(s);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bw.flush();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bw.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_2 = it.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper_2, "\t\t");
    _builder.append(" c = new ");
    String _name_3 = it.getName();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_name_3);
    _builder.append(_firstUpper_3, "\t\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("c.setup();\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String getEnumValueJavaType(final Literal it) {
    if ((it instanceof Configurator.Integer)) {
      return "Integer";
    }
    if ((it instanceof Configurator.Double)) {
      return "Double";
    }
    if ((it instanceof Configurator.Boolean)) {
      return "Boolean";
    }
    if ((it instanceof Stringg)) {
      return "String";
    }
    return null;
  }
  
  public String generateJavaLabel(final Parameter it) {
    String _name = it.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    String _plus = ("private JLabel " + _firstLower);
    String _plus_1 = (_plus + "Label = new JLabel(\"");
    String _name_1 = it.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    String _plus_2 = (_plus_1 + _firstUpper);
    String r = (_plus_2 + "\");");
    EList<Parameter> _children = it.getChildren();
    for (final Parameter c : _children) {
      String _r = r;
      Object _generateJavaLabel = this.generateJavaLabel(c);
      String _plus_3 = ("\n" + _generateJavaLabel);
      r = (_r + _plus_3);
    }
    return r;
  }
  
  public String generateJavaVariables(final Parameter it) {
    String r = "";
    Type _type = it.getType();
    EClass _eClass = _type.eClass();
    String _name = _eClass.getName();
    boolean _equals = Objects.equal(_name, "Enum");
    if (_equals) {
      Type _type_1 = it.getType();
      final Configurator.Enum et = ((Configurator.Enum) _type_1);
      int _maxChosenValues = it.getMaxChosenValues();
      boolean _equals_1 = (_maxChosenValues == 1);
      if (_equals_1) {
        String _r = r;
        EList<Literal> _values = et.getValues();
        Literal _get = _values.get(0);
        String _enumValueJavaType = this.getEnumValueJavaType(_get);
        String _plus = ("private " + _enumValueJavaType);
        String _plus_1 = (_plus + "[] ");
        String _name_1 = it.getName();
        String _firstLower = StringExtensions.toFirstLower(_name_1);
        String _plus_2 = (_plus_1 + _firstLower);
        String _plus_3 = (_plus_2 + "ComboBoxValues = new ");
        EList<Literal> _values_1 = et.getValues();
        Literal _get_1 = _values_1.get(0);
        String _enumValueJavaType_1 = this.getEnumValueJavaType(_get_1);
        String _plus_4 = (_plus_3 + _enumValueJavaType_1);
        String _plus_5 = (_plus_4 + "[] {");
        r = (_r + _plus_5);
        EList<Literal> _values_2 = et.getValues();
        for (final Literal l : _values_2) {
          String _r_1 = r;
          EList<Literal> _values_3 = et.getValues();
          EList<Literal> _values_4 = et.getValues();
          int _size = _values_4.size();
          int _minus = (_size - 1);
          Literal _get_2 = _values_3.get(_minus);
          boolean _equals_2 = Objects.equal(l, _get_2);
          String _enumValue = this.getEnumValue(l, _equals_2);
          r = (_r_1 + _enumValue);
        }
        String _r_2 = r;
        r = (_r_2 + "};\n");
        String _r_3 = r;
        EList<Literal> _values_5 = et.getValues();
        Literal _get_3 = _values_5.get(0);
        String _enumValueJavaType_2 = this.getEnumValueJavaType(_get_3);
        String _plus_6 = ("private JComboBox<" + _enumValueJavaType_2);
        String _plus_7 = (_plus_6 + "> ");
        String _name_2 = it.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
        String _plus_8 = (_plus_7 + _firstLower_1);
        String _plus_9 = (_plus_8 + "ComboBox = new JComboBox<");
        EList<Literal> _values_6 = et.getValues();
        Literal _get_4 = _values_6.get(0);
        String _enumValueJavaType_3 = this.getEnumValueJavaType(_get_4);
        String _plus_10 = (_plus_9 + _enumValueJavaType_3);
        String _plus_11 = (_plus_10 + ">(");
        String _name_3 = it.getName();
        String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
        String _plus_12 = (_plus_11 + _firstLower_2);
        String _plus_13 = (_plus_12 + "ComboBoxValues);\n");
        r = (_r_3 + _plus_13);
      } else {
        int _maxChosenValues_1 = it.getMaxChosenValues();
        boolean _greaterThan = (_maxChosenValues_1 > 1);
        if (_greaterThan) {
          String _r_4 = r;
          EList<Literal> _values_7 = et.getValues();
          Literal _get_5 = _values_7.get(0);
          String _enumValueJavaType_4 = this.getEnumValueJavaType(_get_5);
          String _plus_14 = ("private " + _enumValueJavaType_4);
          String _plus_15 = (_plus_14 + "[] ");
          String _name_4 = it.getName();
          String _firstLower_3 = StringExtensions.toFirstLower(_name_4);
          String _plus_16 = (_plus_15 + _firstLower_3);
          String _plus_17 = (_plus_16 + "ListValues = new ");
          EList<Literal> _values_8 = et.getValues();
          Literal _get_6 = _values_8.get(0);
          String _enumValueJavaType_5 = this.getEnumValueJavaType(_get_6);
          String _plus_18 = (_plus_17 + _enumValueJavaType_5);
          String _plus_19 = (_plus_18 + "[] {");
          r = (_r_4 + _plus_19);
          EList<Literal> _values_9 = et.getValues();
          for (final Literal l_1 : _values_9) {
            String _r_5 = r;
            EList<Literal> _values_10 = et.getValues();
            EList<Literal> _values_11 = et.getValues();
            int _size_1 = _values_11.size();
            int _minus_1 = (_size_1 - 1);
            Literal _get_7 = _values_10.get(_minus_1);
            boolean _equals_3 = Objects.equal(l_1, _get_7);
            String _enumValue_1 = this.getEnumValue(l_1, _equals_3);
            r = (_r_5 + _enumValue_1);
          }
          String _r_6 = r;
          r = (_r_6 + "};\n");
          String _r_7 = r;
          EList<Literal> _values_12 = et.getValues();
          Literal _get_8 = _values_12.get(0);
          String _enumValueJavaType_6 = this.getEnumValueJavaType(_get_8);
          String _plus_20 = ("private JList<" + _enumValueJavaType_6);
          String _plus_21 = (_plus_20 + "> ");
          String _name_5 = it.getName();
          String _firstLower_4 = StringExtensions.toFirstLower(_name_5);
          String _plus_22 = (_plus_21 + _firstLower_4);
          String _plus_23 = (_plus_22 + "List = new JList<");
          EList<Literal> _values_13 = et.getValues();
          Literal _get_9 = _values_13.get(0);
          String _enumValueJavaType_7 = this.getEnumValueJavaType(_get_9);
          String _plus_24 = (_plus_23 + _enumValueJavaType_7);
          String _plus_25 = (_plus_24 + ">(");
          String _name_6 = it.getName();
          String _firstLower_5 = StringExtensions.toFirstLower(_name_6);
          String _plus_26 = (_plus_25 + _firstLower_5);
          String _plus_27 = (_plus_26 + "ListValues);\n");
          r = (_r_7 + _plus_27);
        }
      }
    } else {
      boolean _and = false;
      Type _type_2 = it.getType();
      EClass _eClass_1 = _type_2.eClass();
      String _name_7 = _eClass_1.getName();
      boolean _equals_4 = Objects.equal(_name_7, "Boolean");
      if (!_equals_4) {
        _and = false;
      } else {
        EList<Parameter> _children = it.getChildren();
        boolean _isEmpty = _children.isEmpty();
        _and = _isEmpty;
      }
      if (_and) {
        String _r_8 = r;
        String _name_8 = it.getName();
        String _firstLower_6 = StringExtensions.toFirstLower(_name_8);
        String _plus_28 = ("private JCheckBox " + _firstLower_6);
        String _plus_29 = (_plus_28 + "CheckBox = new JCheckBox();\n");
        r = (_r_8 + _plus_29);
      } else {
        String _r_9 = r;
        String _name_9 = it.getName();
        String _firstLower_7 = StringExtensions.toFirstLower(_name_9);
        String _plus_30 = ("private JTextField " + _firstLower_7);
        String _plus_31 = (_plus_30 + "TextField = new JTextField(\"");
        String _name_10 = it.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_10);
        String _plus_32 = (_plus_31 + _firstUpper);
        String _plus_33 = (_plus_32 + "\");\n");
        r = (_r_9 + _plus_33);
      }
    }
    EList<Parameter> _children_1 = it.getChildren();
    for (final Parameter c : _children_1) {
      String _r_10 = r;
      Object _generateJavaVariables = this.generateJavaVariables(c);
      r = (_r_10 + _generateJavaVariables);
    }
    return r;
  }
  
  public String addToJavaPanel(final Parameter it) {
    String r = "";
    String _r = r;
    String _name = it.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    String _plus = ("panel.add(" + _firstLower);
    String _plus_1 = (_plus + "Label, left);\n");
    r = (_r + _plus_1);
    Type _type = it.getType();
    EClass _eClass = _type.eClass();
    String _name_1 = _eClass.getName();
    boolean _equals = Objects.equal(_name_1, "Enum");
    if (_equals) {
      Type _type_1 = it.getType();
      final Configurator.Enum et = ((Configurator.Enum) _type_1);
      int _maxChosenValues = it.getMaxChosenValues();
      boolean _equals_1 = (_maxChosenValues == 1);
      if (_equals_1) {
        boolean _or = false;
        EList<Parameter> _children = it.getChildren();
        boolean _equals_2 = Objects.equal(_children, null);
        if (_equals_2) {
          _or = true;
        } else {
          EList<Parameter> _children_1 = it.getChildren();
          int _size = _children_1.size();
          boolean _equals_3 = (_size == 0);
          _or = _equals_3;
        }
        if (_or) {
          String _r_1 = r;
          String _name_2 = it.getName();
          String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
          String _plus_2 = ("panel.add(" + _firstLower_1);
          String _plus_3 = (_plus_2 + "ComboBox, right);\n");
          r = (_r_1 + _plus_3);
        } else {
          String _r_2 = r;
          r = (_r_2 + "panel.add(new JLabel(), right);\n");
        }
      } else {
        int _maxChosenValues_1 = it.getMaxChosenValues();
        boolean _greaterThan = (_maxChosenValues_1 > 1);
        if (_greaterThan) {
          boolean _or_1 = false;
          EList<Parameter> _children_2 = it.getChildren();
          boolean _equals_4 = Objects.equal(_children_2, null);
          if (_equals_4) {
            _or_1 = true;
          } else {
            EList<Parameter> _children_3 = it.getChildren();
            int _size_1 = _children_3.size();
            boolean _equals_5 = (_size_1 == 0);
            _or_1 = _equals_5;
          }
          if (_or_1) {
            String _r_3 = r;
            String _name_3 = it.getName();
            String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
            String _plus_4 = ("panel.add(" + _firstLower_2);
            String _plus_5 = (_plus_4 + "List, right);\n");
            r = (_r_3 + _plus_5);
          } else {
            String _r_4 = r;
            r = (_r_4 + "panel.add(new JLabel(), right);\n");
          }
        }
      }
    } else {
      boolean _and = false;
      Type _type_2 = it.getType();
      EClass _eClass_1 = _type_2.eClass();
      String _name_4 = _eClass_1.getName();
      boolean _equals_6 = Objects.equal(_name_4, "Boolean");
      if (!_equals_6) {
        _and = false;
      } else {
        EList<Parameter> _children_4 = it.getChildren();
        boolean _isEmpty = _children_4.isEmpty();
        _and = _isEmpty;
      }
      if (_and) {
        String _r_5 = r;
        String _name_5 = it.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_5);
        String _plus_6 = ("panel.add(" + _firstLower_3);
        String _plus_7 = (_plus_6 + "CheckBox, right);\n");
        r = (_r_5 + _plus_7);
      } else {
        boolean _or_2 = false;
        EList<Parameter> _children_5 = it.getChildren();
        boolean _equals_7 = Objects.equal(_children_5, null);
        if (_equals_7) {
          _or_2 = true;
        } else {
          EList<Parameter> _children_6 = it.getChildren();
          int _size_2 = _children_6.size();
          boolean _equals_8 = (_size_2 == 0);
          _or_2 = _equals_8;
        }
        if (_or_2) {
          String _r_6 = r;
          String _name_6 = it.getName();
          String _firstLower_4 = StringExtensions.toFirstLower(_name_6);
          String _plus_8 = ("panel.add(" + _firstLower_4);
          String _plus_9 = (_plus_8 + "TextField, right);\n");
          r = (_r_6 + _plus_9);
        } else {
          String _r_7 = r;
          r = (_r_7 + "panel.add(new JLabel(), right);\n");
        }
      }
    }
    EList<Parameter> _children_7 = it.getChildren();
    for (final Parameter c : _children_7) {
      String _r_8 = r;
      Object _addToJavaPanel = this.addToJavaPanel(c);
      r = (_r_8 + _addToJavaPanel);
    }
    return r;
  }
  
  public String generateJavaVariableStringValue(final Parameter it) {
    String _name = it.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    String _plus = ("s += " + _firstLower);
    String r = (_plus + "Label.getText() + \" : \";\n");
    Type _type = it.getType();
    EClass _eClass = _type.eClass();
    String _name_1 = _eClass.getName();
    boolean _equals = Objects.equal(_name_1, "Enum");
    if (_equals) {
      Type _type_1 = it.getType();
      final Configurator.Enum et = ((Configurator.Enum) _type_1);
      int _maxChosenValues = it.getMaxChosenValues();
      boolean _equals_1 = (_maxChosenValues == 1);
      if (_equals_1) {
        String _r = r;
        String _name_2 = it.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
        String _plus_1 = ("s += " + _firstLower_1);
        String _plus_2 = (_plus_1 + "ComboBox.getSelectedItem().toString();\n\n");
        r = (_r + _plus_2);
      } else {
        int _maxChosenValues_1 = it.getMaxChosenValues();
        boolean _greaterThan = (_maxChosenValues_1 > 1);
        if (_greaterThan) {
          String _r_1 = r;
          EList<Literal> _values = et.getValues();
          Literal _get = _values.get(0);
          String _enumValueJavaType = this.getEnumValueJavaType(_get);
          String _plus_3 = ("for(" + _enumValueJavaType);
          String _plus_4 = (_plus_3 + " p : ");
          String _name_3 = it.getName();
          String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
          String _plus_5 = (_plus_4 + _firstLower_2);
          String _plus_6 = (_plus_5 + "List.getSelectedValuesList())\n");
          r = (_r_1 + _plus_6);
          String _r_2 = r;
          r = (_r_2 + "\t s += String.valueOf(p) + \", \";\n\n");
        }
      }
    } else {
      boolean _and = false;
      Type _type_2 = it.getType();
      EClass _eClass_1 = _type_2.eClass();
      String _name_4 = _eClass_1.getName();
      boolean _equals_2 = Objects.equal(_name_4, "Boolean");
      if (!_equals_2) {
        _and = false;
      } else {
        EList<Parameter> _children = it.getChildren();
        boolean _isEmpty = _children.isEmpty();
        _and = _isEmpty;
      }
      if (_and) {
        String _r_3 = r;
        String _name_5 = it.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_5);
        String _plus_7 = ("s += String.valueOf(" + _firstLower_3);
        String _plus_8 = (_plus_7 + "CheckBox.isSelected());\n\n");
        r = (_r_3 + _plus_8);
      } else {
        boolean _or = false;
        EList<Parameter> _children_1 = it.getChildren();
        boolean _equals_3 = Objects.equal(_children_1, null);
        if (_equals_3) {
          _or = true;
        } else {
          EList<Parameter> _children_2 = it.getChildren();
          int _size = _children_2.size();
          boolean _equals_4 = (_size == 0);
          _or = _equals_4;
        }
        if (_or) {
          String _r_4 = r;
          String _name_6 = it.getName();
          String _firstLower_4 = StringExtensions.toFirstLower(_name_6);
          String _plus_9 = ("s += " + _firstLower_4);
          String _plus_10 = (_plus_9 + "TextField.getText();\n\n");
          r = (_r_4 + _plus_10);
        }
      }
    }
    EList<Parameter> _children_3 = it.getChildren();
    for (final Parameter c : _children_3) {
      String _r_5 = r;
      Object _generateJavaVariableStringValue = this.generateJavaVariableStringValue(c);
      r = (_r_5 + _generateJavaVariableStringValue);
    }
    return r;
  }
  
  public Object generateJavaConstraint(final Constraint it) {
    if ((it instanceof BinaryConstraint)) {
      final BinaryConstraint bc = ((BinaryConstraint) it);
      Constraint _leftOperand = bc.getLeftOperand();
      Object _generateJavaConstraint = this.generateJavaConstraint(_leftOperand);
      String _plus = ("(" + _generateJavaConstraint);
      String _plus_1 = (_plus + " ");
      BinaryOperator _operator = bc.getOperator();
      String _generateJavaOperator = this.generateJavaOperator(_operator);
      String _plus_2 = (_plus_1 + _generateJavaOperator);
      String _plus_3 = (_plus_2 + " ");
      Constraint _rightOperand = bc.getRightOperand();
      Object _generateJavaConstraint_1 = this.generateJavaConstraint(_rightOperand);
      String _plus_4 = (_plus_3 + _generateJavaConstraint_1);
      return (_plus_4 + ")");
    } else {
      if ((it instanceof Literal)) {
        if ((it instanceof Stringg)) {
          final Stringg v = ((Stringg) it);
          String _value = v.getValue();
          String _plus_5 = ("\"" + _value);
          return (_plus_5 + "\"");
        } else {
          if ((it instanceof Configurator.Integer)) {
            final Configurator.Integer v_1 = ((Configurator.Integer) it);
            return Integer.valueOf(v_1.getValue());
          } else {
            if ((it instanceof Configurator.Double)) {
              final Configurator.Double v_2 = ((Configurator.Double) it);
              return Double.valueOf(v_2.getValue());
            } else {
              final Configurator.Boolean v_3 = ((Configurator.Boolean) it);
              return Boolean.valueOf(v_3.isValue());
            }
          }
        }
      } else {
        final ParameterIdentifier id = ((ParameterIdentifier) it);
        Parameter _parameter = id.getParameter();
        return this.generateConstraintParamValueJava(_parameter);
      }
    }
  }
  
  public String generateConstraintParamValueJava(final Parameter it) {
    String ret = "";
    Type _type = it.getType();
    EClass _eClass = _type.eClass();
    String _name = _eClass.getName();
    boolean _equals = Objects.equal(_name, "Enum");
    if (_equals) {
      Type _type_1 = it.getType();
      Configurator.Enum et = ((Configurator.Enum) _type_1);
      int _maxChosenValues = it.getMaxChosenValues();
      boolean _equals_1 = (_maxChosenValues == 1);
      if (_equals_1) {
        String _ret = ret;
        EList<Literal> _values = et.getValues();
        Literal _get = _values.get(0);
        String _enumValueJavaType = this.getEnumValueJavaType(_get);
        String _plus = ("(" + _enumValueJavaType);
        String _plus_1 = (_plus + ")");
        String _name_1 = it.getName();
        String _firstLower = StringExtensions.toFirstLower(_name_1);
        String _plus_2 = (_plus_1 + _firstLower);
        String _plus_3 = (_plus_2 + "ComboBox.getSelectedItem()");
        ret = (_ret + _plus_3);
      }
    } else {
      boolean _and = false;
      Type _type_2 = it.getType();
      EClass _eClass_1 = _type_2.eClass();
      String _name_2 = _eClass_1.getName();
      boolean _equals_2 = Objects.equal(_name_2, "Boolean");
      if (!_equals_2) {
        _and = false;
      } else {
        EList<Parameter> _children = it.getChildren();
        boolean _isEmpty = _children.isEmpty();
        _and = _isEmpty;
      }
      if (_and) {
        String _ret_1 = ret;
        String _name_3 = it.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
        String _plus_4 = (_firstLower_1 + "CheckBox.isSelected()");
        ret = (_ret_1 + _plus_4);
      } else {
        String _ret_2 = ret;
        String _name_4 = it.getName();
        String _firstLower_2 = StringExtensions.toFirstLower(_name_4);
        String _plus_5 = (_firstLower_2 + "TextField.getText()");
        ret = (_ret_2 + _plus_5);
      }
    }
    return ret;
  }
  
  public String generateJavaOperator(final BinaryOperator it) {
    int _value = it.getValue();
    boolean _equals = (_value == 0);
    if (_equals) {
      return "&&";
    } else {
      int _value_1 = it.getValue();
      boolean _equals_1 = (_value_1 == 1);
      if (_equals_1) {
        return "||";
      } else {
        int _value_2 = it.getValue();
        boolean _equals_2 = (_value_2 == 2);
        if (_equals_2) {
          return "XOR";
        } else {
          int _value_3 = it.getValue();
          boolean _equals_3 = (_value_3 == 3);
          if (_equals_3) {
            return "==";
          } else {
            int _value_4 = it.getValue();
            boolean _equals_4 = (_value_4 == 4);
            if (_equals_4) {
              return "!=";
            } else {
              int _value_5 = it.getValue();
              boolean _equals_5 = (_value_5 == 5);
              if (_equals_5) {
                return ">";
              } else {
                int _value_6 = it.getValue();
                boolean _equals_6 = (_value_6 == 6);
                if (_equals_6) {
                  return "<";
                } else {
                  int _value_7 = it.getValue();
                  boolean _equals_7 = (_value_7 == 7);
                  if (_equals_7) {
                    return ">=";
                  } else {
                    return "<=";
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public CharSequence generateJavaRequiredFields(final Parameter it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _minChosenValues = it.getMinChosenValues();
      boolean _greaterThan = (_minChosenValues > 0);
      if (_greaterThan) {
        {
          Type _type = it.getType();
          EClass _eClass = _type.eClass();
          String _name = _eClass.getName();
          boolean _equals = Objects.equal(_name, "Enum");
          if (_equals) {
            {
              int _maxChosenValues = it.getMaxChosenValues();
              boolean _equals_1 = (_maxChosenValues == 1);
              if (_equals_1) {
                _builder.append("if(");
                String _name_1 = it.getName();
                String _firstLower = StringExtensions.toFirstLower(_name_1);
                _builder.append(_firstLower, "");
                _builder.append("ComboBox.getSelectedItem() == null)");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("s += \"");
                String _name_2 = it.getName();
                String _firstUpper = StringExtensions.toFirstUpper(_name_2);
                _builder.append(_firstUpper, "\t");
                _builder.append(" is required\";");
                _builder.newLineIfNotEmpty();
              } else {
                int _maxChosenValues_1 = it.getMaxChosenValues();
                boolean _greaterThan_1 = (_maxChosenValues_1 > 1);
                if (_greaterThan_1) {
                  _builder.append("if(");
                  String _name_3 = it.getName();
                  String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
                  _builder.append(_firstLower_1, "");
                  _builder.append("List.getSelectedValuesList() == null || ");
                  String _name_4 = it.getName();
                  String _firstLower_2 = StringExtensions.toFirstLower(_name_4);
                  _builder.append(_firstLower_2, "");
                  _builder.append("List.getSelectedValuesList().size() == 0)");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("s += \"");
                  String _name_5 = it.getName();
                  String _firstUpper_1 = StringExtensions.toFirstUpper(_name_5);
                  _builder.append(_firstUpper_1, "\t");
                  _builder.append(" must have at least \" + ");
                  int _minChosenValues_1 = it.getMinChosenValues();
                  _builder.append(_minChosenValues_1, "\t");
                  _builder.append(" + \" and max \" + ");
                  int _maxChosenValues_2 = it.getMaxChosenValues();
                  _builder.append(_maxChosenValues_2, "\t");
                  _builder.append(" + \" values\";");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          } else {
            boolean _and = false;
            Type _type_1 = it.getType();
            EClass _eClass_1 = _type_1.eClass();
            String _name_6 = _eClass_1.getName();
            boolean _notEquals = (!Objects.equal(_name_6, "Boolean"));
            if (!_notEquals) {
              _and = false;
            } else {
              Type _type_2 = it.getType();
              EClass _eClass_2 = _type_2.eClass();
              String _name_7 = _eClass_2.getName();
              boolean _notEquals_1 = (!Objects.equal(_name_7, "Enum"));
              _and = _notEquals_1;
            }
            if (_and) {
              _builder.append("if(");
              String _name_8 = it.getName();
              String _firstLower_3 = StringExtensions.toFirstLower(_name_8);
              _builder.append(_firstLower_3, "");
              _builder.append("TextField.getText() == null || ");
              String _name_9 = it.getName();
              String _firstLower_4 = StringExtensions.toFirstLower(_name_9);
              _builder.append(_firstLower_4, "");
              _builder.append("TextField.getText().length() == 0)");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("s += \"");
              String _name_10 = it.getName();
              String _firstUpper_2 = StringExtensions.toFirstUpper(_name_10);
              _builder.append(_firstUpper_2, "\t");
              _builder.append(" is required\";");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.newLine();
      }
    }
    {
      EList<Parameter> _children = it.getChildren();
      for(final Parameter c : _children) {
        Object _generateJavaRequiredFields = this.generateJavaRequiredFields(c);
        _builder.append(_generateJavaRequiredFields, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileToHtml(final ConfiguratorModel it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<link rel=\"stylesheet\" href=\"jqwidgets-ver3.8.0/jqwidgets/styles/jqx.base.css\" type=\"text/css\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/scripts/jquery-1.11.1.min.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/jqwidgets/jqxcore.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/jqwidgets/jqxbuttons.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/jqwidgets/jqxscrollbar.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/jqwidgets/jqxlistbox.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/jqwidgets/jqxcombobox.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _javaScript = this.getJavaScript(it);
    _builder.append(_javaScript, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("  \t\t\t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("  \t\t\t\t");
    _builder.append("<h2> ");
    String _name = it.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "  \t\t\t\t");
    _builder.append(" </h2>");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t\t");
    _builder.append("<hr/>");
    _builder.newLine();
    _builder.append("   \t\t\t\t");
    _builder.newLine();
    {
      EList<Parameter> _parameters = it.getParameters();
      for(final Parameter p : _parameters) {
        _builder.append("  \t\t\t\t");
        CharSequence _parametersHtml = this.getParametersHtml(p, 0);
        _builder.append(_parametersHtml, "  \t\t\t\t");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  \t\t\t\t");
    _builder.newLine();
    _builder.append("  \t\t\t\t");
    _builder.append("<br/><br/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<button type=\"button\" id=\'submitButton\'>Submit</button>");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getJavaScript(final ConfiguratorModel it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<script type=\'text/javascript\'>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$(document).ready(function(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Parameter> _parameters = it.getParameters();
      for(final Parameter p : _parameters) {
        String _parametersJavaScript = this.getParametersJavaScript(p);
        _builder.append(_parametersJavaScript, "");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function checkConstraints() { ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var valid = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    {
      EList<Parameter> _parameters_1 = it.getParameters();
      for(final Parameter p_1 : _parameters_1) {
        _builder.append("\t\t\t");
        String _mandatoryFields = this.getMandatoryFields(p_1);
        _builder.append(_mandatoryFields, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(valid === \"\") {");
    _builder.newLine();
    {
      EList<Constraint> _constraints = it.getConstraints();
      for(final Constraint c : _constraints) {
        _builder.append("\t\t\t\t");
        _builder.append("if(!(");
        Object _constraint = this.getConstraint(c);
        _builder.append(_constraint, "\t\t\t\t");
        _builder.append(")) ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("valid += \"Invalid constraint: \" + \"");
        Object _constraintText = this.getConstraintText(c);
        _builder.append(_constraintText, "\t\t\t\t\t\t");
        _builder.append(" \\n\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return valid;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function getText() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var text = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    {
      EList<Parameter> _parameters_2 = it.getParameters();
      for(final Parameter p_2 : _parameters_2) {
        String _parametersText = this.getParametersText(p_2);
        _builder.append(_parametersText, "");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  \t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return text;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$(\'#submitButton\').click(function(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var validationMsg = checkConstraints();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(validationMsg.length === 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("save();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("alert(validationMsg + \"\\n Please correct the values!\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function save() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var textToWrite = getText();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var textFileAsBlob = new Blob([textToWrite], {type:\'text/plain\'});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var fileNameToSaveAs = \"config.txt\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var downloadLink = document.createElement(\"a\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("downloadLink.download = fileNameToSaveAs;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("downloadLink.innerHTML = \"Download File\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (window.webkitURL != null) {\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("downloadLink.href = window.URL.createObjectURL(textFileAsBlob);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("downloadLink.onclick = destroyClickedElement;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("downloadLink.style.display = \"none\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("document.body.appendChild(downloadLink);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("downloadLink.click();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function destroyClickedElement(event){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("document.body.removeChild(event.target);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("</script>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getParametersHtml(final Parameter it, final int level) {
    CharSequence _xblockexpression = null;
    {
      int header = (3 + level);
      if ((header > 6)) {
        header = 6;
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<h");
      _builder.append(header, "");
      _builder.append(">");
      String _name = it.getName();
      String _firstUpper = StringExtensions.toFirstUpper(_name);
      _builder.append(_firstUpper, "");
      _builder.append(":</h");
      _builder.append(header, "");
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      {
        int _maxChosenValues = it.getMaxChosenValues();
        boolean _greaterThan = (_maxChosenValues > 0);
        if (_greaterThan) {
          {
            Type _type = it.getType();
            EClass _eClass = _type.eClass();
            String _name_1 = _eClass.getName();
            boolean _equals = Objects.equal(_name_1, "Enum");
            if (_equals) {
              {
                int _maxChosenValues_1 = it.getMaxChosenValues();
                boolean _equals_1 = (_maxChosenValues_1 == 1);
                if (_equals_1) {
                  _builder.append("<div id=\'");
                  String _name_2 = it.getName();
                  String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
                  _builder.append(_firstUpper_1, "");
                  _builder.append("\' class=\'combobox\'>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("</div>");
                  _builder.newLine();
                } else {
                  _builder.append("<div id=\'");
                  String _name_3 = it.getName();
                  String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
                  _builder.append(_firstUpper_2, "");
                  _builder.append("\' class=\'listbox\'>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("</div>");
                  _builder.newLine();
                }
              }
            } else {
              _builder.append("<form>");
              _builder.newLine();
              {
                boolean _or = false;
                Type _type_1 = it.getType();
                EClass _eClass_1 = _type_1.eClass();
                String _name_4 = _eClass_1.getName();
                boolean _equals_2 = Objects.equal(_name_4, "Integer");
                if (_equals_2) {
                  _or = true;
                } else {
                  Type _type_2 = it.getType();
                  EClass _eClass_2 = _type_2.eClass();
                  String _name_5 = _eClass_2.getName();
                  boolean _equals_3 = Objects.equal(_name_5, "Double");
                  _or = _equals_3;
                }
                if (_or) {
                  _builder.append("<input type=\'number\' name=\'");
                  String _name_6 = it.getName();
                  String _firstUpper_3 = StringExtensions.toFirstUpper(_name_6);
                  _builder.append(_firstUpper_3, "");
                  _builder.append("\' id=\'");
                  String _name_7 = it.getName();
                  String _firstUpper_4 = StringExtensions.toFirstUpper(_name_7);
                  _builder.append(_firstUpper_4, "");
                  _builder.append("\'/>");
                  _builder.newLineIfNotEmpty();
                } else {
                  Type _type_3 = it.getType();
                  EClass _eClass_3 = _type_3.eClass();
                  String _name_8 = _eClass_3.getName();
                  boolean _equals_4 = Objects.equal(_name_8, "Stringg");
                  if (_equals_4) {
                    _builder.append("<input type=\'text\' name=\'");
                    String _name_9 = it.getName();
                    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_9);
                    _builder.append(_firstUpper_5, "");
                    _builder.append("\' id=\'");
                    String _name_10 = it.getName();
                    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_10);
                    _builder.append(_firstUpper_6, "");
                    _builder.append("\'/>");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Type _type_4 = it.getType();
                    EClass _eClass_4 = _type_4.eClass();
                    String _name_11 = _eClass_4.getName();
                    boolean _equals_5 = Objects.equal(_name_11, "Boolean");
                    if (_equals_5) {
                      _builder.append("<input type=\'checkbox\' name=\'");
                      String _name_12 = it.getName();
                      String _firstUpper_7 = StringExtensions.toFirstUpper(_name_12);
                      _builder.append(_firstUpper_7, "");
                      _builder.append("\' id=\'");
                      String _name_13 = it.getName();
                      String _firstUpper_8 = StringExtensions.toFirstUpper(_name_13);
                      _builder.append(_firstUpper_8, "");
                      _builder.append("\'/>");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.append("</form>");
              _builder.newLine();
            }
          }
        }
      }
      _builder.newLine();
      {
        EList<Parameter> _children = it.getChildren();
        boolean _isEmpty = _children.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          {
            EList<Parameter> _children_1 = it.getChildren();
            for(final Parameter c : _children_1) {
              Object _parametersHtml = this.getParametersHtml(c, (level + 1));
              _builder.append(_parametersHtml, "");
              _builder.append(" ");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public String getParametersJavaScript(final Parameter it) {
    String ret = "";
    Type _type = it.getType();
    if ((_type instanceof Configurator.Enum)) {
      Type _type_1 = it.getType();
      final Configurator.Enum enumType = ((Configurator.Enum) _type_1);
      String _ret = ret;
      String _name = it.getName();
      String _firstUpper = StringExtensions.toFirstUpper(_name);
      String _plus = ("\t\tvar $" + _firstUpper);
      String _plus_1 = (_plus + "Values = [");
      ret = (_ret + _plus_1);
      EList<Literal> _values = enumType.getValues();
      for (final Literal eval : _values) {
        EList<Literal> _values_1 = enumType.getValues();
        EList<Literal> _values_2 = enumType.getValues();
        int _size = _values_2.size();
        int _minus = (_size - 1);
        Literal _get = _values_1.get(_minus);
        boolean _equals = Objects.equal(eval, _get);
        if (_equals) {
          String _ret_1 = ret;
          String _enumValue = this.getEnumValue(eval, true);
          ret = (_ret_1 + _enumValue);
        } else {
          String _ret_2 = ret;
          String _enumValue_1 = this.getEnumValue(eval, false);
          String _plus_2 = (_enumValue_1 + " ");
          ret = (_ret_2 + _plus_2);
        }
      }
      String _ret_3 = ret;
      ret = (_ret_3 + "]; \n");
      int _maxChosenValues = it.getMaxChosenValues();
      boolean _equals_1 = (_maxChosenValues == 1);
      if (_equals_1) {
        String _ret_4 = ret;
        String _name_1 = it.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
        String _plus_3 = ("\t\t$(\"#" + _firstUpper_1);
        String _plus_4 = (_plus_3 + "\").jqxComboBox({ source: $");
        String _name_2 = it.getName();
        String _firstUpper_2 = StringExtensions.toFirstUpper(_name_2);
        String _plus_5 = (_plus_4 + _firstUpper_2);
        String _plus_6 = (_plus_5 + "Values, width: \'200px\', height: \'25px\',}); \n\n");
        ret = (_ret_4 + _plus_6);
      } else {
        String _ret_5 = ret;
        String _name_3 = it.getName();
        String _firstUpper_3 = StringExtensions.toFirstUpper(_name_3);
        String _plus_7 = ("\t\t$(\"#" + _firstUpper_3);
        String _plus_8 = (_plus_7 + "\").jqxListBox({ source: $");
        String _name_4 = it.getName();
        String _firstUpper_4 = StringExtensions.toFirstUpper(_name_4);
        String _plus_9 = (_plus_8 + _firstUpper_4);
        String _plus_10 = (_plus_9 + "Values, width: \'200px\', height: \'150px\', multiple: true}); \n\n");
        ret = (_ret_5 + _plus_10);
      }
    }
    EList<Parameter> _children = it.getChildren();
    boolean _isEmpty = _children.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Parameter> _children_1 = it.getChildren();
      for (final Parameter c : _children_1) {
        String _ret_6 = ret;
        Object _parametersJavaScript = this.getParametersJavaScript(c);
        ret = (_ret_6 + _parametersJavaScript);
      }
    }
    return ret;
  }
  
  public String getEnumValue(final Literal it, final boolean islast) {
    String ret = "";
    if ((it instanceof Configurator.Integer)) {
      final Configurator.Integer intVal = ((Configurator.Integer) it);
      String _ret = ret;
      int _value = intVal.getValue();
      ret = (_ret + Integer.valueOf(_value));
      if ((!islast)) {
        String _ret_1 = ret;
        ret = (_ret_1 + ",");
      }
    } else {
      if ((it instanceof Configurator.Double)) {
        final Configurator.Double doubleVal = ((Configurator.Double) it);
        String _ret_2 = ret;
        double _value_1 = doubleVal.getValue();
        ret = (_ret_2 + Double.valueOf(_value_1));
        if ((!islast)) {
          String _ret_3 = ret;
          ret = (_ret_3 + ",");
        }
      } else {
        if ((it instanceof Configurator.Boolean)) {
          final Configurator.Boolean boolVal = ((Configurator.Boolean) it);
          String _ret_4 = ret;
          boolean _isValue = boolVal.isValue();
          ret = (_ret_4 + Boolean.valueOf(_isValue));
          if ((!islast)) {
            String _ret_5 = ret;
            ret = (_ret_5 + ",");
          }
        } else {
          if ((it instanceof Stringg)) {
            final Stringg stringlVal = ((Stringg) it);
            String _ret_6 = ret;
            String _value_2 = stringlVal.getValue();
            String _plus = ("\"" + _value_2);
            String _plus_1 = (_plus + "\"");
            ret = (_ret_6 + _plus_1);
            if ((!islast)) {
              String _ret_7 = ret;
              ret = (_ret_7 + ",");
            }
          }
        }
      }
    }
    return ret;
  }
  
  public String getParametersText(final Parameter it) {
    String ret = "";
    int _maxChosenValues = it.getMaxChosenValues();
    boolean _greaterThan = (_maxChosenValues > 0);
    if (_greaterThan) {
      Type _type = it.getType();
      EClass _eClass = _type.eClass();
      String _name = _eClass.getName();
      boolean _equals = Objects.equal(_name, "Enum");
      if (_equals) {
        int _maxChosenValues_1 = it.getMaxChosenValues();
        boolean _equals_1 = (_maxChosenValues_1 == 1);
        if (_equals_1) {
          String _ret = ret;
          String _name_1 = it.getName();
          String _firstUpper = StringExtensions.toFirstUpper(_name_1);
          String _plus = ("\t\t\ttext += \"" + _firstUpper);
          String _plus_1 = (_plus + ": \" + $(\"#");
          String _name_2 = it.getName();
          String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
          String _plus_2 = (_plus_1 + _firstUpper_1);
          String _plus_3 = (_plus_2 + "\").jqxComboBox(\'getSelectedItem\').value + \" \\r\\n\"; \n");
          ret = (_ret + _plus_3);
        } else {
          String _ret_1 = ret;
          ret = (_ret_1 + "\n");
          String _ret_2 = ret;
          String _name_3 = it.getName();
          String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
          String _plus_4 = ("\t\t\tvar items" + _firstUpper_2);
          String _plus_5 = (_plus_4 + " = $(\"#");
          String _name_4 = it.getName();
          String _firstUpper_3 = StringExtensions.toFirstUpper(_name_4);
          String _plus_6 = (_plus_5 + _firstUpper_3);
          String _plus_7 = (_plus_6 + "\").jqxListBox(\'getSelectedItems\'); \n");
          ret = (_ret_2 + _plus_7);
          String _ret_3 = ret;
          String _name_5 = it.getName();
          String _firstUpper_4 = StringExtensions.toFirstUpper(_name_5);
          String _plus_8 = ("\t\t\ttext += \"" + _firstUpper_4);
          String _plus_9 = (_plus_8 + ": \"; \n");
          ret = (_ret_3 + _plus_9);
          String _ret_4 = ret;
          String _name_6 = it.getName();
          String _firstUpper_5 = StringExtensions.toFirstUpper(_name_6);
          String _plus_10 = ("\t\t\tjQuery.each(items" + _firstUpper_5);
          String _plus_11 = (_plus_10 + ", function(index, value){ \n");
          ret = (_ret_4 + _plus_11);
          String _ret_5 = ret;
          ret = (_ret_5 + "\t\t\t\ttext += this.value + \", \" \n");
          String _ret_6 = ret;
          ret = (_ret_6 + "\t\t\t}); \n");
          String _ret_7 = ret;
          ret = (_ret_7 + "\t\t\ttext += \" \\r\\n\"; \n");
        }
      } else {
        Type _type_1 = it.getType();
        EClass _eClass_1 = _type_1.eClass();
        String _name_7 = _eClass_1.getName();
        boolean _equals_2 = Objects.equal(_name_7, "Boolean");
        if (_equals_2) {
          String _ret_8 = ret;
          String _name_8 = it.getName();
          String _firstUpper_6 = StringExtensions.toFirstUpper(_name_8);
          String _plus_12 = ("\t\t\ttext += \"" + _firstUpper_6);
          String _plus_13 = (_plus_12 + ": \" + $(\"#");
          String _name_9 = it.getName();
          String _firstUpper_7 = StringExtensions.toFirstUpper(_name_9);
          String _plus_14 = (_plus_13 + _firstUpper_7);
          String _plus_15 = (_plus_14 + "\").prop(\'checked\') + \" \\r\\n\"; \n");
          ret = (_ret_8 + _plus_15);
        } else {
          String _ret_9 = ret;
          String _name_10 = it.getName();
          String _firstUpper_8 = StringExtensions.toFirstUpper(_name_10);
          String _plus_16 = ("\t\t\ttext += \"" + _firstUpper_8);
          String _plus_17 = (_plus_16 + ": \" + $(\"#");
          String _name_11 = it.getName();
          String _firstUpper_9 = StringExtensions.toFirstUpper(_name_11);
          String _plus_18 = (_plus_17 + _firstUpper_9);
          String _plus_19 = (_plus_18 + "\").val() + \" \\r\\n\"; \n");
          ret = (_ret_9 + _plus_19);
        }
      }
    } else {
      String _ret_10 = ret;
      String _name_12 = it.getName();
      String _firstUpper_10 = StringExtensions.toFirstUpper(_name_12);
      String _plus_20 = ("\t\t\ttext += \"" + _firstUpper_10);
      String _plus_21 = (_plus_20 + ": \" + \"\\r\\n\"; \n");
      ret = (_ret_10 + _plus_21);
    }
    EList<Parameter> _children = it.getChildren();
    boolean _isEmpty = _children.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Parameter> _children_1 = it.getChildren();
      for (final Parameter c : _children_1) {
        String _ret_11 = ret;
        Object _parametersText = this.getParametersText(c);
        ret = (_ret_11 + _parametersText);
      }
    }
    return ret;
  }
  
  public String getMandatoryFields(final Parameter it) {
    String ret = "";
    int _minChosenValues = it.getMinChosenValues();
    boolean _greaterThan = (_minChosenValues > 0);
    if (_greaterThan) {
      Type _type = it.getType();
      EClass _eClass = _type.eClass();
      String _name = _eClass.getName();
      boolean _equals = Objects.equal(_name, "Enum");
      if (_equals) {
        int _maxChosenValues = it.getMaxChosenValues();
        boolean _equals_1 = (_maxChosenValues == 1);
        if (_equals_1) {
          String _ret = ret;
          String _name_1 = it.getName();
          String _firstUpper = StringExtensions.toFirstUpper(_name_1);
          String _plus = ("if($(\"#" + _firstUpper);
          String _plus_1 = (_plus + "\").jqxComboBox(\'getSelectedItem\') === null) valid += \"");
          String _name_2 = it.getName();
          String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
          String _plus_2 = (_plus_1 + _firstUpper_1);
          String _plus_3 = (_plus_2 + " must be selected! \\n\"; \n");
          ret = (_ret + _plus_3);
        } else {
          int _maxChosenValues_1 = it.getMaxChosenValues();
          boolean _greaterThan_1 = (_maxChosenValues_1 > 1);
          if (_greaterThan_1) {
            String _ret_1 = ret;
            String _name_3 = it.getName();
            String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
            String _plus_4 = ("var items" + _firstUpper_2);
            String _plus_5 = (_plus_4 + " = $(\"#");
            String _name_4 = it.getName();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_name_4);
            String _plus_6 = (_plus_5 + _firstUpper_3);
            String _plus_7 = (_plus_6 + "\").jqxListBox(\'getSelectedItems\'); \n");
            ret = (_ret_1 + _plus_7);
            String _ret_2 = ret;
            String _name_5 = it.getName();
            String _firstUpper_4 = StringExtensions.toFirstUpper(_name_5);
            String _plus_8 = ("if(items" + _firstUpper_4);
            String _plus_9 = (_plus_8 + ".length < ");
            int _minChosenValues_1 = it.getMinChosenValues();
            String _plus_10 = (_plus_9 + Integer.valueOf(_minChosenValues_1));
            String _plus_11 = (_plus_10 + ") valid += \"At least ");
            int _minChosenValues_2 = it.getMinChosenValues();
            String _plus_12 = (_plus_11 + Integer.valueOf(_minChosenValues_2));
            String _plus_13 = (_plus_12 + " values of ");
            String _name_6 = it.getName();
            String _firstUpper_5 = StringExtensions.toFirstUpper(_name_6);
            String _plus_14 = (_plus_13 + _firstUpper_5);
            String _plus_15 = (_plus_14 + " must be selected! \\n\"; \n");
            ret = (_ret_2 + _plus_15);
            String _ret_3 = ret;
            String _name_7 = it.getName();
            String _firstUpper_6 = StringExtensions.toFirstUpper(_name_7);
            String _plus_16 = ("if(items" + _firstUpper_6);
            String _plus_17 = (_plus_16 + ".length > ");
            int _maxChosenValues_2 = it.getMaxChosenValues();
            String _plus_18 = (_plus_17 + Integer.valueOf(_maxChosenValues_2));
            String _plus_19 = (_plus_18 + ") valid += \"No more than ");
            int _maxChosenValues_3 = it.getMaxChosenValues();
            String _plus_20 = (_plus_19 + Integer.valueOf(_maxChosenValues_3));
            String _plus_21 = (_plus_20 + " values of ");
            String _name_8 = it.getName();
            String _firstUpper_7 = StringExtensions.toFirstUpper(_name_8);
            String _plus_22 = (_plus_21 + _firstUpper_7);
            String _plus_23 = (_plus_22 + " must be selected! \\n\"; \n");
            ret = (_ret_3 + _plus_23);
          }
        }
      } else {
        Type _type_1 = it.getType();
        EClass _eClass_1 = _type_1.eClass();
        String _name_9 = _eClass_1.getName();
        boolean _notEquals = (!Objects.equal(_name_9, "Boolean"));
        if (_notEquals) {
          String _ret_4 = ret;
          String _name_10 = it.getName();
          String _firstUpper_8 = StringExtensions.toFirstUpper(_name_10);
          String _plus_24 = ("if($(\"#" + _firstUpper_8);
          String _plus_25 = (_plus_24 + "\").val() === \"\") valid += \"");
          String _name_11 = it.getName();
          String _firstUpper_9 = StringExtensions.toFirstUpper(_name_11);
          String _plus_26 = (_plus_25 + _firstUpper_9);
          String _plus_27 = (_plus_26 + " must be filled! \\n\"; \n");
          ret = (_ret_4 + _plus_27);
        }
      }
    }
    EList<Parameter> _children = it.getChildren();
    boolean _isEmpty = _children.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Parameter> _children_1 = it.getChildren();
      for (final Parameter c : _children_1) {
        String _ret_5 = ret;
        Object _mandatoryFields = this.getMandatoryFields(c);
        ret = (_ret_5 + _mandatoryFields);
      }
    }
    return ret;
  }
  
  public Object getConstraint(final Constraint it) {
    if ((it instanceof BinaryConstraint)) {
      final BinaryConstraint binCon = ((BinaryConstraint) it);
      Constraint _leftOperand = binCon.getLeftOperand();
      Object _constraint = this.getConstraint(_leftOperand);
      String _plus = ("(" + _constraint);
      String _plus_1 = (_plus + " ");
      BinaryOperator _operator = binCon.getOperator();
      String _operatorSign = this.getOperatorSign(_operator);
      String _plus_2 = (_plus_1 + _operatorSign);
      String _plus_3 = (_plus_2 + " ");
      Constraint _rightOperand = binCon.getRightOperand();
      Object _constraint_1 = this.getConstraint(_rightOperand);
      String _plus_4 = (_plus_3 + _constraint_1);
      return (_plus_4 + ")");
    } else {
      if ((it instanceof Literal)) {
        if ((it instanceof Stringg)) {
          final Stringg stringVal = ((Stringg) it);
          String _value = stringVal.getValue();
          String _plus_5 = ("\"" + _value);
          return (_plus_5 + "\"");
        } else {
          if ((it instanceof Configurator.Integer)) {
            final Configurator.Integer intVal = ((Configurator.Integer) it);
            return Integer.valueOf(intVal.getValue());
          } else {
            if ((it instanceof Configurator.Double)) {
              final Configurator.Double doubleVal = ((Configurator.Double) it);
              return Double.valueOf(doubleVal.getValue());
            } else {
              final Configurator.Boolean boolVal = ((Configurator.Boolean) it);
              return Boolean.valueOf(boolVal.isValue());
            }
          }
        }
      } else {
        final ParameterIdentifier id = ((ParameterIdentifier) it);
        Parameter _parameter = id.getParameter();
        return this.getConstraintParamValue(_parameter);
      }
    }
  }
  
  public String getOperatorSign(final BinaryOperator it) {
    int _value = it.getValue();
    boolean _equals = (_value == 0);
    if (_equals) {
      return "&&";
    } else {
      int _value_1 = it.getValue();
      boolean _equals_1 = (_value_1 == 1);
      if (_equals_1) {
        return "||";
      } else {
        int _value_2 = it.getValue();
        boolean _equals_2 = (_value_2 == 2);
        if (_equals_2) {
          return "XOR";
        } else {
          int _value_3 = it.getValue();
          boolean _equals_3 = (_value_3 == 3);
          if (_equals_3) {
            return "===";
          } else {
            int _value_4 = it.getValue();
            boolean _equals_4 = (_value_4 == 4);
            if (_equals_4) {
              return "!=";
            } else {
              int _value_5 = it.getValue();
              boolean _equals_5 = (_value_5 == 5);
              if (_equals_5) {
                return ">";
              } else {
                int _value_6 = it.getValue();
                boolean _equals_6 = (_value_6 == 6);
                if (_equals_6) {
                  return "<";
                } else {
                  int _value_7 = it.getValue();
                  boolean _equals_7 = (_value_7 == 7);
                  if (_equals_7) {
                    return ">=";
                  } else {
                    return "<=";
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public String getConstraintParamValue(final Parameter it) {
    String ret = "";
    Type _type = it.getType();
    EClass _eClass = _type.eClass();
    String _name = _eClass.getName();
    boolean _equals = Objects.equal(_name, "Enum");
    if (_equals) {
      int _maxChosenValues = it.getMaxChosenValues();
      boolean _equals_1 = (_maxChosenValues == 1);
      if (_equals_1) {
        String _ret = ret;
        String _name_1 = it.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_1);
        String _plus = ("$(\"#" + _firstUpper);
        String _plus_1 = (_plus + "\").jqxComboBox(\'getSelectedItem\').value");
        ret = (_ret + _plus_1);
      }
    } else {
      Type _type_1 = it.getType();
      EClass _eClass_1 = _type_1.eClass();
      String _name_2 = _eClass_1.getName();
      boolean _equals_2 = Objects.equal(_name_2, "Boolean");
      if (_equals_2) {
        String _ret_1 = ret;
        String _name_3 = it.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_3);
        String _plus_2 = ("$(\"#" + _firstUpper_1);
        String _plus_3 = (_plus_2 + "\").prop(\'checked\')");
        ret = (_ret_1 + _plus_3);
      } else {
        String _ret_2 = ret;
        String _name_4 = it.getName();
        String _firstUpper_2 = StringExtensions.toFirstUpper(_name_4);
        String _plus_4 = ("$(\"#" + _firstUpper_2);
        String _plus_5 = (_plus_4 + "\").val()");
        ret = (_ret_2 + _plus_5);
      }
    }
    return ret;
  }
  
  public Object getConstraintText(final Constraint it) {
    if ((it instanceof BinaryConstraint)) {
      final BinaryConstraint binCon = ((BinaryConstraint) it);
      Constraint _leftOperand = binCon.getLeftOperand();
      Object _constraintText = this.getConstraintText(_leftOperand);
      String _plus = ("(" + _constraintText);
      String _plus_1 = (_plus + " ");
      BinaryOperator _operator = binCon.getOperator();
      String _operatorSign = this.getOperatorSign(_operator);
      String _plus_2 = (_plus_1 + _operatorSign);
      String _plus_3 = (_plus_2 + " ");
      Constraint _rightOperand = binCon.getRightOperand();
      Object _constraintText_1 = this.getConstraintText(_rightOperand);
      String _plus_4 = (_plus_3 + _constraintText_1);
      return (_plus_4 + ")");
    } else {
      if ((it instanceof Stringg)) {
        final Stringg stringVal = ((Stringg) it);
        String _value = stringVal.getValue();
        return ("String." + _value);
      } else {
        if ((it instanceof ParameterIdentifier)) {
          final ParameterIdentifier id = ((ParameterIdentifier) it);
          Parameter _parameter = id.getParameter();
          return _parameter.getName();
        } else {
          return this.getConstraint(it);
        }
      }
    }
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    Model m = ((Model) _head);
    EList<ConfiguratorModel> _configuratorModels = m.getConfiguratorModels();
    for (final ConfiguratorModel root : _configuratorModels) {
      {
        String _name = root.getName();
        String _plus = (_name + ".html");
        CharSequence _compileToHtml = this.compileToHtml(root);
        fsa.generateFile(_plus, _compileToHtml);
        String _name_1 = root.getName();
        String _plus_1 = (_name_1 + ".java");
        CharSequence _compileToJava = this.compileToJava(root);
        fsa.generateFile(_plus_1, _compileToJava);
      }
    }
  }
}
