/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator;

import Configurator.BinaryConstraint;
import Configurator.BinaryOperator;
import Configurator.ConfiguratorModel;
import Configurator.Constraint;
import Configurator.Literal;
import Configurator.Model;
import Configurator.Parameter;
import Configurator.ParameterIdentifier;
import Configurator.Stringg;
import Configurator.Type;
import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class MyDslGenerator implements IGenerator {
  public CharSequence compileToHtml(final ConfiguratorModel it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<link rel=\"stylesheet\" href=\"jqwidgets-ver3.8.0/jqwidgets/styles/jqx.base.css\" type=\"text/css\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/scripts/jquery-1.11.1.min.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/jqwidgets/jqxcore.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/jqwidgets/jqxbuttons.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/jqwidgets/jqxscrollbar.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/jqwidgets/jqxlistbox.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" src=\"jqwidgets-ver3.8.0/jqwidgets/jqxcombobox.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _javaScript = this.getJavaScript(it);
    _builder.append(_javaScript, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("  \t\t\t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("  \t\t\t\t");
    _builder.append("<h2> ");
    String _name = it.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "  \t\t\t\t");
    _builder.append(" </h2>");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t\t");
    _builder.append("<hr/>");
    _builder.newLine();
    _builder.append("   \t\t\t\t");
    _builder.newLine();
    {
      EList<Parameter> _parameters = it.getParameters();
      for(final Parameter p : _parameters) {
        _builder.append("  \t\t\t\t");
        CharSequence _parametersHtml = this.getParametersHtml(p, 0);
        _builder.append(_parametersHtml, "  \t\t\t\t");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  \t\t\t\t");
    _builder.newLine();
    _builder.append("  \t\t\t\t");
    _builder.append("<br/><br/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<button type=\"button\" id=\'submitButton\'>Submit</button>");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getJavaScript(final ConfiguratorModel it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<script type=\'text/javascript\'>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$(document).ready(function(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Parameter> _parameters = it.getParameters();
      for(final Parameter p : _parameters) {
        String _parametersJavaScript = this.getParametersJavaScript(p);
        _builder.append(_parametersJavaScript, "");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function checkConstraints() { ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var valid = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    {
      EList<Parameter> _parameters_1 = it.getParameters();
      for(final Parameter p_1 : _parameters_1) {
        _builder.append("\t\t\t\t");
        CharSequence _mandatoryFields = this.getMandatoryFields(p_1);
        _builder.append(_mandatoryFields, "\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(valid === \"\") {");
    _builder.newLine();
    {
      EList<Constraint> _constraints = it.getConstraints();
      for(final Constraint c : _constraints) {
        _builder.append("\t\t\t\t\t");
        _builder.append("if(!(");
        CharSequence _constraint = this.getConstraint(c);
        _builder.append(_constraint, "\t\t\t\t\t");
        _builder.append(")) valid += \"Invalid constraint: \" + \"");
        CharSequence _constraintText = this.getConstraintText(c);
        _builder.append(_constraintText, "\t\t\t\t\t");
        _builder.append(" \\n\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return valid;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function getText() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var text = \"\";");
    _builder.newLine();
    {
      EList<Parameter> _parameters_2 = it.getParameters();
      for(final Parameter p_2 : _parameters_2) {
        CharSequence _parametersText = this.getParametersText(p_2);
        _builder.append(_parametersText, "");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("return text;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$(\'#submitButton\').click(function(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var validationMsg = checkConstraints();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(validationMsg.length === 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("save();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("alert(validationMsg + \"\\n Please correct the values!\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function save() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var textToWrite = getText();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var textFileAsBlob = new Blob([textToWrite], {type:\'text/plain\'});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var fileNameToSaveAs = \"config.txt\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var downloadLink = document.createElement(\"a\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("downloadLink.download = fileNameToSaveAs;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("downloadLink.innerHTML = \"Download File\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (window.webkitURL != null) {\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("downloadLink.href = window.URL.createObjectURL(textFileAsBlob);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("downloadLink.onclick = destroyClickedElement;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("downloadLink.style.display = \"none\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("document.body.appendChild(downloadLink);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("downloadLink.click();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function destroyClickedElement(event){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("document.body.removeChild(event.target);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("</script>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getParametersHtml(final Parameter it, final int level) {
    CharSequence _xblockexpression = null;
    {
      int header = (3 + level);
      if ((header > 6)) {
        header = 6;
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<h");
      _builder.append(header, "");
      _builder.append(">");
      String _name = it.getName();
      String _firstUpper = StringExtensions.toFirstUpper(_name);
      _builder.append(_firstUpper, "");
      _builder.append(":</h");
      _builder.append(header, "");
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      {
        int _minChosenValues = it.getMinChosenValues();
        boolean _greaterThan = (_minChosenValues > 0);
        if (_greaterThan) {
          {
            Type _type = it.getType();
            EClass _eClass = _type.eClass();
            String _name_1 = _eClass.getName();
            boolean _equals = Objects.equal(_name_1, "Enum");
            if (_equals) {
              {
                int _maxChosenValues = it.getMaxChosenValues();
                boolean _equals_1 = (_maxChosenValues == 1);
                if (_equals_1) {
                  _builder.append("<div id=\'");
                  String _name_2 = it.getName();
                  String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
                  _builder.append(_firstUpper_1, "");
                  _builder.append("\' class=\'combobox\'>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("</div>");
                  _builder.newLine();
                } else {
                  _builder.append("<div id=\'");
                  String _name_3 = it.getName();
                  String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
                  _builder.append(_firstUpper_2, "");
                  _builder.append("\' class=\'listbox\'>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("</div>");
                  _builder.newLine();
                }
              }
            } else {
              _builder.append("<form>");
              _builder.newLine();
              {
                boolean _or = false;
                Type _type_1 = it.getType();
                EClass _eClass_1 = _type_1.eClass();
                String _name_4 = _eClass_1.getName();
                boolean _equals_2 = Objects.equal(_name_4, "Integer");
                if (_equals_2) {
                  _or = true;
                } else {
                  Type _type_2 = it.getType();
                  EClass _eClass_2 = _type_2.eClass();
                  String _name_5 = _eClass_2.getName();
                  boolean _equals_3 = Objects.equal(_name_5, "Double");
                  _or = _equals_3;
                }
                if (_or) {
                  _builder.append("<input type=\'number\' name=\'");
                  String _name_6 = it.getName();
                  String _firstUpper_3 = StringExtensions.toFirstUpper(_name_6);
                  _builder.append(_firstUpper_3, "");
                  _builder.append("\' id=\'");
                  String _name_7 = it.getName();
                  String _firstUpper_4 = StringExtensions.toFirstUpper(_name_7);
                  _builder.append(_firstUpper_4, "");
                  _builder.append("\'/>");
                  _builder.newLineIfNotEmpty();
                } else {
                  Type _type_3 = it.getType();
                  EClass _eClass_3 = _type_3.eClass();
                  String _name_8 = _eClass_3.getName();
                  boolean _equals_4 = Objects.equal(_name_8, "Stringg");
                  if (_equals_4) {
                    _builder.append("<input type=\'text\' name=\'");
                    String _name_9 = it.getName();
                    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_9);
                    _builder.append(_firstUpper_5, "");
                    _builder.append("\' id=\'");
                    String _name_10 = it.getName();
                    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_10);
                    _builder.append(_firstUpper_6, "");
                    _builder.append("\'/>");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Type _type_4 = it.getType();
                    EClass _eClass_4 = _type_4.eClass();
                    String _name_11 = _eClass_4.getName();
                    boolean _equals_5 = Objects.equal(_name_11, "Boolean");
                    if (_equals_5) {
                      _builder.append("<input type=\'checkbox\' name=\'");
                      String _name_12 = it.getName();
                      String _firstUpper_7 = StringExtensions.toFirstUpper(_name_12);
                      _builder.append(_firstUpper_7, "");
                      _builder.append("\' id=\'");
                      String _name_13 = it.getName();
                      String _firstUpper_8 = StringExtensions.toFirstUpper(_name_13);
                      _builder.append(_firstUpper_8, "");
                      _builder.append("\'/>");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.append("</form>");
              _builder.newLine();
            }
          }
        }
      }
      _builder.newLine();
      {
        EList<Parameter> _children = it.getChildren();
        boolean _isEmpty = _children.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          {
            EList<Parameter> _children_1 = it.getChildren();
            for(final Parameter c : _children_1) {
              Object _parametersHtml = this.getParametersHtml(c, (level + 1));
              _builder.append(_parametersHtml, "");
              _builder.append(" ");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public String getParametersJavaScript(final Parameter it) {
    String ret = "";
    Type _type = it.getType();
    if ((_type instanceof Configurator.Enum)) {
      Type _type_1 = it.getType();
      final Configurator.Enum enumType = ((Configurator.Enum) _type_1);
      String _ret = ret;
      String _name = it.getName();
      String _firstUpper = StringExtensions.toFirstUpper(_name);
      String _plus = ("var $" + _firstUpper);
      String _plus_1 = (_plus + "Values = [");
      ret = (_ret + _plus_1);
      EList<Literal> _values = enumType.getValues();
      for (final Literal eval : _values) {
        EList<Literal> _values_1 = enumType.getValues();
        EList<Literal> _values_2 = enumType.getValues();
        int _size = _values_2.size();
        int _minus = (_size - 1);
        Literal _get = _values_1.get(_minus);
        boolean _equals = Objects.equal(eval, _get);
        if (_equals) {
          String _ret_1 = ret;
          String _enumValue = this.getEnumValue(eval, true);
          ret = (_ret_1 + _enumValue);
        } else {
          String _ret_2 = ret;
          String _enumValue_1 = this.getEnumValue(eval, false);
          String _plus_2 = (_enumValue_1 + " ");
          ret = (_ret_2 + _plus_2);
        }
      }
      String _ret_3 = ret;
      ret = (_ret_3 + "]; \n");
      int _maxChosenValues = it.getMaxChosenValues();
      boolean _equals_1 = (_maxChosenValues == 1);
      if (_equals_1) {
        String _ret_4 = ret;
        String _name_1 = it.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
        String _plus_3 = ("$(\"#" + _firstUpper_1);
        String _plus_4 = (_plus_3 + "\").jqxComboBox({ source: $");
        String _name_2 = it.getName();
        String _firstUpper_2 = StringExtensions.toFirstUpper(_name_2);
        String _plus_5 = (_plus_4 + _firstUpper_2);
        String _plus_6 = (_plus_5 + "Values, width: \'200px\', height: \'25px\',}); \n\n");
        ret = (_ret_4 + _plus_6);
      } else {
        String _ret_5 = ret;
        String _name_3 = it.getName();
        String _firstUpper_3 = StringExtensions.toFirstUpper(_name_3);
        String _plus_7 = ("$(\"#" + _firstUpper_3);
        String _plus_8 = (_plus_7 + "\").jqxListBox({ source: $");
        String _name_4 = it.getName();
        String _firstUpper_4 = StringExtensions.toFirstUpper(_name_4);
        String _plus_9 = (_plus_8 + _firstUpper_4);
        String _plus_10 = (_plus_9 + "Values, width: \'200px\', height: \'150px\', multiple: true}); \n\n");
        ret = (_ret_5 + _plus_10);
      }
    }
    EList<Parameter> _children = it.getChildren();
    boolean _isEmpty = _children.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Parameter> _children_1 = it.getChildren();
      for (final Parameter c : _children_1) {
        String _ret_6 = ret;
        Object _parametersJavaScript = this.getParametersJavaScript(c);
        ret = (_ret_6 + _parametersJavaScript);
      }
    }
    return ret;
  }
  
  public CharSequence getParametersJavaScript2(final Parameter it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Type _type = it.getType();
      if ((_type instanceof Configurator.Enum)) {
        Type _type_1 = it.getType();
        final Configurator.Enum enumType = ((Configurator.Enum) _type_1);
        _builder.newLineIfNotEmpty();
        _builder.append("var $");
        String _name = it.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name);
        _builder.append(_firstUpper, "");
        _builder.append("Values = [");
        _builder.newLineIfNotEmpty();
        {
          EList<Literal> _values = enumType.getValues();
          for(final Literal eval : _values) {
            {
              EList<Literal> _values_1 = enumType.getValues();
              EList<Literal> _values_2 = enumType.getValues();
              int _size = _values_2.size();
              int _minus = (_size - 1);
              Literal _get = _values_1.get(_minus);
              boolean _equals = Objects.equal(eval, _get);
              if (_equals) {
                String _enumValue = this.getEnumValue(eval, true);
                _builder.append(_enumValue, "");
                _builder.newLineIfNotEmpty();
              } else {
                String _enumValue_1 = this.getEnumValue(eval, false);
                _builder.append(_enumValue_1, "");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t\t\t");
          }
        }
        _builder.append("];");
        _builder.newLineIfNotEmpty();
        {
          int _maxChosenValues = it.getMaxChosenValues();
          boolean _equals_1 = (_maxChosenValues == 1);
          if (_equals_1) {
            _builder.append("$(\"#");
            String _name_1 = it.getName();
            String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
            _builder.append(_firstUpper_1, "");
            _builder.append("\").jqxComboBox({ source: $");
            String _name_2 = it.getName();
            String _firstUpper_2 = StringExtensions.toFirstUpper(_name_2);
            _builder.append(_firstUpper_2, "");
            _builder.append("Values, width: \'200px\', height: \'25px\',});");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("$(\"#");
            String _name_3 = it.getName();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_name_3);
            _builder.append(_firstUpper_3, "");
            _builder.append("\").jqxListBox({ source: $");
            String _name_4 = it.getName();
            String _firstUpper_4 = StringExtensions.toFirstUpper(_name_4);
            _builder.append(_firstUpper_4, "");
            _builder.append("Values, width: \'200px\', height: \'150px\', multiple: true});");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      EList<Parameter> _children = it.getChildren();
      boolean _isEmpty = _children.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          EList<Parameter> _children_1 = it.getChildren();
          for(final Parameter c : _children_1) {
            String _parametersJavaScript = this.getParametersJavaScript(c);
            _builder.append(_parametersJavaScript, "");
            _builder.append(" ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public String getEnumValue(final Literal it, final boolean islast) {
    String ret = "";
    if ((it instanceof Configurator.Integer)) {
      final Configurator.Integer intVal = ((Configurator.Integer) it);
      String _ret = ret;
      int _value = intVal.getValue();
      ret = (_ret + Integer.valueOf(_value));
      if ((!islast)) {
        String _ret_1 = ret;
        ret = (_ret_1 + ",");
      }
    } else {
      if ((it instanceof Configurator.Double)) {
        final Configurator.Double doubleVal = ((Configurator.Double) it);
        String _ret_2 = ret;
        double _value_1 = doubleVal.getValue();
        ret = (_ret_2 + Double.valueOf(_value_1));
        if ((!islast)) {
          String _ret_3 = ret;
          ret = (_ret_3 + ",");
        }
      } else {
        if ((it instanceof Configurator.Boolean)) {
          final Configurator.Boolean boolVal = ((Configurator.Boolean) it);
          String _ret_4 = ret;
          boolean _isValue = boolVal.isValue();
          ret = (_ret_4 + Boolean.valueOf(_isValue));
          if ((!islast)) {
            String _ret_5 = ret;
            ret = (_ret_5 + ",");
          }
        } else {
          if ((it instanceof Stringg)) {
            final Stringg stringlVal = ((Stringg) it);
            String _ret_6 = ret;
            String _value_2 = stringlVal.getValue();
            ret = (_ret_6 + _value_2);
            if ((!islast)) {
              String _ret_7 = ret;
              ret = (_ret_7 + ",");
            }
          }
        }
      }
    }
    return ret;
  }
  
  public CharSequence getParametersText(final Parameter it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _maxChosenValues = it.getMaxChosenValues();
      boolean _greaterThan = (_maxChosenValues > 0);
      if (_greaterThan) {
        {
          Type _type = it.getType();
          EClass _eClass = _type.eClass();
          String _name = _eClass.getName();
          boolean _equals = Objects.equal(_name, "Enum");
          if (_equals) {
            {
              int _maxChosenValues_1 = it.getMaxChosenValues();
              boolean _equals_1 = (_maxChosenValues_1 == 1);
              if (_equals_1) {
                _builder.append("text += \"");
                String _name_1 = it.getName();
                String _firstUpper = StringExtensions.toFirstUpper(_name_1);
                _builder.append(_firstUpper, "");
                _builder.append(": \" + $(\"#");
                String _name_2 = it.getName();
                String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
                _builder.append(_firstUpper_1, "");
                _builder.append("\").jqxComboBox(\'getSelectedItem\').value + \" \\r\\n\";");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("var items");
                String _name_3 = it.getName();
                String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
                _builder.append(_firstUpper_2, "");
                _builder.append(" = $(\"#");
                String _name_4 = it.getName();
                String _firstUpper_3 = StringExtensions.toFirstUpper(_name_4);
                _builder.append(_firstUpper_3, "");
                _builder.append("\").jqxListBox(\'getSelectedItems\');");
                _builder.newLineIfNotEmpty();
                _builder.append("text += \"");
                String _name_5 = it.getName();
                String _firstUpper_4 = StringExtensions.toFirstUpper(_name_5);
                _builder.append(_firstUpper_4, "");
                _builder.append(": \";\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("jQuery.each(items");
                String _name_6 = it.getName();
                String _firstUpper_5 = StringExtensions.toFirstUpper(_name_6);
                _builder.append(_firstUpper_5, "");
                _builder.append(", function(index, value){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("text += this.value + \", \"");
                _builder.newLine();
                _builder.append("});");
                _builder.newLine();
                _builder.append("text += \" \\r\\n\";");
                _builder.newLine();
              }
            }
          } else {
            _builder.append("text += \"");
            String _name_7 = it.getName();
            String _firstUpper_6 = StringExtensions.toFirstUpper(_name_7);
            _builder.append(_firstUpper_6, "");
            _builder.append(": \" + $(\"#");
            String _name_8 = it.getName();
            String _firstUpper_7 = StringExtensions.toFirstUpper(_name_8);
            _builder.append(_firstUpper_7, "");
            _builder.append("\").val() + \" \\r\\n\";");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        _builder.append("text += \"");
        String _name_9 = it.getName();
        String _firstUpper_8 = StringExtensions.toFirstUpper(_name_9);
        _builder.append(_firstUpper_8, "");
        _builder.append(": \" + \"\\r\\n\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EList<Parameter> _children = it.getChildren();
      boolean _isEmpty = _children.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          EList<Parameter> _children_1 = it.getChildren();
          for(final Parameter c : _children_1) {
            Object _parametersText = this.getParametersText(c);
            _builder.append(_parametersText, "");
            _builder.append(" ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence getMandatoryFields(final Parameter it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _minChosenValues = it.getMinChosenValues();
      boolean _greaterThan = (_minChosenValues > 0);
      if (_greaterThan) {
        {
          Type _type = it.getType();
          EClass _eClass = _type.eClass();
          String _name = _eClass.getName();
          boolean _equals = Objects.equal(_name, "Enum");
          if (_equals) {
            {
              int _maxChosenValues = it.getMaxChosenValues();
              boolean _equals_1 = (_maxChosenValues == 1);
              if (_equals_1) {
                _builder.append("if($(\"#");
                String _name_1 = it.getName();
                String _firstUpper = StringExtensions.toFirstUpper(_name_1);
                _builder.append(_firstUpper, "");
                _builder.append("\").jqxComboBox(\'getSelectedItem\') === null) valid += \"");
                String _name_2 = it.getName();
                String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
                _builder.append(_firstUpper_1, "");
                _builder.append(" must be selected! \\n\";");
                _builder.newLineIfNotEmpty();
              } else {
                int _maxChosenValues_1 = it.getMaxChosenValues();
                boolean _greaterThan_1 = (_maxChosenValues_1 > 1);
                if (_greaterThan_1) {
                  _builder.append("var items");
                  String _name_3 = it.getName();
                  String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
                  _builder.append(_firstUpper_2, "");
                  _builder.append(" = $(\"#");
                  String _name_4 = it.getName();
                  String _firstUpper_3 = StringExtensions.toFirstUpper(_name_4);
                  _builder.append(_firstUpper_3, "");
                  _builder.append("\").jqxListBox(\'getSelectedItems\');");
                  _builder.newLineIfNotEmpty();
                  _builder.append("if(items");
                  String _name_5 = it.getName();
                  String _firstUpper_4 = StringExtensions.toFirstUpper(_name_5);
                  _builder.append(_firstUpper_4, "");
                  _builder.append(".length == 0) valid += \"");
                  String _name_6 = it.getName();
                  String _firstUpper_5 = StringExtensions.toFirstUpper(_name_6);
                  _builder.append(_firstUpper_5, "");
                  _builder.append(" must be selected! \\n\";");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          } else {
            _builder.append("if($(\"#");
            String _name_7 = it.getName();
            String _firstUpper_6 = StringExtensions.toFirstUpper(_name_7);
            _builder.append(_firstUpper_6, "");
            _builder.append("\").val() === \"\") valid += \"");
            String _name_8 = it.getName();
            String _firstUpper_7 = StringExtensions.toFirstUpper(_name_8);
            _builder.append(_firstUpper_7, "");
            _builder.append(" must be filled! \\n\";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      EList<Parameter> _children = it.getChildren();
      boolean _isEmpty = _children.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          EList<Parameter> _children_1 = it.getChildren();
          for(final Parameter c : _children_1) {
            Object _mandatoryFields = this.getMandatoryFields(c);
            _builder.append(_mandatoryFields, "");
            _builder.append(" ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence getConstraint(final Constraint it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((it instanceof BinaryConstraint)) {
        final BinaryConstraint binCon = ((BinaryConstraint) it);
        _builder.newLineIfNotEmpty();
        _builder.append("( ");
        Constraint _leftOperand = binCon.getLeftOperand();
        Object _constraint = this.getConstraint(_leftOperand);
        _builder.append(_constraint, "");
        _builder.append(" ");
        BinaryOperator _operator = binCon.getOperator();
        CharSequence _operatorSign = this.getOperatorSign(_operator);
        _builder.append(_operatorSign, "");
        _builder.append(" ");
        Constraint _rightOperand = binCon.getRightOperand();
        Object _constraint_1 = this.getConstraint(_rightOperand);
        _builder.append(_constraint_1, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        if ((it instanceof Literal)) {
          {
            if ((it instanceof Stringg)) {
              final Stringg stringVal = ((Stringg) it);
              _builder.newLineIfNotEmpty();
              _builder.append("\"");
              String _value = stringVal.getValue();
              _builder.append(_value, "");
              _builder.append("\"");
              _builder.newLineIfNotEmpty();
            } else {
              if ((it instanceof Configurator.Integer)) {
                final Configurator.Integer intVal = ((Configurator.Integer) it);
                _builder.newLineIfNotEmpty();
                int _value_1 = intVal.getValue();
                _builder.append(_value_1, "");
                _builder.newLineIfNotEmpty();
              } else {
                if ((it instanceof Configurator.Double)) {
                  final Configurator.Double doubleVal = ((Configurator.Double) it);
                  _builder.newLineIfNotEmpty();
                  double _value_2 = doubleVal.getValue();
                  _builder.append(_value_2, "");
                  _builder.newLineIfNotEmpty();
                } else {
                  final Configurator.Boolean boolVal = ((Configurator.Boolean) it);
                  _builder.newLineIfNotEmpty();
                  boolean _isValue = boolVal.isValue();
                  _builder.append(_isValue, "");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _builder.append("\t\t");
        } else {
          _builder.append("\t");
          _builder.append("\t\t\t");
          final ParameterIdentifier id = ((ParameterIdentifier) it);
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          Parameter _parameter = id.getParameter();
          CharSequence _constraintParamValue = this.getConstraintParamValue(_parameter);
          _builder.append(_constraintParamValue, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence getOperatorSign(final BinaryOperator it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _value = it.getValue();
      boolean _equals = (_value == 0);
      if (_equals) {
        _builder.append("&&");
        _builder.newLine();
      } else {
        int _value_1 = it.getValue();
        boolean _equals_1 = (_value_1 == 1);
        if (_equals_1) {
          _builder.append("||");
          _builder.newLine();
        } else {
          int _value_2 = it.getValue();
          boolean _equals_2 = (_value_2 == 2);
          if (_equals_2) {
            _builder.append("XOR");
            _builder.newLine();
          } else {
            int _value_3 = it.getValue();
            boolean _equals_3 = (_value_3 == 3);
            if (_equals_3) {
              _builder.append("===");
              _builder.newLine();
            } else {
              int _value_4 = it.getValue();
              boolean _equals_4 = (_value_4 == 4);
              if (_equals_4) {
                _builder.append("!=");
                _builder.newLine();
              } else {
                int _value_5 = it.getValue();
                boolean _equals_5 = (_value_5 == 5);
                if (_equals_5) {
                  _builder.append(">");
                  _builder.newLine();
                } else {
                  int _value_6 = it.getValue();
                  boolean _equals_6 = (_value_6 == 6);
                  if (_equals_6) {
                    _builder.append("<");
                    _builder.newLine();
                  } else {
                    int _value_7 = it.getValue();
                    boolean _equals_7 = (_value_7 == 7);
                    if (_equals_7) {
                      _builder.append(">=");
                      _builder.newLine();
                    } else {
                      _builder.append("<=");
                      _builder.newLine();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence getConstraintParamValue(final Parameter it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Type _type = it.getType();
      EClass _eClass = _type.eClass();
      String _name = _eClass.getName();
      boolean _equals = Objects.equal(_name, "Enum");
      if (_equals) {
        {
          int _maxChosenValues = it.getMaxChosenValues();
          boolean _equals_1 = (_maxChosenValues == 1);
          if (_equals_1) {
            _builder.append("$(\"#");
            String _name_1 = it.getName();
            String _firstUpper = StringExtensions.toFirstUpper(_name_1);
            _builder.append(_firstUpper, "");
            _builder.append("\").jqxComboBox(\'getSelectedItem\').value");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        _builder.append("$(\"#");
        String _name_2 = it.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
        _builder.append(_firstUpper_1, "");
        _builder.append("\").val()");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence getConstraintText(final Constraint it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((it instanceof BinaryConstraint)) {
        final BinaryConstraint binCon = ((BinaryConstraint) it);
        _builder.newLineIfNotEmpty();
        _builder.append("( ");
        Constraint _leftOperand = binCon.getLeftOperand();
        Object _constraintText = this.getConstraintText(_leftOperand);
        _builder.append(_constraintText, "");
        _builder.append(" ");
        BinaryOperator _operator = binCon.getOperator();
        CharSequence _operatorSign = this.getOperatorSign(_operator);
        _builder.append(_operatorSign, "");
        _builder.append(" ");
        Constraint _rightOperand = binCon.getRightOperand();
        Object _constraintText_1 = this.getConstraintText(_rightOperand);
        _builder.append(_constraintText_1, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        if ((it instanceof Stringg)) {
          final Stringg stringVal = ((Stringg) it);
          _builder.newLineIfNotEmpty();
          _builder.append("String.");
          String _value = stringVal.getValue();
          _builder.append(_value, "");
          _builder.newLineIfNotEmpty();
        } else {
          if ((it instanceof ParameterIdentifier)) {
            final ParameterIdentifier id = ((ParameterIdentifier) it);
            _builder.newLineIfNotEmpty();
            Parameter _parameter = id.getParameter();
            String _name = _parameter.getName();
            _builder.append(_name, "");
            _builder.newLineIfNotEmpty();
          } else {
            CharSequence _constraint = this.getConstraint(it);
            _builder.append(_constraint, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    Model m = ((Model) _head);
    EList<ConfiguratorModel> _configuratorModels = m.getConfiguratorModels();
    for (final ConfiguratorModel root : _configuratorModels) {
      String _name = root.getName();
      String _plus = (_name + ".html");
      CharSequence _compileToHtml = this.compileToHtml(root);
      fsa.generateFile(_plus, _compileToHtml);
    }
  }
}
