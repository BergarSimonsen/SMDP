/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import Configurator.ConfiguratorModel
import Configurator.Model
import Configurator.Parameter
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import Configurator.Literal
import Configurator.BinaryConstraint

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class MyDslGenerator implements IGenerator {
	
	def compileToHtml(ConfiguratorModel it) {
		'''
		<html>
			<head>
				<link rel="stylesheet" href="jqwidgets-ver3.8.0/jqwidgets/styles/jqx.base.css" type="text/css"/>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/scripts/jquery-1.11.1.min.js"></script>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/jqwidgets/jqxcore.js"></script>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/jqwidgets/jqxbuttons.js"></script>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/jqwidgets/jqxscrollbar.js"></script>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/jqwidgets/jqxlistbox.js"></script>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/jqwidgets/jqxcombobox.js"></script>
				«getJavaScript(it)»
  			</head>
  			<body>
  				<h2> «name.toFirstUpper» </h2>
   				<hr/>
   				
  				«FOR p : parameters»
  					«getParametersHtml(p, 0)» 
  				«ENDFOR»	
  				
  				<br/><br/>
				<button type="button" id='submitButton'>Submit</button>
  			</body>
		</html>
		'''
	}
	
	def getJavaScript(ConfiguratorModel it) {
		'''
		<script type='text/javascript'>
			$(document).ready(function(){
				
						«FOR p : parameters»
  							«getParametersJavaScript(p)» 
  						«ENDFOR»
				
				function checkConstraints() { 
					var valid = "";
					
					«FOR p : parameters»
						«getMandatoryFields(p)»
					«ENDFOR»
						
					if(valid === "") {
						«FOR c : constraints»
							if(!(«getConstraint(c)»)) 
									valid += "Invalid constraint: " + "«getConstraintText(c)» \n";
						«ENDFOR»							
					}
						 
					return valid;
				};
				
				function getText() {
					var text = "";
					
					«FOR p : parameters»
  						«getParametersText(p)» 
  					«ENDFOR»
  					
					return text;
				};				
				
				$('#submitButton').click(function(){
					var validationMsg = checkConstraints();
		
					if(validationMsg.length === 0)
						save();
					else
						alert(validationMsg + "\n Please correct the values!");
				});
			
				function save() {
					var textToWrite = getText();
					var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
					var fileNameToSaveAs = "config.txt";

					var downloadLink = document.createElement("a");
					downloadLink.download = fileNameToSaveAs;
					downloadLink.innerHTML = "Download File";
					if (window.webkitURL != null) {			
						downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
					}
					else
					{
						downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
						downloadLink.onclick = destroyClickedElement;
						downloadLink.style.display = "none";
						document.body.appendChild(downloadLink);
					}

					downloadLink.click();
				}
	
				function destroyClickedElement(event){
					document.body.removeChild(event.target);
				}	
			});
		</script>
		'''
	}
	
	def getParametersHtml(Parameter it, int level) {
		var header = 3 + level
		if (header > 6) header = 6
		'''
		<h«header»>«name.toFirstUpper»:</h«header»>
		«IF minChosenValues > 0»
			«IF type.eClass.name == "Enum"»
				«IF maxChosenValues == 1»
					<div id='«name.toFirstUpper»' class='combobox'>
					</div>
				«ELSE»
					<div id='«name.toFirstUpper»' class='listbox'>
					</div>
				«ENDIF»
			«ELSE»
				<form>
				«IF type.eClass.name == "Integer" || type.eClass.name == "Double"»
					<input type='number' name='«name.toFirstUpper»' id='«name.toFirstUpper»'/>
				«ELSEIF type.eClass.name == "Stringg"»
					<input type='text' name='«name.toFirstUpper»' id='«name.toFirstUpper»'/>
				«ELSEIF type.eClass.name == "Boolean"»
					<input type='checkbox' name='«name.toFirstUpper»' id='«name.toFirstUpper»'/>
				«ENDIF»
				</form>
			«ENDIF»
		«ENDIF»
		
		«IF !children.empty»
			«FOR c : children»
  				«getParametersHtml(c, level + 1)» 
  			«ENDFOR»
		«ENDIF»
		'''
	}
	
	def getParametersJavaScript(Parameter it) {
		var ret ="";
		if(type instanceof Configurator.Enum) {
			val enumType = type as Configurator.Enum
			ret += "\t\tvar $" + name.toFirstUpper + "Values = ["
			for (eval : enumType.values) {
				if(eval == enumType.values.get(enumType.values.size - 1))
					ret += getEnumValue(eval, true)
				else
					ret += getEnumValue(eval, false) + " "
			}	
			ret += "]; \n"
			
			if(maxChosenValues == 1)					
				ret += "\t\t$(\"#" + name.toFirstUpper + "\").jqxComboBox({ source: $" 
						+ name.toFirstUpper + "Values, width: '200px', height: '25px',}); \n\n"
			else
				ret += "\t\t$(\"#" + name.toFirstUpper + "\").jqxListBox({ source: $" 
						+ name.toFirstUpper + "Values, width: '200px', height: '150px', multiple: true}); \n\n"
		}
		
		if(!children.empty)
			for(c : children)
				ret += getParametersJavaScript(c)
		
		return ret
	}
	
	def getEnumValue(Literal it, boolean islast){
		var ret = ""
		if (it instanceof Configurator.Integer){
			val intVal = it as Configurator.Integer
			ret += intVal.value 
			if(!islast) ret += ","
		}
		else if (it instanceof Configurator.Double){
			val doubleVal = it as Configurator.Double
			ret += doubleVal.value 
			if(!islast) ret += ","
		}
		else if (it instanceof Configurator.Boolean){
			val boolVal = it as Configurator.Boolean
			ret += boolVal.value 
			if(!islast) ret += ","
		}
		else if (it instanceof Configurator.Stringg){
			val stringlVal = it as Configurator.Stringg
			ret += "\"" +  stringlVal.value + "\""
			if(!islast) ret += ","
		}		
		return ret
	}
	
	def getParametersText(Parameter it) {
		var ret = ""	
		if (maxChosenValues > 0) {
			if(type.eClass.name == "Enum") {
				if(maxChosenValues == 1)
					ret += "\t\t\ttext += \"" + name.toFirstUpper + ": \" + $(\"#" + name.toFirstUpper + "\").jqxComboBox('getSelectedItem').value + \" \\r\\n\"; \n"
				else {
					ret += "\n"
					ret += "\t\t\tvar items" + name.toFirstUpper +  " = $(\"#" + name.toFirstUpper + "\").jqxListBox('getSelectedItems'); \n"
					ret += "\t\t\ttext += \"" + name.toFirstUpper + ": \"; \n"		
					ret += "\t\t\tjQuery.each(items" + name.toFirstUpper + ", function(index, value){ \n"
					ret += "\t\t\t\ttext += this.value + \", \" \n"
					ret += "\t\t\t}); \n"
					ret += "\t\t\ttext += \" \\r\\n\"; \n" 
				}
			}
			else {
				ret += "\t\t\ttext += \"" + name.toFirstUpper + ": \" + $(\"#" + name.toFirstUpper + "\").val() + \" \\r\\n\"; \n"
			}
		}
		else {
			ret += "\t\t\ttext += \"" + name.toFirstUpper + ": \" + \"\\r\\n\"; \n"	
		}
		
		if(!children.empty)
			for(c : children)
				ret += getParametersText(c)
			
		return ret
	}
	
	def getMandatoryFields(Parameter it) {
		var ret = "";
		if (minChosenValues > 0) {
			if (type.eClass.name == "Enum") {
				if(maxChosenValues == 1) 
					ret += "if($(\"#" + name.toFirstUpper + "\").jqxComboBox('getSelectedItem') === null) valid += \"" + name.toFirstUpper +  " must be selected! \\n\"; \n"
				else if (maxChosenValues > 1) {
					ret += "var items" + name.toFirstUpper +  " = $(\"#" + name.toFirstUpper + "\").jqxListBox('getSelectedItems'); \n"
					ret += "if(items" + name.toFirstUpper + ".length == 0) valid += \"" + name.toFirstUpper +  " must be selected! \\n\"; \n"
				}
			}				
			else
				ret += "if($(\"#" + name.toFirstUpper + "\").val() === \"\") valid += \"" + name.toFirstUpper +  " must be filled! \\n\"; \n"
		}			

		if (!children.empty)
			for (c : children)
  				ret += getMandatoryFields(c)
  			
  		return ret
	}
	
	def getConstraint(Configurator.Constraint it) {
		if(it instanceof BinaryConstraint) {
			val binCon = it as BinaryConstraint
			return "(" + getConstraint(binCon.leftOperand) + " " + getOperatorSign(binCon.operator) + " " + getConstraint(binCon.rightOperand) + ")"
		}			
		else if(it instanceof Literal) {
			if(it instanceof Configurator.Stringg) {
				val stringVal = it as Configurator.Stringg
				return "\"" + stringVal.value + "\""
			}  
			else if(it instanceof Configurator.Integer) {
				val intVal = it as Configurator.Integer
				return intVal.value
			}				
			else if(it instanceof Configurator.Double) {
				val doubleVal = it as Configurator.Double
				return doubleVal.value
			} 				
			else {
				val boolVal = it as Configurator.Boolean
				return boolVal.value
			}
		}			
		else {	// ParameterIdentifier
			val id = it as Configurator.ParameterIdentifier
			return getConstraintParamValue(id.parameter)
		}	
	}
	
	def getOperatorSign(Configurator.BinaryOperator it) {
		if(it.value == 0)
			return "&&"
		else if(it.value == 1)
			return "||"
		else if(it.value == 2)
			return "XOR"
		else if(it.value == 3)
			return "==="
		else if(it.value == 4)
			return "!="
		else if(it.value == 5)
			return ">"
		else if(it.value == 6)
			return "<"
		else if(it.value == 7)
			return ">="
		else
			return "<="
	}
	
	def getConstraintParamValue(Parameter it) {
		var ret = ""
		if(type.eClass.name == "Enum") {
			if(maxChosenValues == 1) {
				ret += "$(\"#" + name.toFirstUpper + "\").jqxComboBox('getSelectedItem').value"
			}
//			else if(maxChosenValues > 1){
//				var items«name.toFirstUpper» = $("#«name.toFirstUpper»").jqxListBox('getSelectedItems');
//				if(items«name.toFirstUpper».length == 0) valid += "«name.toFirstUpper» must be selected! \n";
//			}
		}
		else {
			ret += "$(\"#" + name.toFirstUpper + "\").val()"
		}		
		
		return ret
	}
	
	def getConstraintText(Configurator.Constraint it) {
		if(it instanceof BinaryConstraint){
			val binCon = it as BinaryConstraint
			return "(" + getConstraintText(binCon.leftOperand) + " " + getOperatorSign(binCon.operator) + " " + getConstraintText(binCon.rightOperand) + ")"
		}			
		else if(it instanceof Configurator.Stringg) {
			val stringVal = it as Configurator.Stringg
			return "String." + stringVal.value
		} 
		else if(it instanceof Configurator.ParameterIdentifier) {
			val id = it as Configurator.ParameterIdentifier
			return id.parameter.name
		}
		else
			return getConstraint(it)
	}	
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var m = resource.contents.head as Model
		for(ConfiguratorModel root : m.configuratorModels) {
			fsa.generateFile(root.name + ".html", compileToHtml(root))
		}
	}
	
//	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
////		fsa.generateFile('greetings.txt', 'People to greet: ' + 
////			resource.allContents
////				.filter(typeof(Greeting))
////				.map[name]
////				.join(', '))
//	}
}
