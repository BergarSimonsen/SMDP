/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import Configurator.ConfiguratorModel
import Configurator.Model
import Configurator.Parameter
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import Configurator.Literal
import Configurator.BinaryConstraint
import Configurator.BinaryOperator

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class MyDslGenerator implements IGenerator {
	
	// Java generator
	// -------------------------------------------------------------------------------------------------------------------------------
	
	def compileToJava(ConfiguratorModel it) {
		'''
	import java.awt.BorderLayout;
	import java.awt.Color;
	import java.awt.Container;
	import java.awt.Dimension;
	import java.awt.FlowLayout;
	import java.awt.GridBagConstraints;
	import java.awt.GridBagLayout;
	import java.awt.event.ActionEvent;
	import java.awt.event.ActionListener;
	import java.io.BufferedWriter;
	import java.io.File;
	import java.io.FileWriter;
	import java.io.IOException;
	import javax.swing.BorderFactory;
	import javax.swing.JButton;
	import javax.swing.JCheckBox;
	import javax.swing.JComboBox;
	import javax.swing.JFrame;
	import javax.swing.JLabel;
	import javax.swing.JList;
	import javax.swing.JOptionPane;
	import javax.swing.JPanel;
	import javax.swing.JTextField;
	
	public class « name.toFirstUpper » extends JFrame { 
		private static final long serialVersionUID = 1L;
		private JLabel titleLabel = new JLabel("«name.toFirstUpper»");
		«FOR p : parameters»
			«generateJavaLabel(p)»
		«ENDFOR»
		«FOR p : parameters»
			«generateJavaVariables(p)»
		«ENDFOR»
		private JButton submitButton = new JButton("Submit");
		
		public void setup() {
			JPanel panel = new JPanel();
			setPreferredSize(new Dimension(800, 600));
			Container contentPane = getContentPane();
			contentPane.setLayout(new BorderLayout());
			JPanel mainPanel = new JPanel();
			mainPanel.setLayout(new FlowLayout());
			contentPane.add(mainPanel, BorderLayout.CENTER);
			
			submitButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					String c = checkConstraints();
					if(c != null && c.length() == 0) {
						boolean b = save();
						if(b)
							JOptionPane.showMessageDialog(null, "Configuration file saved successfully!");
					} else 
						JOptionPane.showMessageDialog(null, c);
				}
			});
			
			getContentPane().add(BorderLayout.NORTH, titleLabel);
			panel.setLayout(new GridBagLayout());
			panel.setBackground(Color.GREEN);
			getContentPane().add(panel);
			GridBagConstraints left = new GridBagConstraints();
			left.anchor = GridBagConstraints.EAST;
			GridBagConstraints right = new GridBagConstraints();
			right.weightx = 2.0;
			right.fill = GridBagConstraints.HORIZONTAL;
			right.gridwidth = GridBagConstraints.REMAINDER;
			
			«FOR p : parameters»
			«addToJavaPanel(p)»
			«ENDFOR»
			
			panel.add(submitButton, left);
			
			panel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
			pack();
			setDefaultCloseOperation(EXIT_ON_CLOSE);
			setLocationRelativeTo(null);
			show();	
		}
		
		private String checkConstraints() {
			String s = "";
			«FOR p : parameters»
			«generateJavaRequiredFields(p)»
			«ENDFOR»
			if(s.length() == 0) {
				«FOR c : constraints»
				if(!«generateJavaConstraint(c)»)
					s += "Constraint violated!\n"; 
				«ENDFOR»
			}
			return s;	
		}
		
		private boolean save() {
			try {
				File f = new File("configurator_output.txt");
				String s = "";
					
				«FOR p : parameters»
				«generateJavaVariableStringValue(p)»
				«ENDFOR»
				FileWriter fw = new FileWriter(f);
				BufferedWriter bw = new BufferedWriter(fw);
				bw.write(s);
				bw.flush();
				bw.close();
				return true;
			} catch (IOException e) {
				e.printStackTrace();
				return false;
			}
		}
		
		public static void main(String[] args) {
			«name.toFirstUpper» c = new «name.toFirstUpper»();
			c.setup();	
		}
	}
		'''
	}
	
	def getEnumValueJavaType(Literal it){
		if(it instanceof Configurator.Integer) 	return "Integer"
		if(it instanceof Configurator.Double) 	return "Double"
		if(it instanceof Configurator.Boolean) 	return "Boolean"
		if(it instanceof Configurator.Stringg) 	return "String"
	}
	
	def generateJavaLabel(Parameter it) {
		var r = "private JLabel " + name.toFirstLower + "Label = new JLabel(\"" + name.toFirstUpper + "\");"
		for(c : children)
			r += "\n" + generateJavaLabel(c)
		return r
	}
	
	def generateJavaVariables(Parameter it) {
		var r = "";
		if (type.eClass.name == "Enum") {
			val et = type as Configurator.Enum
			if (maxChosenValues == 1) { // Generate combo boxes
				r += "private " + getEnumValueJavaType(et.values.get(0)) + "[] " + name.toFirstLower + "ComboBoxValues = new " + getEnumValueJavaType(et.values.get(0)) + "[] {"
				for(Literal l : et.values) {
					r += getEnumValue(l, (l == et.values.get(et.values.size - 1)))
				}
				r += "};\n"
				r += "private JComboBox<" + getEnumValueJavaType(et.values.get(0)) + "> " + name.toFirstLower + "ComboBox = new JComboBox<" + getEnumValueJavaType(et.values.get(0)) + ">(" + name.toFirstLower + "ComboBoxValues);\n"
			} else if (maxChosenValues > 1) { // Generate jlists
				r += "private " + getEnumValueJavaType(et.values.get(0)) + "[] " + name.toFirstLower + "ListValues = new " + getEnumValueJavaType(et.values.get(0)) + "[] {"
				for(Literal l : et.values) {
					r += getEnumValue(l, (l == et.values.get(et.values.size - 1)))
				}
				r += "};\n"
				r += "private JList<" + getEnumValueJavaType(et.values.get(0)) + "> " + name.toFirstLower + "List = new JList<" + getEnumValueJavaType(et.values.get(0)) + ">(" + name.toFirstLower + "ListValues);\n"
			}
		} else if(type.eClass.name == "Boolean" && children.empty) {
			r += "private JCheckBox " + name.toFirstLower + "CheckBox = new JCheckBox();\n" 
		} else {
			r += "private JTextField " + name.toFirstLower + "TextField = new JTextField(\"" + name.toFirstUpper + "\");\n"
		}
		for(c : children)
			r += generateJavaVariables(c)
		return r;
	}
	
	def addToJavaPanel(Parameter it) {
		var r = ""
		r += "panel.add(" + name.toFirstLower + "Label, left);\n"
		if (type.eClass.name == "Enum") {
			val et = type as Configurator.Enum
			if(maxChosenValues == 1) {
				if(children == null || children.size == 0)
					r += "panel.add(" + name.toFirstLower + "ComboBox, right);\n"
				else
					r += "panel.add(new JLabel(), right);\n"
			} else if (maxChosenValues > 1) {
				if(children == null || children.size == 0)
					r += "panel.add(" + name.toFirstLower + "List, right);\n"
				else
					r += "panel.add(new JLabel(), right);\n"
			}
		} else if(type.eClass.name == "Boolean" && children.empty) { 
			r += "panel.add(" + name.toFirstLower + "CheckBox, right);\n"
		} else {
			if(children == null || children.size == 0)
				r += "panel.add(" + name.toFirstLower + "TextField, right);\n"
			else
				r += "panel.add(new JLabel(), right);\n"
		}
		for(c : children)
			r += addToJavaPanel(c)
		return r
	}
	
	def generateJavaVariableStringValue(Parameter it) {
		var r = "s += " + name.toFirstLower + "Label.getText() + \" : \";\n"
		if (type.eClass.name == "Enum") {
			val et = type as Configurator.Enum
			if(maxChosenValues == 1) {
				r += "s += " + name.toFirstLower + "ComboBox.getSelectedItem().toString();\n\n"
			} else if (maxChosenValues > 1) {
				r += "for(" + getEnumValueJavaType(et.values.get(0)) + " p : " + name.toFirstLower + "List.getSelectedValuesList())\n"
				r += "\t s += String.valueOf(p) + \", \";\n\n"
			}
		} else if (type.eClass.name == "Boolean" && children.empty) { 
			r += "s += String.valueOf(" + name.toFirstLower + "CheckBox.isSelected());\n\n"
		} else {
			if(children == null || children.size == 0)
				r += "s += " + name.toFirstLower + "TextField.getText();\n\n"
		}
		for (c : children)
			r += generateJavaVariableStringValue(c)
		return r
	}
	
	def generateJavaConstraint(Configurator.Constraint it) {
		if(it instanceof BinaryConstraint) {
			val bc = it as BinaryConstraint
			return "(" + generateJavaConstraint(bc.leftOperand) + " " + generateJavaOperator(bc.operator) + " " + generateJavaConstraint(bc.rightOperand) + ")"
		} else if(it instanceof Literal) {
			if(it instanceof Configurator.Stringg) {
				val v = it as Configurator.Stringg
				return "\"" + v.value + "\""
			} else if (it instanceof Configurator.Integer) {
				val v = it as Configurator.Integer
				return v.value
			} else if (it instanceof Configurator.Double) {
				val v = it as Configurator.Double
				return v.value
			} else {
				val v = it as Configurator.Boolean
				return v.value
			}
		} else {
			val id = it as Configurator.ParameterIdentifier
			return generateConstraintParamValueJava(id.parameter)			
		}
	}
	
	def generateConstraintParamValueJava(Parameter it) {
		var ret = ""
		if(type.eClass.name == "Enum") {
			var et = type as Configurator.Enum
			if(maxChosenValues == 1) {
				ret += "(" + getEnumValueJavaType(et.values.get(0)) + ")" + name.toFirstLower + "ComboBox.getSelectedItem()"
			} 
		} else if(type.eClass.name == "Boolean" && children.empty) {
			ret += name.toFirstLower + "CheckBox.isSelected()"
		} else {
			ret += name.toFirstLower + "TextField.getText()"
		}
		return ret
	}
	
	def generateJavaOperator(BinaryOperator it) {
		if(value == 0) return "&&"
		else if(value == 1) return "||"
		else if(value == 2) return "XOR"
		else if(value == 3) return "=="
		else if(value == 4) return "!="
		else if(value == 5) return ">"
		else if(value == 6) return "<"
		else if(value == 7) return ">="
		else return "<="
	}
	
	def generateJavaRequiredFields(Parameter it) {
		'''
		«IF minChosenValues > 0»
		«IF type.eClass.name == "Enum"»
			«IF maxChosenValues == 1»
			if(«name.toFirstLower»ComboBox.getSelectedItem() == null)
				s += "«name.toFirstUpper» is required";
			«ELSEIF maxChosenValues > 1»
			if(«name.toFirstLower»List.getSelectedValuesList() == null || «name.toFirstLower»List.getSelectedValuesList().size() == 0)
				s += "«name.toFirstUpper» must have at least " + «minChosenValues» + " and max " + «maxChosenValues» + " values";
			«ENDIF»
		«ELSEIF type.eClass.name != "Boolean" && type.eClass.name != "Enum"»
			if(«name.toFirstLower»TextField.getText() == null || «name.toFirstLower»TextField.getText().length() == 0)
				s += "«name.toFirstUpper» is required";
		«ENDIF»
		
		«ENDIF»
		«FOR c : children»
		«generateJavaRequiredFields(c)»
		«ENDFOR»
		'''
	}
	
	// HTML generator
	// -------------------------------------------------------------------------------------------------------------------------------
	
	def compileToHtml(ConfiguratorModel it) {
		'''
		<html>
			<head>
				<link rel="stylesheet" href="jqwidgets-ver3.8.0/jqwidgets/styles/jqx.base.css" type="text/css"/>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/scripts/jquery-1.11.1.min.js"></script>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/jqwidgets/jqxcore.js"></script>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/jqwidgets/jqxbuttons.js"></script>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/jqwidgets/jqxscrollbar.js"></script>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/jqwidgets/jqxlistbox.js"></script>
				<script type="text/javascript" src="jqwidgets-ver3.8.0/jqwidgets/jqxcombobox.js"></script>
				«getJavaScript(it)»
  			</head>
  			<body>
  				<h2> «name.toFirstUpper» </h2>
   				<hr/>
   				
  				«FOR p : parameters»
  					«getParametersHtml(p, 0)» 
  				«ENDFOR»	
  				
  				<br/><br/>
				<button type="button" id='submitButton'>Submit</button>
  			</body>
		</html>
		'''
	}
	
	def getJavaScript(ConfiguratorModel it) {
		'''
		<script type='text/javascript'>
			$(document).ready(function(){
				
						«FOR p : parameters»
  							«getParametersJavaScript(p)» 
  						«ENDFOR»
				
				function checkConstraints() { 
					var valid = "";
					
					«FOR p : parameters»
						«getMandatoryFields(p)»
					«ENDFOR»
						
					if(valid === "") {
						«FOR c : constraints»
							if(!(«getConstraint(c)»)) 
									valid += "Invalid constraint: " + "«getConstraintText(c)» \n";
						«ENDFOR»							
					}
						 
					return valid;
				};
				
				function getText() {
					var text = "";
					
					«FOR p : parameters»
  						«getParametersText(p)» 
  					«ENDFOR»
  					
					return text;
				};				
				
				$('#submitButton').click(function(){
					var validationMsg = checkConstraints();
		
					if(validationMsg.length === 0)
						save();
					else
						alert(validationMsg + "\n Please correct the values!");
				});
			
				function save() {
					var textToWrite = getText();
					var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
					var fileNameToSaveAs = "config.txt";

					var downloadLink = document.createElement("a");
					downloadLink.download = fileNameToSaveAs;
					downloadLink.innerHTML = "Download File";
					if (window.webkitURL != null) {			
						downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
					}
					else
					{
						downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
						downloadLink.onclick = destroyClickedElement;
						downloadLink.style.display = "none";
						document.body.appendChild(downloadLink);
					}

					downloadLink.click();
				}
	
				function destroyClickedElement(event){
					document.body.removeChild(event.target);
				}	
			});
		</script>
		'''
	}
	
	def getParametersHtml(Parameter it, int level) {
		var header = 3 + level
		if (header > 6) header = 6
		'''
		<h«header»>«name.toFirstUpper»:</h«header»>
		«IF minChosenValues > 0»
			«IF type.eClass.name == "Enum"»
				«IF maxChosenValues == 1»
					<div id='«name.toFirstUpper»' class='combobox'>
					</div>
				«ELSE»
					<div id='«name.toFirstUpper»' class='listbox'>
					</div>
				«ENDIF»
			«ELSE»
				<form>
				«IF type.eClass.name == "Integer" || type.eClass.name == "Double"»
					<input type='number' name='«name.toFirstUpper»' id='«name.toFirstUpper»'/>
				«ELSEIF type.eClass.name == "Stringg"»
					<input type='text' name='«name.toFirstUpper»' id='«name.toFirstUpper»'/>
				«ELSEIF type.eClass.name == "Boolean"»
					<input type='checkbox' name='«name.toFirstUpper»' id='«name.toFirstUpper»'/>
				«ENDIF»
				</form>
			«ENDIF»
		«ENDIF»
		
		«IF !children.empty»
			«FOR c : children»
  				«getParametersHtml(c, level + 1)» 
  			«ENDFOR»
		«ENDIF»
		'''
	}
	
	def getParametersJavaScript(Parameter it) {
		var ret ="";
		if(type instanceof Configurator.Enum) {
			val enumType = type as Configurator.Enum
			ret += "\t\tvar $" + name.toFirstUpper + "Values = ["
			for (eval : enumType.values) {
				if(eval == enumType.values.get(enumType.values.size - 1))
					ret += getEnumValue(eval, true)
				else
					ret += getEnumValue(eval, false) + " "
			}	
			ret += "]; \n"
			
			if(maxChosenValues == 1)					
				ret += "\t\t$(\"#" + name.toFirstUpper + "\").jqxComboBox({ source: $" 
						+ name.toFirstUpper + "Values, width: '200px', height: '25px',}); \n\n"
				
			else
				ret += "\t\t$(\"#" + name.toFirstUpper + "\").jqxListBox({ source: $" 
						+ name.toFirstUpper + "Values, width: '200px', height: '150px', multiple: true}); \n\n"
		}
		
		if(!children.empty)
			for(c : children)
				ret += getParametersJavaScript(c)
		
		return ret
	}
	
	def getEnumValue(Literal it, boolean islast){
		var ret = ""
		if (it instanceof Configurator.Integer){
			val intVal = it as Configurator.Integer
			ret += intVal.value 
			if(!islast) ret += ","
		}
		else if (it instanceof Configurator.Double){
			val doubleVal = it as Configurator.Double
			ret += doubleVal.value 
			if(!islast) ret += ","
		}
		else if (it instanceof Configurator.Boolean){
			val boolVal = it as Configurator.Boolean
			ret += boolVal.value 
			if(!islast) ret += ","
		}
		else if (it instanceof Configurator.Stringg){
			val stringlVal = it as Configurator.Stringg
			ret += "\"" +  stringlVal.value + "\""
			if(!islast) ret += ","
		}		
		return ret
	}
	
	def getParametersText(Parameter it) {
		var ret = ""	
		if (maxChosenValues > 0) {
			if(type.eClass.name == "Enum") {
				if(maxChosenValues == 1)
					ret += "\t\t\ttext += \"" + name.toFirstUpper + ": \" + $(\"#" + name.toFirstUpper + "\").jqxComboBox('getSelectedItem').value + \" \\r\\n\"; \n"
				else {
					ret += "\n"
					ret += "\t\t\tvar items" + name.toFirstUpper +  " = $(\"#" + name.toFirstUpper + "\").jqxListBox('getSelectedItems'); \n"
					ret += "\t\t\ttext += \"" + name.toFirstUpper + ": \"; \n"		
					ret += "\t\t\tjQuery.each(items" + name.toFirstUpper + ", function(index, value){ \n"
					ret += "\t\t\t\ttext += this.value + \", \" \n"
					ret += "\t\t\t}); \n"
					ret += "\t\t\ttext += \" \\r\\n\"; \n" 
				}
			}
			else if (type.eClass.name == "Boolean") {
				ret += "\t\t\ttext += \"" + name.toFirstUpper + ": \" + $(\"#" + name.toFirstUpper + "\").prop('checked') + \" \\r\\n\"; \n"	
			}
			else {
				ret += "\t\t\ttext += \"" + name.toFirstUpper + ": \" + $(\"#" + name.toFirstUpper + "\").val() + \" \\r\\n\"; \n"
			}
		}
		else {
			ret += "\t\t\ttext += \"" + name.toFirstUpper + ": \" + \"\\r\\n\"; \n"	
		}
		
		if(!children.empty)
			for(c : children)
				ret += getParametersText(c)
			
		return ret
	}
	
	def getMandatoryFields(Parameter it) {
		var ret = "";
		if (minChosenValues > 0) {
			if (type.eClass.name == "Enum") {
				if(maxChosenValues == 1) 
					ret += "if($(\"#" + name.toFirstUpper + "\").jqxComboBox('getSelectedItem') === null) valid += \"" + name.toFirstUpper +  " must be selected! \\n\"; \n"
				else if (maxChosenValues > 1) {
					ret += "var items" + name.toFirstUpper +  " = $(\"#" + name.toFirstUpper + "\").jqxListBox('getSelectedItems'); \n"
					ret += "if(items" + name.toFirstUpper + ".length < " + minChosenValues + ") valid += \"At least " + minChosenValues + " values of " + name.toFirstUpper +  " must be selected! \\n\"; \n"
					ret += "if(items" + name.toFirstUpper + ".length > " + maxChosenValues + ") valid += \"No more than " + maxChosenValues + " values of " + name.toFirstUpper +  " must be selected! \\n\"; \n"
				}
			}				
			else if (type.eClass.name != "Boolean")
				ret += "if($(\"#" + name.toFirstUpper + "\").val() === \"\") valid += \"" + name.toFirstUpper +  " must be filled! \\n\"; \n"
		}			

		if (!children.empty)
			for (c : children)
  				ret += getMandatoryFields(c)
  			
  		return ret
	}
	
	def getConstraint(Configurator.Constraint it) {
		if(it instanceof BinaryConstraint) {
			val binCon = it as BinaryConstraint
			return "(" + getConstraint(binCon.leftOperand) + " " + getOperatorSign(binCon.operator) + " " + getConstraint(binCon.rightOperand) + ")"
		}			
		else if(it instanceof Literal) {
			if(it instanceof Configurator.Stringg) {
				val stringVal = it as Configurator.Stringg
				return "\"" + stringVal.value + "\""
			}  
			else if(it instanceof Configurator.Integer) {
				val intVal = it as Configurator.Integer
				return intVal.value
			}				
			else if(it instanceof Configurator.Double) {
				val doubleVal = it as Configurator.Double
				return doubleVal.value
			} 				
			else {
				val boolVal = it as Configurator.Boolean
				return boolVal.value
			}
		}			
		else {	// ParameterIdentifier
			val id = it as Configurator.ParameterIdentifier
			return getConstraintParamValue(id.parameter)
		}	
	}
	
	def getOperatorSign(Configurator.BinaryOperator it) {
		if(it.value == 0) return "&&"
		else if(it.value == 1)	return "||"
		else if(it.value == 2)	return "XOR"
		else if(it.value == 3)	return "==="
		else if(it.value == 4)	return "!="
		else if(it.value == 5)	return ">"
		else if(it.value == 6)	return "<"
		else if(it.value == 7)	return ">="
		else return "<="
	}
	
	def getConstraintParamValue(Parameter it) {
		var ret = ""
		if(type.eClass.name == "Enum") {
			if(maxChosenValues == 1) {
				ret += "$(\"#" + name.toFirstUpper + "\").jqxComboBox('getSelectedItem').value"
			}
//			else if(maxChosenValues > 1){
//				var items«name.toFirstUpper» = $("#«name.toFirstUpper»").jqxListBox('getSelectedItems');
//				if(items«name.toFirstUpper».length == 0) valid += "«name.toFirstUpper» must be selected! \n";
//			}
		}
		else if (type.eClass.name == "Boolean") {
			ret += "$(\"#" + name.toFirstUpper + "\").prop('checked')"
		}	
		else {
			ret += "$(\"#" + name.toFirstUpper + "\").val()"
		}		
		
		return ret
	}
	
	def getConstraintText(Configurator.Constraint it) {
		if(it instanceof BinaryConstraint){
			val binCon = it as BinaryConstraint
			return "(" + getConstraintText(binCon.leftOperand) + " " + getOperatorSign(binCon.operator) + " " + getConstraintText(binCon.rightOperand) + ")"
		}			
		else if(it instanceof Configurator.Stringg) {
			val stringVal = it as Configurator.Stringg
			return "String." + stringVal.value
		} 
		else if(it instanceof Configurator.ParameterIdentifier) {
			val id = it as Configurator.ParameterIdentifier
			return id.parameter.name
		}
		else
			return getConstraint(it)
	}	
	
	
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var m = resource.contents.head as Model
		for(ConfiguratorModel root : m.configuratorModels) {
			fsa.generateFile(root.name + ".html", compileToHtml(root))
			fsa.generateFile(root.name + ".java", compileToJava(root))
		}
	}
	
//	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
////		fsa.generateFile('greetings.txt', 'People to greet: ' + 
////			resource.allContents
////				.filter(typeof(Greeting))
////				.map[name]
////				.join(', '))
//	}
}
